[33mcommit 7ab81d4f2fcf9c357758e5205c7184ecae0022c7[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Jul 15 10:40:25 2017 +0800

    更新composer.json

[1mdiff --git a/composer.json b/composer.json[m
[1mindex c4de66b..c8f16ee 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -17,7 +17,7 @@[m
     ],[m
     "require": {[m
         "php": ">=5.4.0",[m
[31m-        "topthink/framework": "^5.0"[m
[32m+[m[32m        "topthink/framework": "~5.0.0"[m
     },[m
     "extra": {[m
         "think-path": "thinkphp"[m

[33mcommit cff793cdd37f582701354994829af51d3e37abb5[m
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Jul 4 11:52:57 2017 +0800

    默认关闭调试模式

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 032968a..aaad92d 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -17,7 +17,7 @@[m [mreturn [[m
     // 应用命名空间[m
     'app_namespace'          => 'app',[m
     // 应用调试模式[m
[31m-    'app_debug'              => true,[m
[32m+[m[32m    'app_debug'              => false,[m
     // 应用Trace[m
     'app_trace'              => false,[m
     // 应用模式状态[m

[33mcommit 1783221cea9268f91cc9a30a537312f211a00a58[m
Author: liuyaya <ticmers@gmail.com>
Date:   Sat May 20 22:32:09 2017 +0800

    框架引导文件改为绝对路径

[1mdiff --git a/think b/think[m
[1mindex 8afa938..4e2688f 100644[m
[1m--- a/think[m
[1m+++ b/think[m
[36m@@ -14,4 +14,4 @@[m
 define('APP_PATH', __DIR__ . '/application/');[m
 [m
 // 加载框架引导文件[m
[31m-require './thinkphp/console.php';[m
\ No newline at end of file[m
[32m+[m[32mrequire __DIR__.'/thinkphp/console.php';[m

[33mcommit 6d2c7ec9e91cf81b0b1ac249f4af6a89cf3ac707[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Mar 20 11:09:47 2017 +0800

    配置调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 21c0531..032968a 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -114,6 +114,8 @@[m [mreturn [[m
     'request_cache'          => false,[m
     // 请求缓存有效期[m
     'request_cache_expire'   => null,[m
[32m+[m[32m    // 全局请求缓存排除规则[m
[32m+[m[32m    'request_cache_except'   => [],[m
 [m
     // +----------------------------------------------------------------------[m
     // | 模板设置[m

[33mcommit 6cfac53224ffbdf764441d8736d8f751a5c7d84e[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Feb 24 14:46:01 2017 +0800

    更新

[1mdiff --git a/README.md b/README.md[m
[1mindex 84c8fbc..81cf109 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -120,7 +120,7 @@[m [mThinkPHP遵循Apache2开源协议发布，并提供免费使用。[m
 [m
 本项目包含的第三方源码和二进制文件之版权信息另行标注。[m
 [m
[31m-版权所有Copyright © 2006-2016 by ThinkPHP (http://thinkphp.cn)[m
[32m+[m[32m版权所有Copyright © 2006-2017 by ThinkPHP (http://thinkphp.cn)[m
 [m
 All rights reserved。[m
 [m

[33mcommit eb1d4e02124dbf461ca6c1f9ffaae02a7b889b3f[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Feb 3 17:37:52 2017 +0800

    配置调整

[1mdiff --git a/application/database.php b/application/database.php[m
[1mindex ea82ca3..4caac2f 100644[m
[1m--- a/application/database.php[m
[1m+++ b/application/database.php[m
[36m@@ -48,4 +48,6 @@[m [mreturn [[m
     'auto_timestamp'  => false,[m
     // 时间字段取出后的默认时间格式[m
     'datetime_format' => 'Y-m-d H:i:s',[m
[32m+[m[32m    // 是否需要进行SQL性能分析[m
[32m+[m[32m    'sql_explain'     => false,[m
 ];[m

[33mcommit c2ba7ac4c6633bdc1d3d94d36e49911952c5badc[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Feb 3 17:36:36 2017 +0800

    去除一些数据库配置 避免使用数据库驱动的时候影响

[1mdiff --git a/application/database.php b/application/database.php[m
[1mindex 5d3cab1..ea82ca3 100644[m
[1m--- a/application/database.php[m
[1m+++ b/application/database.php[m
[36m@@ -48,10 +48,4 @@[m [mreturn [[m
     'auto_timestamp'  => false,[m
     // 时间字段取出后的默认时间格式[m
     'datetime_format' => 'Y-m-d H:i:s',[m
[31m-    // 是否需要进行SQL性能分析[m
[31m-    'sql_explain'     => false,[m
[31m-    // Builder类[m
[31m-    'builder'         => '',[m
[31m-    // Query类[m
[31m-    'query'           => '\\think\\db\\Query',[m
 ];[m

[33mcommit 600613e8fc6b79ae3983dfeb1c165c2bd1c4ed34[m
Merge: 67d1b31 25bc5f6
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Jan 17 08:20:30 2017 +0800

    Merge branch 'master' of https://github.com/top-think/think

[33mcommit 67d1b3194201fdb01bd1053b4352afe4e60c8890[m
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Jan 17 08:20:11 2017 +0800

    配置调整

[1mdiff --git a/application/database.php b/application/database.php[m
[1mindex 9079069..5d3cab1 100644[m
[1m--- a/application/database.php[m
[1m+++ b/application/database.php[m
[36m@@ -11,41 +11,47 @@[m
 [m
 return [[m
     // 数据库类型[m
[31m-    'type'           => 'mysql',[m
[32m+[m[32m    'type'            => 'mysql',[m
     // 服务器地址[m
[31m-    'hostname'       => '127.0.0.1',[m
[32m+[m[32m    'hostname'        => '127.0.0.1',[m
     // 数据库名[m
[31m-    'database'       => '',[m
[32m+[m[32m    'database'        => '',[m
     // 用户名[m
[31m-    'username'       => 'root',[m
[32m+[m[32m    'username'        => 'root',[m
     // 密码[m
[31m-    'password'       => '',[m
[32m+[m[32m    'password'        => '',[m
     // 端口[m
[31m-    'hostport'       => '',[m
[32m+[m[32m    'hostport'        => '',[m
     // 连接dsn[m
[31m-    'dsn'            => '',[m
[32m+[m[32m    'dsn'             => '',[m
     // 数据库连接参数[m
[31m-    'params'         => [],[m
[32m+[m[32m    'params'          => [],[m
     // 数据库编码默认采用utf8[m
[31m-    'charset'        => 'utf8',[m
[32m+[m[32m    'charset'         => 'utf8',[m
     // 数据库表前缀[m
[31m-    'prefix'         => '',[m
[32m+[m[32m    'prefix'          => '',[m
     // 数据库调试模式[m
[31m-    'debug'          => true,[m
[32m+[m[32m    'debug'           => true,[m
     // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)[m
[31m-    'deploy'         => 0,[m
[32m+[m[32m    'deploy'          => 0,[m
     // 数据库读写是否分离 主从式有效[m
[31m-    'rw_separate'    => false,[m
[32m+[m[32m    'rw_separate'     => false,[m
     // 读写分离后 主服务器数量[m
[31m-    'master_num'     => 1,[m
[32m+[m[32m    'master_num'      => 1,[m
     // 指定从服务器序号[m
[31m-    'slave_no'       => '',[m
[32m+[m[32m    'slave_no'        => '',[m
     // 是否严格检查字段是否存在[m
[31m-    'fields_strict'  => true,[m
[31m-    // 数据集返回类型 array 数组 collection Collection对象[m
[31m-    'resultset_type' => 'array',[m
[31m-    // 是否自动写入时间戳字段[m
[31m-    'auto_timestamp' => false,[m
[32m+[m[32m    'fields_strict'   => true,[m
[32m+[m[32m    // 数据集返回类型[m
[32m+[m[32m    'resultset_type'  => 'array',[m
[32m+[m[32m    // 自动写入时间戳字段[m
[32m+[m[32m    'auto_timestamp'  => false,[m
[32m+[m[32m    // 时间字段取出后的默认时间格式[m
[32m+[m[32m    'datetime_format' => 'Y-m-d H:i:s',[m
     // 是否需要进行SQL性能分析[m
[31m-    'sql_explain'    => false,[m
[32m+[m[32m    'sql_explain'     => false,[m
[32m+[m[32m    // Builder类[m
[32m+[m[32m    'builder'         => '',[m
[32m+[m[32m    // Query类[m
[32m+[m[32m    'query'           => '\\think\\db\\Query',[m
 ];[m

[33mcommit 25bc5f6871e960bcc660cdcd8af772dff8d221d2[m
Merge: 1793302 f1f4fcd
Author: ThinkPHP <thinkphp@qq.com>
Date:   Mon Dec 26 13:32:09 2016 +0800

    Merge pull request #594 from top-think/analysis-qyRDeN
    
    Apply fixes from StyleCI

[33mcommit f1f4fcd77cb5e81e222cb85b42f5038811bca75b[m
Author: ThinkPHP <thinkphp@qq.com>
Date:   Mon Dec 26 05:31:17 2016 +0000

    Apply fixes from StyleCI

[1mdiff --git a/application/command.php b/application/command.php[m
[1mindex 3f91003..826bb2b 100644[m
[1m--- a/application/command.php[m
[1m+++ b/application/command.php[m
[36m@@ -9,4 +9,4 @@[m
 // | Author: yunwuxin <448901948@qq.com>[m
 // +----------------------------------------------------------------------[m
 [m
[31m-return [];[m
\ No newline at end of file[m
[32m+[m[32mreturn [];[m

[33mcommit 179330255bc1816c181a484ad01a2d8c9f34b07b[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Sun Dec 25 16:20:32 2016 +0800

    调整 CI 包安装

[1mdiff --git a/.travis.yml b/.travis.yml[m
[1mindex dda564c..36f7b6f 100644[m
[1m--- a/.travis.yml[m
[1m+++ b/.travis.yml[m
[36m@@ -20,13 +20,12 @@[m [minstall:[m
   - composer require --update-no-dev --no-interaction "topthink/think-migration:^1.0"[m
   - composer require --update-no-dev --no-interaction "topthink/think-captcha:^1.0"[m
   - composer require --update-no-dev --no-interaction "topthink/think-mongo:^1.0"[m
[31m-  - composer require --update-no-dev --no-interaction "topthink/think-testing:^1.0"[m
   - composer require --update-no-dev --no-interaction "topthink/think-worker:^1.0"[m
   - composer require --update-no-dev --no-interaction "topthink/think-helper:^1.0"[m
   - composer require --update-no-dev --no-interaction "topthink/think-queue:^1.0"[m
   - composer require --update-no-dev --no-interaction "topthink/think-angular:^1.0"[m
[31m-  - zip -r --exclude='*.git*' --exclude='*.zip' --exclude='*.travis.yml' ThinkPHP_Full.zip .[m
   - composer require --dev --update-no-dev --no-interaction "topthink/think-testing:^1.0"[m
[32m+[m[32m  - zip -r --exclude='*.git*' --exclude='*.zip' --exclude='*.travis.yml' ThinkPHP_Full.zip .[m
 [m
 script:[m
   - php think unit[m

[33mcommit b64bf07aebbd18cdc8236cadeb706ee93c2a8b53[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Sun Dec 25 16:13:28 2016 +0800

    CI 自动打包

[1mdiff --git a/.travis.yml b/.travis.yml[m
[1mnew file mode 100644[m
[1mindex 0000000..dda564c[m
[1m--- /dev/null[m
[1m+++ b/.travis.yml[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32msudo: false[m
[32m+[m
[32m+[m[32mlanguage: php[m
[32m+[m
[32m+[m[32mbranches:[m
[32m+[m[32m  only:[m
[32m+[m[32m    - stable[m
[32m+[m
[32m+[m[32mcache:[m
[32m+[m[32m  directories:[m
[32m+[m[32m    - $HOME/.composer/cache[m
[32m+[m
[32m+[m[32mbefore_install:[m
[32m+[m[32m  - composer self-update[m
[32m+[m
[32m+[m[32minstall:[m
[32m+[m[32m  - composer install --no-dev --no-interaction --ignore-platform-reqs[m
[32m+[m[32m  - zip -r --exclude='*.git*' --exclude='*.zip' --exclude='*.travis.yml' ThinkPHP_Core.zip .[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-image:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-migration:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-captcha:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-mongo:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-testing:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-worker:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-helper:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-queue:^1.0"[m
[32m+[m[32m  - composer require --update-no-dev --no-interaction "topthink/think-angular:^1.0"[m
[32m+[m[32m  - zip -r --exclude='*.git*' --exclude='*.zip' --exclude='*.travis.yml' ThinkPHP_Full.zip .[m
[32m+[m[32m  - composer require --dev --update-no-dev --no-interaction "topthink/think-testing:^1.0"[m
[32m+[m
[32m+[m[32mscript:[m
[32m+[m[32m  - php think unit[m
[32m+[m
[32m+[m[32mdeploy:[m
[32m+[m[32m  provider: releases[m
[32m+[m[32m  api_key:[m
[32m+[m[32m    secure: TSF6bnl2JYN72UQOORAJYL+CqIryP2gHVKt6grfveQ7d9rleAEoxlq6PWxbvTI4jZ5nrPpUcBUpWIJHNgVcs+bzLFtyh5THaLqm39uCgBbrW7M8rI26L8sBh/6nsdtGgdeQrO/cLu31QoTzbwuz1WfAVoCdCkOSZeXyT/CclH99qV6RYyQYqaD2wpRjrhA5O4fSsEkiPVuk0GaOogFlrQHx+C+lHnf6pa1KxEoN1A0UxxVfGX6K4y5g4WQDO5zT4bLeubkWOXK0G51XSvACDOZVIyLdjApaOFTwamPcD3S1tfvuxRWWvsCD5ljFvb2kSmx5BIBNwN80MzuBmrGIC27XLGOxyMerwKxB6DskNUO9PflKHDPI61DRq0FTy1fv70SFMSiAtUv9aJRT41NQh9iJJ0vC8dl+xcxrWIjU1GG6+l/ZcRqVx9V1VuGQsLKndGhja7SQ+X1slHl76fRq223sMOql7MFCd0vvvxVQ2V39CcFKao/LB1aPH3VhODDEyxwx6aXoTznvC/QPepgWsHOWQzKj9ftsgDbsNiyFlXL4cu8DWUty6rQy8zT2b4O8b1xjcwSUCsy+auEjBamzQkMJFNlZAIUrukL/NbUhQU37TAbwsFyz7X0E/u/VMle/nBCNAzgkMwAUjiHM6FqrKKBRWFbPrSIixjfjkCnrMEPw=[m
[32m+[m[32m  file:[m
[32m+[m[32m    - ThinkPHP_Core.zip[m
[32m+[m[32m    - ThinkPHP_Full.zip[m
[32m+[m[32m  skip_cleanup: true[m
[32m+[m[32m  on:[m
[32m+[m[32m    tags: true[m

[33mcommit d2a01fa32cef7cf0709721675854aa6d4b9cd6eb[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Nov 11 11:57:32 2016 +0800

    配置更新

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex a8e9475..21c0531 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -106,6 +106,14 @@[m [mreturn [[m
     'url_controller_layer'   => 'controller',[m
     // 表单请求类型伪装变量[m
     'var_method'             => '_method',[m
[32m+[m[32m    // 表单ajax伪装变量[m
[32m+[m[32m    'var_ajax'               => '_ajax',[m
[32m+[m[32m    // 表单pjax伪装变量[m
[32m+[m[32m    'var_pjax'               => '_pjax',[m
[32m+[m[32m    // 是否开启请求缓存 true自动缓存 支持设置请求缓存规则[m
[32m+[m[32m    'request_cache'          => false,[m
[32m+[m[32m    // 请求缓存有效期[m
[32m+[m[32m    'request_cache_expire'   => null,[m
 [m
     // +----------------------------------------------------------------------[m
     // | 模板设置[m

[33mcommit 54372d68a10a8a60f48ac538a478a2456f28ad01[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Oct 24 07:11:37 2016 +0800

    配置调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 6314029..a8e9475 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -90,6 +90,8 @@[m [mreturn [[m
     'url_param_type'         => 0,[m
     // 是否开启路由[m
     'url_route_on'           => true,[m
[32m+[m[32m    // 路由使用完整匹配[m
[32m+[m[32m    'route_complete_match'   => false,[m
     // 路由配置文件（支持配置多个）[m
     'route_config_file'      => ['route'],[m
     // 是否强制使用路由[m

[33mcommit ddc43412a33a0c6c1d6ab0a780071bb565834f62[m
Merge: 6c1bcdc 2eb65c0
Author: ThinkPHP <thinkphp@qq.com>
Date:   Sat Oct 22 08:10:28 2016 +0800

    Merge pull request #541 from xiasf/patch-1
    
    添加：忽略框架目录

[33mcommit 2eb65c0ecc5fe0bf516a4d96af7ac92b9d8a973a[m
Author: sf <811800545@qq.com>
Date:   Wed Oct 19 21:06:54 2016 +0800

    添加：忽略框架目录
    
    既然框架与应用仓库独立开来，那么应用仓库还是忽略框架目录比较好

[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex ce2d3bf..7846e89 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -1,3 +1,4 @@[m
 .idea[m
 composer.lock[m
 *.log[m
[32m+[m[32mthinkphp[m

[33mcommit 6c1bcdce5169fe4847c36d6b05725a6c7b9a995a[m
Author: thinkphp <thinkphp@qq.com>
Date:   Wed Sep 28 13:48:23 2016 +0800

    配置更新

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 4fa1510..6314029 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -28,8 +28,6 @@[m [mreturn [[m
     'auto_bind_module'       => false,[m
     // 注册的根命名空间[m
     'root_namespace'         => [],[m
[31m-    // 扩展配置文件[m
[31m-    'extra_config_list'      => ['database', 'validate'],[m
     // 扩展函数文件[m
     'extra_file_list'        => [THINK_PATH . 'helper' . EXT],[m
     // 默认输出类型[m

[33mcommit 8f46b48a4bd78126d89549bc5cc377573cdad539[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Sep 23 19:37:52 2016 +0800

    改进命令行入口文件

[1mdiff --git a/think b/think[m
[1mindex 0169111..8afa938 100644[m
[1m--- a/think[m
[1m+++ b/think[m
[36m@@ -11,7 +11,7 @@[m
 // +----------------------------------------------------------------------[m
 [m
 // 定义项目路径[m
[31m-define('APP_PATH', './application/');[m
[32m+[m[32mdefine('APP_PATH', __DIR__ . '/application/');[m
 [m
 // 加载框架引导文件[m
 require './thinkphp/console.php';[m
\ No newline at end of file[m

[33mcommit 5bcf9fae023753e7211d8538d276abc89aa3094d[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Fri Sep 23 16:53:15 2016 +0800

    Replace shields badges with pugx badges

[1mdiff --git a/README.md b/README.md[m
[1mindex 9493764..84c8fbc 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,9 +1,10 @@[m
 ThinkPHP 5.0[m
 ===============[m
 [m
[31m-[![GitHub release](https://img.shields.io/github/release/top-think/think.svg?maxAge=2592000)](https://github.com/top-think/think/releases/latest)[m
[31m-[![Packagist](https://img.shields.io/packagist/v/topthink/think.svg?maxAge=2592000)](https://packagist.org/packages/topthink/think)[m
[31m-[![Packagist](https://img.shields.io/packagist/dt/topthink/think.svg?maxAge=2592000)](https://packagist.org/packages/topthink/think)[m
[32m+[m[32m[![Total Downloads](https://poser.pugx.org/topthink/think/downloads)](https://packagist.org/packages/topthink/think)[m
[32m+[m[32m[![Latest Stable Version](https://poser.pugx.org/topthink/think/v/stable)](https://packagist.org/packages/topthink/think)[m
[32m+[m[32m[![Latest Unstable Version](https://poser.pugx.org/topthink/think/v/unstable)](https://packagist.org/packages/topthink/think)[m
[32m+[m[32m[![License](https://poser.pugx.org/topthink/think/license)](https://packagist.org/packages/topthink/think)[m
 [m
 ThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PHP版本要求提升到5.4，对已有的CBD模式做了更深的强化，优化核心，减少依赖，基于全新的架构思想和命名空间实现，是ThinkPHP突破原有框架思路的颠覆之作，其主要特性包括：[m
 [m

[33mcommit 35f7fe734394eb3773b6e1fa00c4e741a927d6e4[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sun Sep 18 10:52:50 2016 +0800

    readme文件修改

[1mdiff --git a/README.md b/README.md[m
[1mindex a769bbf..9493764 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -35,13 +35,8 @@[m [mThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PH[m
 [m
 ~~~[m
 www  WEB部署目录（或者子目录）[m
[31m-├─composer.json         composer定义文件[m
[31m-├─README.md             README文件[m
[31m-├─LICENSE.txt           授权说明文件[m
[31m-├─think                 命令行入口文件[m
 ├─application           应用目录[m
 │  ├─common             公共模块目录（可以更改）[m
[31m-│  ├─runtime            应用的运行时目录（可写，可定制）[m
 │  ├─module_name        模块目录[m
 │  │  ├─config.php      模块配置文件[m
 │  │  ├─common.php      模块函数文件[m
[36m@@ -50,13 +45,16 @@[m [mwww  WEB部署目录（或者子目录）[m
 │  │  ├─view            视图目录[m
 │  │  └─ ...            更多类库目录[m
 │  │[m
[32m+[m[32m│  ├─command.php        命令行工具配置文件[m
 │  ├─common.php         公共函数文件[m
 │  ├─config.php         公共配置文件[m
 │  ├─route.php          路由配置文件[m
[32m+[m[32m│  ├─tags.php           应用行为扩展定义文件[m
 │  └─database.php       数据库配置文件[m
 │[m
 ├─public                WEB目录（对外访问目录）[m
 │  ├─index.php          入口文件[m
[32m+[m[32m│  ├─router.php         快速测试文件[m
 │  └─.htaccess          用于apache的重写[m
 │[m
 ├─thinkphp              框架系统目录[m
[36m@@ -65,9 +63,7 @@[m [mwww  WEB部署目录（或者子目录）[m
 │  │  ├─think           Think类库包目录[m
 │  │  └─traits          系统Trait目录[m
 │  │[m
[31m-│  ├─mode               应用模式目录[m
 │  ├─tpl                系统模板目录[m
[31m-│  ├─tests              单元测试文件目录[m
 │  ├─base.php           基础定义文件[m
 │  ├─console.php        控制台入口文件[m
 │  ├─convention.php     框架惯例配置文件[m
[36m@@ -76,7 +72,13 @@[m [mwww  WEB部署目录（或者子目录）[m
 │  └─start.php          框架入口文件[m
 │[m
 ├─extend                扩展类库目录[m
[32m+[m[32m├─runtime               应用的运行时目录（可写，可定制）[m
 ├─vendor                第三方类库目录（Composer依赖库）[m
[32m+[m[32m├─build.php             自动生成定义文件（参考）[m
[32m+[m[32m├─composer.json         composer 定义文件[m
[32m+[m[32m├─LICENSE.txt           授权说明文件[m
[32m+[m[32m├─README.md             README 文件[m
[32m+[m[32m├─think                 命令行入口文件[m
 ~~~[m
 [m
 > router.php用于php自带webserver支持，可用于快速测试[m

[33mcommit f42f42c53e6b29b256cdddf4911378acea773979[m
Author: Chino Chang <me@7in0.me>
Date:   Fri Sep 16 13:13:52 2016 +0800

    Use stable version of ThinkPHP 5.0

[1mdiff --git a/composer.json b/composer.json[m
[1mindex 2ca919f..c4de66b 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -17,12 +17,11 @@[m
     ],[m
     "require": {[m
         "php": ">=5.4.0",[m
[31m-        "topthink/framework": "*"[m
[32m+[m[32m        "topthink/framework": "^5.0"[m
     },[m
     "extra": {[m
         "think-path": "thinkphp"[m
     },[m
[31m-    "minimum-stability": "dev",[m
     "config": {[m
         "preferred-install": "dist"[m
     }[m

[33mcommit e47aab0c32977df237006a7d723c0270adfdd977[m
Author: Chino Chang <me@7in0.me>
Date:   Thu Sep 15 19:52:54 2016 +0800

    Remove GitHub download metadata badges

[1mdiff --git a/README.md b/README.md[m
[1mindex c707474..a769bbf 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,9 +1,7 @@[m
 ThinkPHP 5.0[m
 ===============[m
 [m
[31m-[![Github All Releases](https://img.shields.io/github/downloads/top-think/think/total.svg?maxAge=2592000)](https://github.com/top-think/think/releases)[m
 [![GitHub release](https://img.shields.io/github/release/top-think/think.svg?maxAge=2592000)](https://github.com/top-think/think/releases/latest)[m
[31m-[![Github Releases](https://img.shields.io/github/downloads/top-think/think/latest/total.svg?maxAge=2592000)](https://github.com/top-think/think/releases/latest)[m
 [![Packagist](https://img.shields.io/packagist/v/topthink/think.svg?maxAge=2592000)](https://packagist.org/packages/topthink/think)[m
 [![Packagist](https://img.shields.io/packagist/dt/topthink/think.svg?maxAge=2592000)](https://packagist.org/packages/topthink/think)[m
 [m

[33mcommit e7ab1a6901d13c74f0e61162ab96762597731ff4[m
Merge: 14ec011 278065d
Author: Chino Chang <me@7in0.me>
Date:   Thu Sep 15 19:37:05 2016 +0800

    Merge pull request #524 from top-think/rm-contributing-md
    
    指引开发者转向核心框架包

[33mcommit 14ec011219d46da05dd56fa2083c0eee622e70d2[m
Merge: cac2401 8c359ee
Author: Chino Chang <me@7in0.me>
Date:   Thu Sep 15 19:36:55 2016 +0800

    Merge pull request #525 from top-think/update-metadata-badges
    
    Update metadata badges

[33mcommit 8c359ee26f6be8196628b38c6e6ed0a6db615a97[m
Author: Chino Chang <me@7in0.me>
Date:   Thu Sep 15 19:36:34 2016 +0800

    Update metadata badges

[1mdiff --git a/README.md b/README.md[m
[1mindex 4075add..99c0baf 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,11 +1,11 @@[m
 ThinkPHP 5.0[m
 ===============[m
 [m
[31m-[![Downloads](https://img.shields.io/github/downloads/top-think/think/total.svg)](https://github.com/top-think/think/releases)[m
[31m-[![Releases](https://img.shields.io/github/release/top-think/think.svg)](https://github.com/top-think/think/releases/latest)[m
[31m-[![Releases Downloads](https://img.shields.io/github/downloads/top-think/think/latest/total.svg)](https://github.com/top-think/think/releases/latest)[m
[31m-[![Packagist Status](https://img.shields.io/packagist/v/top-think/think.svg)](https://packagist.org/packages/topthink/think)[m
[31m-[![Packagist Downloads](https://img.shields.io/packagist/dt/top-think/think.svg)](https://packagist.org/packages/topthink/think)[m
[32m+[m[32m[![Github All Releases](https://img.shields.io/github/downloads/top-think/think/total.svg?maxAge=2592000)](https://github.com/top-think/think/releases)[m
[32m+[m[32m[![GitHub release](https://img.shields.io/github/release/top-think/think.svg?maxAge=2592000)](https://github.com/top-think/think/releases/latest)[m
[32m+[m[32m[![Github Releases](https://img.shields.io/github/downloads/top-think/think/latest/total.svg?maxAge=2592000)](https://github.com/top-think/think/releases/latest)[m
[32m+[m[32m[![Packagist](https://img.shields.io/packagist/v/topthink/think.svg?maxAge=2592000)](https://packagist.org/packages/topthink/think)[m
[32m+[m[32m[![Packagist](https://img.shields.io/packagist/dt/topthink/think.svg?maxAge=2592000)](https://packagist.org/packages/topthink/think)[m
 [m
 ThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PHP版本要求提升到5.4，对已有的CBD模式做了更深的强化，优化核心，减少依赖，基于全新的架构思想和命名空间实现，是ThinkPHP突破原有框架思路的颠覆之作，其主要特性包括：[m
 [m

[33mcommit 278065d11c18e7e39e0b208eac959dee0165c3bd[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Thu Sep 15 15:35:12 2016 +0800

    指引开发者转向核心框架包

[1mdiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md[m
[1mdeleted file mode 100644[m
[1mindex 0dee600..0000000[m
[1m--- a/CONTRIBUTING.md[m
[1m+++ /dev/null[m
[36m@@ -1,115 +0,0 @@[m
[31m-如何贡献我的源代码[m
[31m-===[m
[31m-[m
[31m-此文档介绍了 ThinkPHP 团队的组成以及运转机制，您提交的代码将给 ThinkPHP 项目带来什么好处，以及如何才能加入我们的行列。[m
[31m-[m
[31m-## 通过 Github 贡献代码[m
[31m-[m
[31m-ThinkPHP 目前使用 Git 来控制程序版本，如果你想为 ThinkPHP 贡献源代码，请先大致了解 Git 的使用方法。我们目前把项目托管在 GitHub 上，任何 GitHub 用户都可以向我们贡献代码。[m
[31m-[m
[31m-参与的方式很简单，`fork`一份 ThinkPHP 的代码到你的仓库中，修改后提交，并向我们发起`pull request`申请，我们会及时对代码进行审查并处理你的申请并。审查通过后，你的代码将被`merge`进我们的仓库中，这样你就会自动出现在贡献者名单里了，非常方便。[m
[31m-[m
[31m-我们希望你贡献的代码符合：[m
[31m-[m
[31m-* ThinkPHP 的编码规范[m
[31m-* 适当的注释，能让其他人读懂[m
[31m-* 遵循 Apache2 开源协议[m
[31m-[m
[31m-**如果想要了解更多细节或有任何疑问，请继续阅读下面的内容**[m
[31m-[m
[31m-### 注意事项[m
[31m-[m
[31m-* 本项目代码格式化标准选用 [**PSR-2**](http://www.kancloud.cn/thinkphp/php-fig-psr/3141)；[m
[31m-* 类名和类文件名遵循 [**PSR-4**](http://www.kancloud.cn/thinkphp/php-fig-psr/3144)；[m
[31m-* 对于 Issues 的处理，请使用诸如 `fix #xxx(Issue ID)` 的 commit title 直接关闭 issue。[m
[31m-* 系统会自动在 PHP 5.4 5.5 5.6 7.0 和 HHVM 上测试修改，其中 HHVM 下的测试容许报错，请确保你的修改符合 PHP 5.4 ~ 5.6 和 PHP 7.0 的语法规范；[m
[31m-* 管理员不会合并造成 CI faild 的修改，若出现 CI faild 请检查自己的源代码或修改相应的[单元测试文件](thinkphp/tests)；[m
[31m-[m
[31m-## GitHub Issue[m
[31m-[m
[31m-GitHub 提供了 Issue 功能，该功能可以用于：[m
[31m-[m
[31m-* 提出 bug[m
[31m-* 提出功能改进[m
[31m-* 反馈使用体验[m
[31m-[m
[31m-该功能不应该用于：[m
[31m-[m
[31m- * 提出修改意见（涉及代码署名和修订追溯问题）[m
[31m- * 不友善的言论[m
[31m-[m
[31m-## 快速修改[m
[31m-[m
[31m-**GitHub 提供了快速编辑文件的功能**[m
[31m-[m
[31m-1. 登录 GitHub 帐号；[m
[31m-2. 浏览项目文件，找到要进行修改的文件；[m
[31m-3. 点击右上角铅笔图标进行修改；[m
[31m-4. 填写 `Commit changes` 相关内容（Title 必填）；[m
[31m-5. 提交修改，等待 CI 验证和管理员合并。[m
[31m-[m
[31m-**若您需要一次提交大量修改，请继续阅读下面的内容**[m
[31m-[m
[31m-## 完整流程[m
[31m-[m
[31m-1. `fork`本项目；[m
[31m-2. 克隆(`clone`)你 `fork` 的项目到本地；[m
[31m-3. 新建分支(`branch`)并检出(`checkout`)新分支；[m
[31m-4. 添加本项目到你的本地 git 仓库作为上游(`upstream`)；[m
[31m-5. 进行修改，若你的修改包含方法或函数的增减，请记得修改[单元测试文件](thinkphp/tests)；[m
[31m-6. 变基（衍合 `rebase`）你的分支到上游 master 分支；[m
[31m-7. `push` 你的本地仓库到 GitHub；[m
[31m-8. 提交 ``pull request`s`；[m
[31m-9. 等待 CI 验证（若不通过则重复 5~7，GitHub 会自动更新你的 ``pull request`s`）；[m
[31m-10. 等待管理员处理，并及时 `rebase` 你的分支到上游 master 分支（若上游 master 分支有修改）。[m
[31m-[m
[31m-*若有必要，可以 `git push -f` 强行推送 rebase 后的分支到自己的 GitHub `fork`*[m
[31m-[m
[31m-### 注意事项[m
[31m-[m
[31m-* 若对上述流程有任何不清楚的地方，请查阅 GIT 教程，如 [这个](http://backlogtool.com/git-guide/cn/)；[m
[31m-* 对于代码**不同方面**的修改，请在自己 `fork` 的项目中**创建不同的分支**（原因参见`完整流程`第9条备注部分）；[m
[31m-* 变基及交互式变基操作参见 [Git 交互式变基](http://pakchoi.me/2015/03/17/git-interactive-rebase/)[m
[31m-[m
[31m-## 推荐资源[m
[31m-[m
[31m-### 开发环境[m
[31m-[m
[31m-* XAMPP for Windows 5.5.x[m
[31m-* WampServer (for Windows)[m
[31m-* upupw Apache PHP5.4 ( for Windows)[m
[31m-[m
[31m-或自行安装[m
[31m-[m
[31m-- Apache / Nginx[m
[31m-- PHP 5.4 ~ 5.6[m
[31m-- MySQL / MariaDB[m
[31m-[m
[31m-*Windows 用户推荐添加 PHP bin 目录到 PATH，方便使用 composer*[m
[31m-[m
[31m-*Linux 用户自行配置环境， Mac 用户推荐使用内嵌 Apache 配合 Homebrew 安装 PHP 和 MariaDB*[m
[31m-[m
[31m-### 编辑器[m
[31m-[m
[31m-Sublime Text 3 + phpfmt 插件[m
[31m-[m
[31m-phpfmt 插件参数[m
[31m-[m
[31m-```json[m
[31m-{[m
[31m-    "enable_auto_align": true,[m
[31m-    "indent_with_space": true,[m
[31m-    "psr1_naming": true,[m
[31m-    "psr2": true,[m
[31m-    "version": 1[m
[31m-}[m
[31m-```[m
[31m-[m
[31m-或其他 编辑器 / IDE 配合 PSR2 自动格式化工具[m
[31m-[m
[31m-### Git GUI[m
[31m-[m
[31m-* SourceTree[m
[31m-* GitHub Desktop[m
[31m-[m
[31m-或其他 Git 图形界面客户端[m
[1mdiff --git a/README.md b/README.md[m
[1mindex 4075add..45e7142 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -111,9 +111,7 @@[m [mwww  WEB部署目录（或者子目录）[m
 *   数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 `think_user` 表和 `user_name`字段，不建议使用驼峰和中文作为数据表字段命名。[m
 [m
 ## 参与开发[m
[31m-注册并登录 Github 帐号， fork 本项目并进行改动。[m
[31m-[m
[31m-更多细节参阅 [CONTRIBUTING.md](CONTRIBUTING.md)[m
[32m+[m[32m请参阅 [ThinkPHP5 核心框架包](https://github.com/top-think/framework)。[m
 [m
 ## 版权信息[m
 [m

[33mcommit cac240177acf03cdcd413989a2c2d120cf803e36[m
Author: thinkphp <thinkphp@qq.com>
Date:   Thu Sep 15 12:58:49 2016 +0800

    注释调整

[1mdiff --git a/README.md b/README.md[m
[1mindex d361146..4075add 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,4 +1,4 @@[m
[31m-ThinkPHP 5.0 RC4[m
[32m+[m[32mThinkPHP 5.0[m
 ===============[m
 [m
 [![Downloads](https://img.shields.io/github/downloads/top-think/think/total.svg)](https://github.com/top-think/think/releases)[m
[36m@@ -31,12 +31,6 @@[m [mThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PH[m
 [m
 详细开发文档参考 [ThinkPHP5完全开发手册](http://www.kancloud.cn/manual/thinkphp5)[m
 [m
[31m-## 使用 Composer 安装 ThinkPHP5[m
[31m-~~~[m
[31m-composer create-project topthink/think tp5 dev-master --prefer-dist[m
[31m-~~~[m
[31m-> 因为目前 ThinkPHP 5 正处于高速发展阶段，所以目前只能通过 dev-master 分支来初始化项目[m
[31m-[m
 ## 目录结构[m
 [m
 初始的目录结构如下：[m
[1mdiff --git a/application/command.php b/application/command.php[m
[1mindex f93890c..3f91003 100644[m
[1m--- a/application/command.php[m
[1m+++ b/application/command.php[m
[36m@@ -2,7 +2,7 @@[m
 // +----------------------------------------------------------------------[m
 // | ThinkPHP [ WE CAN DO IT JUST THINK ][m
 // +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.[m
 // +----------------------------------------------------------------------[m
 // | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
 // +----------------------------------------------------------------------[m
[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 1473e24..6b7ec30 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -2,7 +2,7 @@[m
 // +----------------------------------------------------------------------[m
 // | ThinkPHP [ WE CAN DO IT JUST THINK ][m
 // +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.[m
 // +----------------------------------------------------------------------[m
 // | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
 // +----------------------------------------------------------------------[m
[1mdiff --git a/think b/think[m
[1mindex 5de77e6..0169111 100644[m
[1m--- a/think[m
[1m+++ b/think[m
[36m@@ -3,7 +3,7 @@[m
 // +----------------------------------------------------------------------[m
 // | ThinkPHP [ WE CAN DO IT JUST THINK ][m
 // +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.[m
 // +----------------------------------------------------------------------[m
 // | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
 // +----------------------------------------------------------------------[m

[33mcommit 2f04858a89ef8f1b1241d72ac2ba12a76020dfb9[m
Merge: 1d36ae2 78afa42
Author: ThinkPHP <thinkphp@qq.com>
Date:   Wed Sep 7 10:43:19 2016 +0800

    Merge pull request #519 from lilwil/master
    
    一处注释

[33mcommit 78afa42e12252eb5825727048f0bf5238d6449d9[m
Author: lilwil <lilwil@163.com>
Date:   Wed Sep 7 08:55:59 2016 +0800

    一处注释

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 767b325..4fa1510 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -98,7 +98,7 @@[m [mreturn [[m
     'url_route_must'         => false,[m
     // 域名部署[m
     'url_domain_deploy'      => false,[m
[31m-    // 域名根，如.thinkphp.cn[m
[32m+[m[32m    // 域名根，如thinkphp.cn[m
     'url_domain_root'        => '',[m
     // 是否自动转换URL中的控制器和操作名[m
     'url_convert'            => true,[m

[33mcommit 1d36ae23e8c05962ecf9cbb2924624f9d72038c6[m
Author: thinkphp <thinkphp@qq.com>
Date:   Thu Sep 1 11:37:40 2016 +0800

    添加应用默认行为扩展定义文件

[1mdiff --git a/application/tags.php b/application/tags.php[m
[1mnew file mode 100644[m
[1mindex 0000000..e213e0a[m
[1m--- /dev/null[m
[1m+++ b/application/tags.php[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: liu21st <liu21st@gmail.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m// 应用行为扩展定义文件[m
[32m+[m[32mreturn [[m
[32m+[m[32m    // 应用初始化[m
[32m+[m[32m    'app_init'     => [],[m
[32m+[m[32m    // 应用开始[m
[32m+[m[32m    'app_begin'    => [],[m
[32m+[m[32m    // 模块初始化[m
[32m+[m[32m    'module_init'  => [],[m
[32m+[m[32m    // 操作开始执行[m
[32m+[m[32m    'action_begin' => [],[m
[32m+[m[32m    // 视图内容过滤[m
[32m+[m[32m    'view_filter'  => [],[m
[32m+[m[32m    // 日志写入[m
[32m+[m[32m    'log_write'    => [],[m
[32m+[m[32m    // 应用结束[m
[32m+[m[32m    'app_end'      => [],[m
[32m+[m[32m];[m

[33mcommit e398b93e0780e0404f9fdc98ba07fb3683191e32[m
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Aug 23 15:25:52 2016 +0800

    配置文件更新

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex bb858b2..767b325 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -24,6 +24,8 @@[m [mreturn [[m
     'app_status'             => '',[m
     // 是否支持多模块[m
     'app_multi_module'       => true,[m
[32m+[m[32m    // 入口自动绑定模块[m
[32m+[m[32m    'auto_bind_module'       => false,[m
     // 注册的根命名空间[m
     'root_namespace'         => [],[m
     // 扩展配置文件[m

[33mcommit 9d848a81350efbcc975ca54ac678402469a8e46b[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Aug 8 10:20:11 2016 +0800

    更新配置文件

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex ee339a0..bb858b2 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -46,7 +46,9 @@[m [mreturn [[m
     'default_filter'         => '',[m
     // 默认语言[m
     'default_lang'           => 'zh-cn',[m
[31m-    // 是否启用控制器类后缀[m
[32m+[m[32m    // 应用类库后缀[m
[32m+[m[32m    'class_suffix'           => false,[m
[32m+[m[32m    // 控制器类后缀[m
     'controller_suffix'      => false,[m
 [m
     // +----------------------------------------------------------------------[m
[36m@@ -88,6 +90,8 @@[m [mreturn [[m
     'url_param_type'         => 0,[m
     // 是否开启路由[m
     'url_route_on'           => true,[m
[32m+[m[32m    // 路由配置文件（支持配置多个）[m
[32m+[m[32m    'route_config_file'      => ['route'],[m
     // 是否强制使用路由[m
     'url_route_must'         => false,[m
     // 域名部署[m
[36m@@ -149,18 +153,19 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file socket[m
[31m-        'type' => 'File',[m
[32m+[m[32m        // 日志记录方式，内置 file socket 支持扩展[m
[32m+[m[32m        'type'  => 'File',[m
         // 日志保存目录[m
[31m-        'path' => LOG_PATH,[m
[32m+[m[32m        'path'  => LOG_PATH,[m
[32m+[m[32m        // 日志记录级别[m
[32m+[m[32m        'level' => [],[m
     ],[m
 [m
     // +----------------------------------------------------------------------[m
[31m-    // | Trace设置[m
[32m+[m[32m    // | Trace设置 开启 app_trace 后 有效[m
     // +----------------------------------------------------------------------[m
[31m-[m
     'trace'                  => [[m
[31m-        //支持Html Console[m
[32m+[m[32m        // 内置Html Console 支持扩展[m
         'type' => 'Html',[m
     ],[m
 [m

[33mcommit 56aa711df70de87fb5739f02a276918cd35bfc4b[m
Author: thinkphp <thinkphp@qq.com>
Date:   Wed Aug 3 14:36:40 2016 +0800

    配置修改

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex b1b51d8..ee339a0 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -27,7 +27,7 @@[m [mreturn [[m
     // 注册的根命名空间[m
     'root_namespace'         => [],[m
     // 扩展配置文件[m
[31m-    'extra_config_list'      => ['database', 'route', 'validate'],[m
[32m+[m[32m    'extra_config_list'      => ['database', 'validate'],[m
     // 扩展函数文件[m
     'extra_file_list'        => [THINK_PATH . 'helper' . EXT],[m
     // 默认输出类型[m

[33mcommit db3e15066a0bc23d038e1b716b835bb4e9685c33[m
Author: yunwuxin <448901948@qq.com>
Date:   Fri Jul 29 16:28:12 2016 +0800

    示例也放入think-testing包内

[1mdiff --git a/phpunit.xml b/phpunit.xml[m
[1mdeleted file mode 100644[m
[1mindex 5a41bcf..0000000[m
[1m--- a/phpunit.xml[m
[1m+++ /dev/null[m
[36m@@ -1,21 +0,0 @@[m
[31m-<?xml version="1.0" encoding="UTF-8"?>[m
[31m-<phpunit backupGlobals="false"[m
[31m-         backupStaticAttributes="false"[m
[31m-         colors="true"[m
[31m-         convertErrorsToExceptions="true"[m
[31m-         convertNoticesToExceptions="true"[m
[31m-         convertWarningsToExceptions="true"[m
[31m-         processIsolation="false"[m
[31m-         stopOnFailure="false"[m
[31m-         syntaxCheck="false">[m
[31m-    <testsuites>[m
[31m-        <testsuite name="Application Test Suite">[m
[31m-            <directory>./tests/</directory>[m
[31m-        </testsuite>[m
[31m-    </testsuites>[m
[31m-    <filter>[m
[31m-        <whitelist>[m
[31m-            <directory suffix=".php">application/</directory>[m
[31m-        </whitelist>[m
[31m-    </filter>[m
[31m-</phpunit>[m
[1mdiff --git a/tests/ExampleTest.php b/tests/ExampleTest.php[m
[1mdeleted file mode 100644[m
[1mindex 0bd11d3..0000000[m
[1m--- a/tests/ExampleTest.php[m
[1m+++ /dev/null[m
[36m@@ -1,19 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK IT ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: yunwuxin <448901948@qq.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-class ExampleTest extends TestCase[m
[31m-{[m
[31m-[m
[31m-    public function testBasicExample()[m
[31m-    {[m
[31m-        $this->visit('/')->see('ThinkPHP');[m
[31m-    }[m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/tests/TestCase.php b/tests/TestCase.php[m
[1mdeleted file mode 100644[m
[1mindex ddc5d1e..0000000[m
[1m--- a/tests/TestCase.php[m
[1m+++ /dev/null[m
[36m@@ -1,15 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK IT ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: yunwuxin <448901948@qq.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-class TestCase extends \think\testing\TestCase[m
[31m-{[m
[31m-    protected $baseUrl = 'http://localhost';[m
[31m-}[m
\ No newline at end of file[m

[33mcommit 487b787a6c1c09475272adc4bfa1b56e5524c9a4[m
Author: yunwuxin <448901948@qq.com>
Date:   Fri Jul 29 16:00:26 2016 +0800

    增加单元测试示例

[1mdiff --git a/phpunit.xml b/phpunit.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..5a41bcf[m
[1m--- /dev/null[m
[1m+++ b/phpunit.xml[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<phpunit backupGlobals="false"[m
[32m+[m[32m         backupStaticAttributes="false"[m
[32m+[m[32m         colors="true"[m
[32m+[m[32m         convertErrorsToExceptions="true"[m
[32m+[m[32m         convertNoticesToExceptions="true"[m
[32m+[m[32m         convertWarningsToExceptions="true"[m
[32m+[m[32m         processIsolation="false"[m
[32m+[m[32m         stopOnFailure="false"[m
[32m+[m[32m         syntaxCheck="false">[m
[32m+[m[32m    <testsuites>[m
[32m+[m[32m        <testsuite name="Application Test Suite">[m
[32m+[m[32m            <directory>./tests/</directory>[m
[32m+[m[32m        </testsuite>[m
[32m+[m[32m    </testsuites>[m
[32m+[m[32m    <filter>[m
[32m+[m[32m        <whitelist>[m
[32m+[m[32m            <directory suffix=".php">application/</directory>[m
[32m+[m[32m        </whitelist>[m
[32m+[m[32m    </filter>[m
[32m+[m[32m</phpunit>[m
[1mdiff --git a/tests/ExampleTest.php b/tests/ExampleTest.php[m
[1mnew file mode 100644[m
[1mindex 0000000..0bd11d3[m
[1m--- /dev/null[m
[1m+++ b/tests/ExampleTest.php[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK IT ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: yunwuxin <448901948@qq.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mclass ExampleTest extends TestCase[m
[32m+[m[32m{[m
[32m+[m
[32m+[m[32m    public function testBasicExample()[m
[32m+[m[32m    {[m
[32m+[m[32m        $this->visit('/')->see('ThinkPHP');[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/tests/TestCase.php b/tests/TestCase.php[m
[1mnew file mode 100644[m
[1mindex 0000000..ddc5d1e[m
[1m--- /dev/null[m
[1m+++ b/tests/TestCase.php[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK IT ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: yunwuxin <448901948@qq.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mclass TestCase extends \think\testing\TestCase[m
[32m+[m[32m{[m
[32m+[m[32m    protected $baseUrl = 'http://localhost';[m
[32m+[m[32m}[m
\ No newline at end of file[m

[33mcommit 80a73894fd7bf60d2113210c73e650395726ef68[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Jul 18 16:42:34 2016 +0800

    build文件修改

[1mdiff --git a/build.php b/build.php[m
[1mindex 641ea49..b37d3ab 100644[m
[1m--- a/build.php[m
[1m+++ b/build.php[m
[36m@@ -10,8 +10,6 @@[m
 // +----------------------------------------------------------------------[m
 [m
 return [[m
[31m-    // 生成运行时目录[m
[31m-    '__dir__'  => ['runtime/cache', 'runtime/log', 'runtime/temp', 'runtime/template'],[m
     // 生成应用公共文件[m
     '__file__' => ['common.php', 'config.php', 'database.php'],[m
 [m

[33mcommit 0fc03fba86f2c51ae162fe837be451c76cdc6447[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Jul 18 11:29:44 2016 +0800

    配置文件调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 1abbe9a..b1b51d8 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -84,8 +84,6 @@[m [mreturn [[m
     'url_html_suffix'        => 'html',[m
     // URL普通方式参数 用于自动生成[m
     'url_common_param'       => false,[m
[31m-    //url禁止访问的后缀[m
[31m-    'url_deny_suffix'        => 'ico|png|gif|jpg',[m
     // URL参数方式 0 按名称成对解析 1 按顺序解析[m
     'url_param_type'         => 0,[m
     // 是否开启路由[m

[33mcommit 1c1a977fb97ff25cac459f452865329c8c9fc2af[m
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Jul 12 15:58:35 2016 +0800

    添加应用公共文件common.php

[1mdiff --git a/application/common.php b/application/common.php[m
[1mnew file mode 100644[m
[1mindex 0000000..55d22f2[m
[1m--- /dev/null[m
[1m+++ b/application/common.php[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: 流年 <liu21st@gmail.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m// 应用公共文件[m

[33mcommit be7e7b9a0146d3e28225e0b96413b8ad58c774c6[m
Merge: b989e79 c1fb611
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Jul 9 20:41:33 2016 +0800

    Merge branch 'master' of https://github.com/top-think/think

[33mcommit b989e7939a0eada556ca72c001d81f4fdf814996[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Jul 9 20:41:08 2016 +0800

    配置文件调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 99875c3..1abbe9a 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -47,7 +47,7 @@[m [mreturn [[m
     // 默认语言[m
     'default_lang'           => 'zh-cn',[m
     // 是否启用控制器类后缀[m
[31m-    'use_controller_suffix'  => false,[m
[32m+[m[32m    'controller_suffix'      => false,[m
 [m
     // +----------------------------------------------------------------------[m
     // | 模块设置[m
[36m@@ -151,7 +151,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file sae socket[m
[32m+[m[32m        // 日志记录方式，支持 file socket[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m

[33mcommit c1fb6110ad148825d6128636f50e86a168fcfe40[m
Author: thinkphp <thinkphp@qq.com>
Date:   Thu Jul 7 12:00:58 2016 +0800

    配置修改

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 99875c3..12845a3 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -151,7 +151,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file sae socket[m
[32m+[m[32m        // 日志记录方式，支持 file socket[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m

[33mcommit 81f63aa6b470dcf00e9cb277faff92698ffdcc65[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Jul 4 21:46:46 2016 +0800

    配置调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex f5deeaf..99875c3 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -151,7 +151,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file sae[m
[32m+[m[32m        // 日志记录方式，支持 file sae socket[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m
[36m@@ -162,7 +162,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'trace'                  => [[m
[31m-        //支持Html Console socket[m
[32m+[m[32m        //支持Html Console[m
         'type' => 'Html',[m
     ],[m
 [m

[33mcommit ab0da675f4df8ce70200f06f482288f365695fe6[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sun Jul 3 16:00:27 2016 +0800

    配置文件调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex eaedb55..f5deeaf 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -18,6 +18,8 @@[m [mreturn [[m
     'app_namespace'          => 'app',[m
     // 应用调试模式[m
     'app_debug'              => true,[m
[32m+[m[32m    // 应用Trace[m
[32m+[m[32m    'app_trace'              => false,[m
     // 应用模式状态[m
     'app_status'             => '',[m
     // 是否支持多模块[m
[36m@@ -102,7 +104,7 @@[m [mreturn [[m
     'var_method'             => '_method',[m
 [m
     // +----------------------------------------------------------------------[m
[31m-    // | 模板引擎设置[m
[32m+[m[32m    // | 模板设置[m
     // +----------------------------------------------------------------------[m
 [m
     'template'               => [[m
[36m@@ -141,6 +143,8 @@[m [mreturn [[m
     'error_message'          => '页面错误！请稍后再试～',[m
     // 显示错误信息[m
     'show_error_msg'         => false,[m
[32m+[m[32m    // 异常处理handle类 留空使用 \think\exception\Handle[m
[32m+[m[32m    'exception_handle'       => '',[m
 [m
     // +----------------------------------------------------------------------[m
     // | 日志设置[m
[36m@@ -156,8 +160,9 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
     // | Trace设置[m
     // +----------------------------------------------------------------------[m
[32m+[m
     'trace'                  => [[m
[31m-        //支持Html,Console 设为false则不显示[m
[32m+[m[32m        //支持Html Console socket[m
         'type' => 'Html',[m
     ],[m
 [m

[33mcommit abecf30cffc6199116e6ccc865d0ac6b41906590[m
Merge: 3af8758 3346c4b
Author: ThinkPHP <thinkphp@qq.com>
Date:   Sun Jul 3 10:19:01 2016 +0800

    Merge pull request #476 from lilwil/master
    
    更新配置

[33mcommit 3346c4b80f8c8e244a9706981f910f224cc1cf7b[m
Author: 刘伟 <lilwil@163.com>
Date:   Sun Jul 3 09:59:08 2016 +0800

    更新配置

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex a020ecb..eaedb55 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -147,7 +147,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file socket sae[m
[32m+[m[32m        // 日志记录方式，支持 file sae[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m
[1mdiff --git a/application/database.php b/application/database.php[m
[1mindex 59f9abd..9079069 100644[m
[1m--- a/application/database.php[m
[1m+++ b/application/database.php[m
[36m@@ -8,7 +8,6 @@[m
 // +----------------------------------------------------------------------[m
 // | Author: liu21st <liu21st@gmail.com>[m
 // +----------------------------------------------------------------------[m
[31m-// $Id$[m
 [m
 return [[m
     // 数据库类型[m
[1mdiff --git a/application/route.php b/application/route.php[m
[1mindex 45bcf79..f648d3b 100644[m
[1m--- a/application/route.php[m
[1m+++ b/application/route.php[m
[36m@@ -8,7 +8,6 @@[m
 // +----------------------------------------------------------------------[m
 // | Author: liu21st <liu21st@gmail.com>[m
 // +----------------------------------------------------------------------[m
[31m-// $Id$[m
 [m
 return [[m
     '__pattern__' => [[m
[1mdiff --git a/build.php b/build.php[m
[1mindex 294758c..641ea49 100644[m
[1m--- a/build.php[m
[1m+++ b/build.php[m
[36m@@ -8,7 +8,6 @@[m
 // +----------------------------------------------------------------------[m
 // | Author: liu21st <liu21st@gmail.com>[m
 // +----------------------------------------------------------------------[m
[31m-// $Id$[m
 [m
 return [[m
     // 生成运行时目录[m

[33mcommit 3af8758bb1531a2f77379b565b295681fe56013c[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Jul 1 14:41:32 2016 +0800

    readme更新

[1mdiff --git a/README.md b/README.md[m
[1mindex 61c5ad6..d361146 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,4 +1,4 @@[m
[31m-ThinkPHP 5.0.0 RC3[m
[32m+[m[32mThinkPHP 5.0 RC4[m
 ===============[m
 [m
 [![Downloads](https://img.shields.io/github/downloads/top-think/think/total.svg)](https://github.com/top-think/think/releases)[m
[36m@@ -46,6 +46,7 @@[m [mwww  WEB部署目录（或者子目录）[m
 ├─composer.json         composer定义文件[m
 ├─README.md             README文件[m
 ├─LICENSE.txt           授权说明文件[m
[32m+[m[32m├─think                 命令行入口文件[m
 ├─application           应用目录[m
 │  ├─common             公共模块目录（可以更改）[m
 │  ├─runtime            应用的运行时目录（可写，可定制）[m
[36m@@ -76,6 +77,7 @@[m [mwww  WEB部署目录（或者子目录）[m
 │  ├─tpl                系统模板目录[m
 │  ├─tests              单元测试文件目录[m
 │  ├─base.php           基础定义文件[m
[32m+[m[32m│  ├─console.php        控制台入口文件[m
 │  ├─convention.php     框架惯例配置文件[m
 │  ├─helper.php         助手函数文件[m
 │  ├─phpunit.xml        phpunit配置文件[m

[33mcommit 15cb82937e2a635d5885277475f664b21bf72384[m
Author: thinkphp <thinkphp@qq.com>
Date:   Fri Jul 1 14:10:28 2016 +0800

    配置文件调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 2dec25c..a020ecb 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -147,7 +147,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file socket sae browser[m
[32m+[m[32m        // 日志记录方式，支持 file socket sae[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m
[36m@@ -157,7 +157,8 @@[m [mreturn [[m
     // | Trace设置[m
     // +----------------------------------------------------------------------[m
     'trace'                  => [[m
[31m-        'type' => 'Html' //支持Html,Console 设为false则不显示[m
[32m+[m[32m        //支持Html,Console 设为false则不显示[m
[32m+[m[32m        'type' => 'Html',[m
     ],[m
 [m
     // +----------------------------------------------------------------------[m

[33mcommit bfcc69fac1e8bf68dd15ee847e95cfb8fbd596e6[m
Author: yunwuxin <448901948@qq.com>
Date:   Wed Jun 29 18:12:27 2016 +0800

    增加配置

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 50530e4..2dec25c 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -147,13 +147,20 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file socket trace sae browser[m
[32m+[m[32m        // 日志记录方式，支持 file socket sae browser[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m
     ],[m
 [m
     // +----------------------------------------------------------------------[m
[32m+[m[32m    // | Trace设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    'trace'                  => [[m
[32m+[m[32m        'type' => 'Html' //支持Html,Console 设为false则不显示[m
[32m+[m[32m    ],[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
     // | 缓存设置[m
     // +----------------------------------------------------------------------[m
 [m

[33mcommit 144f18d32190a1d7f65ad41a6afdfb4a5f2a15ad[m
Author: yunwuxin <448901948@qq.com>
Date:   Wed Jun 29 18:10:36 2016 +0800

    修正样式

[1mdiff --git a/application/index/controller/Index.php b/application/index/controller/Index.php[m
[1mindex 803fe95..2ab0697 100644[m
[1m--- a/application/index/controller/Index.php[m
[1m+++ b/application/index/controller/Index.php[m
[36m@@ -5,6 +5,6 @@[m [mclass Index[m
 {[m
     public function index()[m
     {[m
[31m-        return '<style type="text/css">*{ padding: 0; margin: 0; } div{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style="padding: 24px 48px;"> <h1>:)</h1><p> ThinkPHP V5<br/><span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架</span></p><span style="font-size:22px;">[ V5.0 版本由 <a href="http://www.qiniu.com" target="qiniu">七牛云</a> 独家赞助发布 ]</span></div><script type="text/javascript" src="http://tajs.qq.com/stats?sId=9347272" charset="UTF-8"></script><script type="text/javascript" src="http://ad.topthink.com/Public/static/client.js"></script><thinkad id="ad_bd568ce7058a1091"></thinkad>';[m
[32m+[m[32m        return '<style type="text/css">*{ padding: 0; margin: 0; } .think_default_text{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style="padding: 24px 48px;"> <h1>:)</h1><p> ThinkPHP V5<br/><span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架</span></p><span style="font-size:22px;">[ V5.0 版本由 <a href="http://www.qiniu.com" target="qiniu">七牛云</a> 独家赞助发布 ]</span></div><script type="text/javascript" src="http://tajs.qq.com/stats?sId=9347272" charset="UTF-8"></script><script type="text/javascript" src="http://ad.topthink.com/Public/static/client.js"></script><thinkad id="ad_bd568ce7058a1091"></thinkad>';[m
     }[m
 }[m

[33mcommit bf7e40bbcf1fddba75f4a46898e8f4c35e9f236c[m
Author: thinkphp <thinkphp@qq.com>
Date:   Thu Jun 23 17:01:48 2016 +0800

    readme代码规范更新

[1mdiff --git a/README.md b/README.md[m
[1mindex 0d49469..61c5ad6 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -91,7 +91,7 @@[m [mwww  WEB部署目录（或者子目录）[m
 [m
 ## 命名规范[m
 [m
[31m-ThinkPHP5的命名规范如下：[m
[32m+[m[32m`ThinkPHP5`遵循PSR-2命名规范和PSR-4自动加载规范，并且注意如下规范：[m
 [m
 ### 目录和文件[m
 [m
[36m@@ -101,18 +101,18 @@[m [mThinkPHP5的命名规范如下：[m
 *   类名和类文件名保持一致，统一采用驼峰法命名（首字母大写）；[m
 [m
 ### 函数和类、属性命名[m
[31m-*   类的命名采用驼峰法，并且首字母大写，例如 `User`、`UserType`，不需要添加后缀，例如UserController应该直接命名为User；[m
[32m+[m[32m*   类的命名采用驼峰法，并且首字母大写，例如 `User`、`UserType`，默认不需要添加后缀，例如`UserController`应该直接命名为`User`；[m
 *   函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 `get_client_ip`；[m
[31m-*   方法的命名使用驼峰法，并且首字母小写或者使用下划线“_”，例如 `getUserName`，`_parseType`，通常下划线开头的方法属于私有方法；[m
[31m-*   属性的命名使用驼峰法，并且首字母小写或者使用下划线“_”，例如 `tableName`、`_instance`，通常下划线开头的属性属于私有属性；[m
[32m+[m[32m*   方法的命名使用驼峰法，并且首字母小写，例如 `getUserName`；[m
[32m+[m[32m*   属性的命名使用驼峰法，并且首字母小写，例如 `tableName`、`instance`；[m
 *   以双下划线“__”打头的函数或方法作为魔法方法，例如 `__call` 和 `__autoload`；[m
 [m
 ### 常量和配置[m
[31m-*   常量以大写字母和下划线命名，例如 `APP_DEBUG`和 `APP_MODE`；[m
[31m-*   配置参数以小写字母和下划线命名，例如 `url_route_on`；[m
[32m+[m[32m*   常量以大写字母和下划线命名，例如 `APP_PATH`和 `THINK_PATH`；[m
[32m+[m[32m*   配置参数以小写字母和下划线命名，例如 `url_route_on` 和`url_convert`；[m
 [m
 ### 数据表和字段[m
[31m-*   数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和 user_name字段，类似 _username 这样的数据表字段可能会被过滤。[m
[32m+[m[32m*   数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 `think_user` 表和 `user_name`字段，不建议使用驼峰和中文作为数据表字段命名。[m
 [m
 ## 参与开发[m
 注册并登录 Github 帐号， fork 本项目并进行改动。[m

[33mcommit 8271db95d4f797e6c73ca2c45535f6bfdebf728c[m
Author: thinkphp <thinkphp@qq.com>
Date:   Thu Jun 23 15:43:36 2016 +0800

    增加runtime目录

[1mdiff --git a/runtime/.gitignore b/runtime/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..c96a04f[m
[1m--- /dev/null[m
[1m+++ b/runtime/.gitignore[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m*[m
[32m+[m[32m!.gitignore[m
\ No newline at end of file[m

[33mcommit 57ad58399f5a125913d9785f399fcc65b5302a9f[m
Author: yunwuxin <448901948@qq.com>
Date:   Wed Jun 22 15:01:06 2016 +0800

    改进console模式 命令文件改为think

[1mdiff --git a/console b/console[m
[1mdeleted file mode 100644[m
[1mindex b4e5a59..0000000[m
[1m--- a/console[m
[1m+++ /dev/null[m
[36m@@ -1,21 +0,0 @@[m
[31m-#!/usr/bin/env php[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: yunwuxin <448901948@qq.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-// 定义项目路径[m
[31m-define('APP_PATH', './application/');[m
[31m-[m
[31m-define('APP_AUTO_RUN', false);[m
[31m-// 加载框架引导文件[m
[31m-require './thinkphp/start.php';[m
[31m-[m
[31m-\think\App::initCommon();[m
[31m-\think\Console::init();[m
\ No newline at end of file[m
[1mdiff --git a/think b/think[m
[1mnew file mode 100644[m
[1mindex 0000000..5de77e6[m
[1m--- /dev/null[m
[1m+++ b/think[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m#!/usr/bin/env php[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006-2015 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: yunwuxin <448901948@qq.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m// 定义项目路径[m
[32m+[m[32mdefine('APP_PATH', './application/');[m
[32m+[m
[32m+[m[32m// 加载框架引导文件[m
[32m+[m[32mrequire './thinkphp/console.php';[m
\ No newline at end of file[m

[33mcommit 249f13f5fb7333753b460e6cb6fec932e23cfd0e[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Jun 20 17:35:19 2016 +0800

    修正配置

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 5200343..50530e4 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -94,10 +94,8 @@[m [mreturn [[m
     'url_domain_deploy'      => false,[m
     // 域名根，如.thinkphp.cn[m
     'url_domain_root'        => '',[m
[31m-    // 是否自动转换URL中的控制器名[m
[31m-    'url_controller_convert' => true,[m
[31m-    // 是否自动转换URL中的操作名[m
[31m-    'url_action_convert'     => true,[m
[32m+[m[32m    // 是否自动转换URL中的控制器和操作名[m
[32m+[m[32m    'url_convert'            => true,[m
     // 默认的访问控制器层[m
     'url_controller_layer'   => 'controller',[m
     // 表单请求类型伪装变量[m
[36m@@ -149,7 +147,7 @@[m [mreturn [[m
     // +----------------------------------------------------------------------[m
 [m
     'log'                    => [[m
[31m-        // 日志记录方式，支持 file socket trace sae[m
[32m+[m[32m        // 日志记录方式，支持 file socket trace sae browser[m
         'type' => 'File',[m
         // 日志保存目录[m
         'path' => LOG_PATH,[m

[33mcommit 973a6c13e1b0fd2fdd78d3238161907291ec1fec[m
Author: thinkphp <thinkphp@qq.com>
Date:   Wed Jun 15 23:30:27 2016 +0800

    配置调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex b01f8e9..5200343 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -14,6 +14,8 @@[m [mreturn [[m
     // | 应用设置[m
     // +----------------------------------------------------------------------[m
 [m
[32m+[m[32m    // 应用命名空间[m
[32m+[m[32m    'app_namespace'          => 'app',[m
     // 应用调试模式[m
     'app_debug'              => true,[m
     // 应用模式状态[m

[33mcommit 0cceccfa2d41cddab8ac86567a639778de79915d[m
Author: thinkphp <thinkphp@qq.com>
Date:   Wed Jun 15 16:46:12 2016 +0800

    调整配置文件

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 793c939..b01f8e9 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -14,6 +14,8 @@[m [mreturn [[m
     // | 应用设置[m
     // +----------------------------------------------------------------------[m
 [m
[32m+[m[32m    // 应用调试模式[m
[32m+[m[32m    'app_debug'              => true,[m
     // 应用模式状态[m
     'app_status'             => '',[m
     // 是否支持多模块[m

[33mcommit f6db1796d9c5238a332bbc29e2a421ac317d496c[m
Author: thinkphp <thinkphp@qq.com>
Date:   Wed Jun 15 16:44:13 2016 +0800

    取消APP_DEBUG 常量

[1mdiff --git a/application/database.php b/application/database.php[m
[1mindex b879dcb..59f9abd 100644[m
[1m--- a/application/database.php[m
[1m+++ b/application/database.php[m
[36m@@ -32,7 +32,7 @@[m [mreturn [[m
     // 数据库表前缀[m
     'prefix'         => '',[m
     // 数据库调试模式[m
[31m-    'debug'          => APP_DEBUG,[m
[32m+[m[32m    'debug'          => true,[m
     // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)[m
     'deploy'         => 0,[m
     // 数据库读写是否分离 主从式有效[m
[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 65dee67..1473e24 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -13,7 +13,5 @@[m
 [m
 // 定义应用目录[m
 define('APP_PATH', __DIR__ . '/../application/');[m
[31m-// 开启调试模式[m
[31m-define('APP_DEBUG', true);[m
 // 加载框架引导文件[m
 require __DIR__ . '/../thinkphp/start.php';[m

[33mcommit e6e2703783a56f941db7cf529f47d9b10b71fe1c[m
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Jun 14 14:11:16 2016 +0800

    示例配置文件调整

[1mdiff --git a/application/config.php b/application/config.php[m
[1mindex 6162583..793c939 100644[m
[1m--- a/application/config.php[m
[1m+++ b/application/config.php[m
[36m@@ -8,11 +8,204 @@[m
 // +----------------------------------------------------------------------[m
 // | Author: liu21st <liu21st@gmail.com>[m
 // +----------------------------------------------------------------------[m
[31m-// $Id$[m
 [m
 return [[m
[31m-    'url_route_on' => true,[m
[31m-    'log'          => [[m
[31m-        'type' => 'trace', // 支持 socket trace file[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 应用设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    // 应用模式状态[m
[32m+[m[32m    'app_status'             => '',[m
[32m+[m[32m    // 是否支持多模块[m
[32m+[m[32m    'app_multi_module'       => true,[m
[32m+[m[32m    // 注册的根命名空间[m
[32m+[m[32m    'root_namespace'         => [],[m
[32m+[m[32m    // 扩展配置文件[m
[32m+[m[32m    'extra_config_list'      => ['database', 'route', 'validate'],[m
[32m+[m[32m    // 扩展函数文件[m
[32m+[m[32m    'extra_file_list'        => [THINK_PATH . 'helper' . EXT],[m
[32m+[m[32m    // 默认输出类型[m
[32m+[m[32m    'default_return_type'    => 'html',[m
[32m+[m[32m    // 默认AJAX 数据返回格式,可选json xml ...[m
[32m+[m[32m    'default_ajax_return'    => 'json',[m
[32m+[m[32m    // 默认JSONP格式返回的处理方法[m
[32m+[m[32m    'default_jsonp_handler'  => 'jsonpReturn',[m
[32m+[m[32m    // 默认JSONP处理方法[m
[32m+[m[32m    'var_jsonp_handler'      => 'callback',[m
[32m+[m[32m    // 默认时区[m
[32m+[m[32m    'default_timezone'       => 'PRC',[m
[32m+[m[32m    // 是否开启多语言[m
[32m+[m[32m    'lang_switch_on'         => false,[m
[32m+[m[32m    // 默认全局过滤方法 用逗号分隔多个[m
[32m+[m[32m    'default_filter'         => '',[m
[32m+[m[32m    // 默认语言[m
[32m+[m[32m    'default_lang'           => 'zh-cn',[m
[32m+[m[32m    // 是否启用控制器类后缀[m
[32m+[m[32m    'use_controller_suffix'  => false,[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 模块设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    // 默认模块名[m
[32m+[m[32m    'default_module'         => 'index',[m
[32m+[m[32m    // 禁止访问模块[m
[32m+[m[32m    'deny_module_list'       => ['common'],[m
[32m+[m[32m    // 默认控制器名[m
[32m+[m[32m    'default_controller'     => 'Index',[m
[32m+[m[32m    // 默认操作名[m
[32m+[m[32m    'default_action'         => 'index',[m
[32m+[m[32m    // 默认验证器[m
[32m+[m[32m    'default_validate'       => '',[m
[32m+[m[32m    // 默认的空控制器名[m
[32m+[m[32m    'empty_controller'       => 'Error',[m
[32m+[m[32m    // 操作方法后缀[m
[32m+[m[32m    'action_suffix'          => '',[m
[32m+[m[32m    // 自动搜索控制器[m
[32m+[m[32m    'controller_auto_search' => false,[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | URL设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    // PATHINFO变量名 用于兼容模式[m
[32m+[m[32m    'var_pathinfo'           => 's',[m
[32m+[m[32m    // 兼容PATH_INFO获取[m
[32m+[m[32m    'pathinfo_fetch'         => ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'],[m
[32m+[m[32m    // pathinfo分隔符[m
[32m+[m[32m    'pathinfo_depr'          => '/',[m
[32m+[m[32m    // URL伪静态后缀[m
[32m+[m[32m    'url_html_suffix'        => 'html',[m
[32m+[m[32m    // URL普通方式参数 用于自动生成[m
[32m+[m[32m    'url_common_param'       => false,[m
[32m+[m[32m    //url禁止访问的后缀[m
[32m+[m[32m    'url_deny_suffix'        => 'ico|png|gif|jpg',[m
[32m+[m[32m    // URL参数方式 0 按名称成对解析 1 按顺序解析[m
[32m+[m[32m    'url_param_type'         => 0,[m
[32m+[m[32m    // 是否开启路由[m
[32m+[m[32m    'url_route_on'           => true,[m
[32m+[m[32m    // 是否强制使用路由[m
[32m+[m[32m    'url_route_must'         => false,[m
[32m+[m[32m    // 域名部署[m
[32m+[m[32m    'url_domain_deploy'      => false,[m
[32m+[m[32m    // 域名根，如.thinkphp.cn[m
[32m+[m[32m    'url_domain_root'        => '',[m
[32m+[m[32m    // 是否自动转换URL中的控制器名[m
[32m+[m[32m    'url_controller_convert' => true,[m
[32m+[m[32m    // 是否自动转换URL中的操作名[m
[32m+[m[32m    'url_action_convert'     => true,[m
[32m+[m[32m    // 默认的访问控制器层[m
[32m+[m[32m    'url_controller_layer'   => 'controller',[m
[32m+[m[32m    // 表单请求类型伪装变量[m
[32m+[m[32m    'var_method'             => '_method',[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 模板引擎设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    'template'               => [[m
[32m+[m[32m        // 模板引擎类型 支持 php think 支持扩展[m
[32m+[m[32m        'type'         => 'Think',[m
[32m+[m[32m        // 模板路径[m
[32m+[m[32m        'view_path'    => '',[m
[32m+[m[32m        // 模板后缀[m
[32m+[m[32m        'view_suffix'  => 'html',[m
[32m+[m[32m        // 模板文件名分隔符[m
[32m+[m[32m        'view_depr'    => DS,[m
[32m+[m[32m        // 模板引擎普通标签开始标记[m
[32m+[m[32m        'tpl_begin'    => '{',[m
[32m+[m[32m        // 模板引擎普通标签结束标记[m
[32m+[m[32m        'tpl_end'      => '}',[m
[32m+[m[32m        // 标签库标签开始标记[m
[32m+[m[32m        'taglib_begin' => '{',[m
[32m+[m[32m        // 标签库标签结束标记[m
[32m+[m[32m        'taglib_end'   => '}',[m
[32m+[m[32m    ],[m
[32m+[m
[32m+[m[32m    // 视图输出字符串内容替换[m
[32m+[m[32m    'view_replace_str'       => [],[m
[32m+[m[32m    // 默认跳转页面对应的模板文件[m
[32m+[m[32m    'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',[m
[32m+[m[32m    'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 异常及错误设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    // 异常页面的模板文件[m
[32m+[m[32m    'exception_tmpl'         => THINK_PATH . 'tpl' . DS . 'think_exception.tpl',[m
[32m+[m
[32m+[m[32m    // 错误显示信息,非调试模式有效[m
[32m+[m[32m    'error_message'          => '页面错误！请稍后再试～',[m
[32m+[m[32m    // 显示错误信息[m
[32m+[m[32m    'show_error_msg'         => false,[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 日志设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    'log'                    => [[m
[32m+[m[32m        // 日志记录方式，支持 file socket trace sae[m
[32m+[m[32m        'type' => 'File',[m
[32m+[m[32m        // 日志保存目录[m
[32m+[m[32m        'path' => LOG_PATH,[m
[32m+[m[32m    ],[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 缓存设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    'cache'                  => [[m
[32m+[m[32m        // 驱动方式[m
[32m+[m[32m        'type'   => 'File',[m
[32m+[m[32m        // 缓存保存目录[m
[32m+[m[32m        'path'   => CACHE_PATH,[m
[32m+[m[32m        // 缓存前缀[m
[32m+[m[32m        'prefix' => '',[m
[32m+[m[32m        // 缓存有效期 0表示永久缓存[m
[32m+[m[32m        'expire' => 0,[m
[32m+[m[32m    ],[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | 会话设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m    'session'                => [[m
[32m+[m[32m        'id'             => '',[m
[32m+[m[32m        // SESSION_ID的提交变量,解决flash上传跨域[m
[32m+[m[32m        'var_session_id' => '',[m
[32m+[m[32m        // SESSION 前缀[m
[32m+[m[32m        'prefix'         => 'think',[m
[32m+[m[32m        // 驱动方式 支持redis memcache memcached[m
[32m+[m[32m        'type'           => '',[m
[32m+[m[32m        // 是否自动开启 SESSION[m
[32m+[m[32m        'auto_start'     => true,[m
[32m+[m[32m    ],[m
[32m+[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    // | Cookie设置[m
[32m+[m[32m    // +----------------------------------------------------------------------[m
[32m+[m[32m    'cookie'                 => [[m
[32m+[m[32m        // cookie 名称前缀[m
[32m+[m[32m        'prefix'    => '',[m
[32m+[m[32m        // cookie 保存时间[m
[32m+[m[32m        'expire'    => 0,[m
[32m+[m[32m        // cookie 保存路径[m
[32m+[m[32m        'path'      => '/',[m
[32m+[m[32m        // cookie 有效域名[m
[32m+[m[32m        'domain'    => '',[m
[32m+[m[32m        //  cookie 启用安全传输[m
[32m+[m[32m        'secure'    => false,[m
[32m+[m[32m        // httponly设置[m
[32m+[m[32m        'httponly'  => '',[m
[32m+[m[32m        // 是否使用 setcookie[m
[32m+[m[32m        'setcookie' => true,[m
[32m+[m[32m    ],[m
[32m+[m
[32m+[m[32m    //分页配置[m
[32m+[m[32m    'paginate'               => [[m
[32m+[m[32m        'type'      => 'bootstrap',[m
[32m+[m[32m        'var_page'  => 'page',[m
[32m+[m[32m        'list_rows' => 15,[m
     ],[m
 ];[m
[1mdiff --git a/application/database.php b/application/database.php[m
[1mindex 885ebf8..b879dcb 100644[m
[1m--- a/application/database.php[m
[1m+++ b/application/database.php[m
[36m@@ -12,33 +12,41 @@[m
 [m
 return [[m
     // 数据库类型[m
[31m-    'type'        => 'mysql',[m
[31m-    // 数据库连接DSN配置[m
[31m-    'dsn'         => '',[m
[32m+[m[32m    'type'           => 'mysql',[m
     // 服务器地址[m
[31m-    'hostname'    => '127.0.0.1',[m
[32m+[m[32m    'hostname'       => '127.0.0.1',[m
     // 数据库名[m
[31m-    'database'    => '',[m
[31m-    // 数据库用户名[m
[31m-    'username'    => 'root',[m
[31m-    // 数据库密码[m
[31m-    'password'    => '',[m
[31m-    // 数据库连接端口[m
[31m-    'hostport'    => '',[m
[32m+[m[32m    'database'       => '',[m
[32m+[m[32m    // 用户名[m
[32m+[m[32m    'username'       => 'root',[m
[32m+[m[32m    // 密码[m
[32m+[m[32m    'password'       => '',[m
[32m+[m[32m    // 端口[m
[32m+[m[32m    'hostport'       => '',[m
[32m+[m[32m    // 连接dsn[m
[32m+[m[32m    'dsn'            => '',[m
     // 数据库连接参数[m
[31m-    'params'      => [],[m
[32m+[m[32m    'params'         => [],[m
     // 数据库编码默认采用utf8[m
[31m-    'charset'     => 'utf8',[m
[32m+[m[32m    'charset'        => 'utf8',[m
     // 数据库表前缀[m
[31m-    'prefix'      => '',[m
[32m+[m[32m    'prefix'         => '',[m
     // 数据库调试模式[m
[31m-    'debug'       => APP_DEBUG,[m
[32m+[m[32m    'debug'          => APP_DEBUG,[m
     // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)[m
[31m-    'deploy'      => 0,[m
[32m+[m[32m    'deploy'         => 0,[m
     // 数据库读写是否分离 主从式有效[m
[31m-    'rw_separate' => false,[m
[32m+[m[32m    'rw_separate'    => false,[m
     // 读写分离后 主服务器数量[m
[31m-    'master_num'  => 1,[m
[32m+[m[32m    'master_num'     => 1,[m
     // 指定从服务器序号[m
[31m-    'slave_no'    => '',[m
[32m+[m[32m    'slave_no'       => '',[m
[32m+[m[32m    // 是否严格检查字段是否存在[m
[32m+[m[32m    'fields_strict'  => true,[m
[32m+[m[32m    // 数据集返回类型 array 数组 collection Collection对象[m
[32m+[m[32m    'resultset_type' => 'array',[m
[32m+[m[32m    // 是否自动写入时间戳字段[m
[32m+[m[32m    'auto_timestamp' => false,[m
[32m+[m[32m    // 是否需要进行SQL性能分析[m
[32m+[m[32m    'sql_explain'    => false,[m
 ];[m

[33mcommit 46dcf8f59b9e147c046698c749e80242599059e0[m
Author: yunwuxin <448901948@qq.com>
Date:   Mon Jun 13 18:52:41 2016 +0800

    改进console模式

[1mdiff --git a/console b/console[m
[1mindex 99bff04..b4e5a59 100644[m
[1m--- a/console[m
[1m+++ b/console[m
[36m@@ -12,7 +12,10 @@[m
 [m
 // 定义项目路径[m
 define('APP_PATH', './application/');[m
[31m-// 定义应用模式为console[m
[31m-define('APP_MODE', 'console');[m
[32m+[m
[32m+[m[32mdefine('APP_AUTO_RUN', false);[m
 // 加载框架引导文件[m
[31m-require './thinkphp/start.php';[m
\ No newline at end of file[m
[32m+[m[32mrequire './thinkphp/start.php';[m
[32m+[m
[32m+[m[32m\think\App::initCommon();[m
[32m+[m[32m\think\Console::init();[m
\ No newline at end of file[m

[33mcommit b37d8b169757e7ffbf07c491112728279c25a6f4[m
Author: yunwuxin <448901948@qq.com>
Date:   Thu May 26 13:43:01 2016 +0800

    去除rewite的Multiviews选项

[1mdiff --git a/public/.htaccess b/public/.htaccess[m
[1mindex 929995c..cbc7868 100644[m
[1m--- a/public/.htaccess[m
[1m+++ b/public/.htaccess[m
[36m@@ -1,8 +1,8 @@[m
 <IfModule mod_rewrite.c>[m
[31m-  Options +FollowSymlinks[m
[32m+[m[32m  Options +FollowSymlinks -Multiviews[m
   RewriteEngine On[m
 [m
   RewriteCond %{REQUEST_FILENAME} !-d[m
   RewriteCond %{REQUEST_FILENAME} !-f[m
   RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L][m
[31m-</IfModule>[m
\ No newline at end of file[m
[32m+[m[32m</IfModule>[m

[33mcommit b9520f64652c41203521ba1ae9f35d1d8795b523[m
Author: yunwuxin <448901948@qq.com>
Date:   Thu May 19 10:44:40 2016 +0800

    preferred-install:dist

[1mdiff --git a/composer.json b/composer.json[m
[1mindex 1f94572..2ca919f 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -22,5 +22,8 @@[m
     "extra": {[m
         "think-path": "thinkphp"[m
     },[m
[31m-    "minimum-stability": "dev"[m
[32m+[m[32m    "minimum-stability": "dev",[m
[32m+[m[32m    "config": {[m
[32m+[m[32m        "preferred-install": "dist"[m
[32m+[m[32m    }[m
 }[m

[33mcommit 332f414b119a409da55c569048cf6d78bc44db66[m
Author: huangdijia <huangdijia@gmail.com>
Date:   Tue May 3 13:19:15 2016 +0800

    移动router.php位置

[1mdiff --git a/public/router.php b/public/router.php[m
[1mnew file mode 100644[m
[1mindex 0000000..6ba1fab[m
[1m--- /dev/null[m
[1m+++ b/public/router.php[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: liu21st <liu21st@gmail.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// $Id$[m
[32m+[m
[32m+[m[32mif (is_file($_SERVER["DOCUMENT_ROOT"] . $_SERVER["REQUEST_URI"])) {[m
[32m+[m[32m    return false;[m
[32m+[m[32m} else {[m
[32m+[m[32m    require __DIR__ . "/index.php";[m
[32m+[m[32m}[m
[1mdiff --git a/router.php b/router.php[m
[1mdeleted file mode 100644[m
[1mindex 8314970..0000000[m
[1m--- a/router.php[m
[1m+++ /dev/null[m
[36m@@ -1,17 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-// $Id$[m
[31m-[m
[31m-if (is_file($_SERVER["DOCUMENT_ROOT"] . $_SERVER["REQUEST_URI"])) {[m
[31m-    return false;[m
[31m-} else {[m
[31m-    require "./public/index.php";[m
[31m-}[m

[33mcommit 2a6d45906544ec4055659145be68f8951e85371c[m
Merge: 44f2acb 7e19a95
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Apr 25 20:24:08 2016 +0800

    Merge branch 'master' of https://github.com/top-think/think

[33mcommit 44f2acbb9795cb5714a4bae06510dba0ef981c17[m
Author: thinkphp <thinkphp@qq.com>
Date:   Mon Apr 25 20:23:41 2016 +0800

    改进router.php

[1mdiff --git a/router.php b/router.php[m
[1mindex 9d7417b..8314970 100644[m
[1m--- a/router.php[m
[1m+++ b/router.php[m
[36m@@ -10,7 +10,7 @@[m
 // +----------------------------------------------------------------------[m
 // $Id$[m
 [m
[31m-if (file_exists($_SERVER["DOCUMENT_ROOT"] . $_SERVER["REQUEST_URI"])) {[m
[32m+[m[32mif (is_file($_SERVER["DOCUMENT_ROOT"] . $_SERVER["REQUEST_URI"])) {[m
     return false;[m
 } else {[m
     require "./public/index.php";[m

[33mcommit 7e19a952094bf827146c9c703e95970c9988be61[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Apr 23 12:52:44 2016 +0800

    readme修改

[1mdiff --git a/README.md b/README.md[m
[1mindex a4db743..0d49469 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,4 +1,4 @@[m
[31m-ThinkPHP 5.0.0 RC2[m
[32m+[m[32mThinkPHP 5.0.0 RC3[m
 ===============[m
 [m
 [![Downloads](https://img.shields.io/github/downloads/top-think/think/total.svg)](https://github.com/top-think/think/releases)[m
[36m@@ -13,6 +13,7 @@[m [mThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PH[m
  + 核心功能组件化[m
  + 强化路由功能[m
  + 更灵活的控制器[m
[32m+[m[32m + 重构的模型和数据库类[m
  + 配置文件可分离[m
  + 重写的自动验证和完成[m
  + 简化扩展机制[m
[36m@@ -63,8 +64,7 @@[m [mwww  WEB部署目录（或者子目录）[m
 │[m
 ├─public                WEB目录（对外访问目录）[m
 │  ├─index.php          入口文件[m
[31m-│  ├─.htaccess          用于apache的重写[m
[31m-│  └─router.php         快速测试文件（用于PHP内置webserver）[m
[32m+[m[32m│  └─.htaccess          用于apache的重写[m
 │[m
 ├─thinkphp              框架系统目录[m
 │  ├─lang               语言文件目录[m

[33mcommit 09480f404c455b0b858ffdad4879d39e73f663c7[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Apr 23 11:34:20 2016 +0800

    默认的入口文件 开启调试模式

[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 1473e24..65dee67 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -13,5 +13,7 @@[m
 [m
 // 定义应用目录[m
 define('APP_PATH', __DIR__ . '/../application/');[m
[32m+[m[32m// 开启调试模式[m
[32m+[m[32mdefine('APP_DEBUG', true);[m
 // 加载框架引导文件[m
 require __DIR__ . '/../thinkphp/start.php';[m

[33mcommit a88629a6be7ce571b45ab8a38918cab0cc71fc6d[m
Author: thinkphp <thinkphp@qq.com>
Date:   Tue Apr 19 10:27:30 2016 +0800

    router文件移动位置

[1mdiff --git a/public/router.php b/public/router.php[m
[1mdeleted file mode 100644[m
[1mindex 579b63a..0000000[m
[1m--- a/public/router.php[m
[1m+++ /dev/null[m
[36m@@ -1,17 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-// $Id$[m
[31m-[m
[31m-if (file_exists($_SERVER["DOCUMENT_ROOT"] . $_SERVER["REQUEST_URI"])) {[m
[31m-    return false;[m
[31m-} else {[m
[31m-    require "index.php";[m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/router.php b/router.php[m
[1mnew file mode 100644[m
[1mindex 0000000..9d7417b[m
[1m--- /dev/null[m
[1m+++ b/router.php[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?php[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// | Author: liu21st <liu21st@gmail.com>[m
[32m+[m[32m// +----------------------------------------------------------------------[m
[32m+[m[32m// $Id$[m
[32m+[m
[32m+[m[32mif (file_exists($_SERVER["DOCUMENT_ROOT"] . $_SERVER["REQUEST_URI"])) {[m
[32m+[m[32m    return false;[m
[32m+[m[32m} else {[m
[32m+[m[32m    require "./public/index.php";[m
[32m+[m[32m}[m

[33mcommit 1cddb3069c6cd538cd30174537d1c5f419ef462b[m
Merge: 0848f4f 704a895
Author: ThinkPHP <thinkphp@qq.com>
Date:   Thu Mar 31 11:39:03 2016 +0800

    Merge pull request #436 from chunice/patch-1
    
    增加 composer 安装方法说明

[33mcommit 704a895beb8462e25724eae0bd63e068f2953dec[m
Author: chunice <hrb@usa.com>
Date:   Thu Mar 31 10:44:48 2016 +0800

    增加 composer 安装方法说明

[1mdiff --git a/README.md b/README.md[m
[1mindex 545af78..a4db743 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -30,6 +30,12 @@[m [mThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PH[m
 [m
 详细开发文档参考 [ThinkPHP5完全开发手册](http://www.kancloud.cn/manual/thinkphp5)[m
 [m
[32m+[m[32m## 使用 Composer 安装 ThinkPHP5[m
[32m+[m[32m~~~[m
[32m+[m[32mcomposer create-project topthink/think tp5 dev-master --prefer-dist[m
[32m+[m[32m~~~[m
[32m+[m[32m> 因为目前 ThinkPHP 5 正处于高速发展阶段，所以目前只能通过 dev-master 分支来初始化项目[m
[32m+[m
 ## 目录结构[m
 [m
 初始的目录结构如下：[m

[33mcommit 0848f4f9fec12bb9cea805a3c4dfcd5eff79fadb[m
Author: yunwuxin <448901948@qq.com>
Date:   Mon Mar 28 15:43:10 2016 +0800

    修正composer安装，完善console模式

[1mdiff --git a/README.md b/README.md[m
[1mindex 47f7f0c..545af78 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -32,10 +32,6 @@[m [mThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PH[m
 [m
 ## 目录结构[m
 [m
[31m-ThinkPHP5支持两种不同的运行模式，两种模式下目录结构略有不同。[m
[31m-[m
[31m-### 独立式[m
[31m-[m
 初始的目录结构如下：[m
 [m
 ~~~[m
[36m@@ -73,22 +69,20 @@[m [mwww  WEB部署目录（或者子目录）[m
 │  ├─mode               应用模式目录[m
 │  ├─tpl                系统模板目录[m
 │  ├─tests              单元测试文件目录[m
[31m-│  ├─vendor             第三方类库目录（Composer依赖库）[m
 │  ├─base.php           基础定义文件[m
 │  ├─convention.php     框架惯例配置文件[m
 │  ├─helper.php         助手函数文件[m
 │  ├─phpunit.xml        phpunit配置文件[m
 │  └─start.php          框架入口文件[m
[32m+[m[32m│[m
[32m+[m[32m├─extend                扩展类库目录[m
[32m+[m[32m├─vendor                第三方类库目录（Composer依赖库）[m
 ~~~[m
 [m
 > router.php用于php自带webserver支持，可用于快速测试[m
 > 切换到public目录后，启动命令：php -S localhost:8888  router.php[m
 > 上面的目录结构和名称是可以改变的，这取决于你的入口文件和配置参数。[m
 [m
[31m-### composer包模式[m
[31m-[m
[31m-此时目录结构与独立式类似，但是根目录没有 `thinkphp` 目录，取而代之的是 `vendor/topthink/framework`。[m
[31m-[m
 ## 命名规范[m
 [m
 ThinkPHP5的命名规范如下：[m
[1mdiff --git a/composer.json b/composer.json[m
[1mindex b96d2f9..1f94572 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -2,7 +2,11 @@[m
     "name": "topthink/think",[m
     "description": "the new thinkphp framework",[m
     "type": "project",[m
[31m-    "keywords": ["framework", "thinkphp", "ORM"],[m
[32m+[m[32m    "keywords": [[m
[32m+[m[32m        "framework",[m
[32m+[m[32m        "thinkphp",[m
[32m+[m[32m        "ORM"[m
[32m+[m[32m    ],[m
     "homepage": "http://thinkphp.cn/",[m
     "license": "Apache-2.0",[m
     "authors": [[m
[36m@@ -13,6 +17,10 @@[m
     ],[m
     "require": {[m
         "php": ">=5.4.0",[m
[31m-        "topthink/framework": "dev-master"[m
[31m-    }[m
[32m+[m[32m        "topthink/framework": "*"[m
[32m+[m[32m    },[m
[32m+[m[32m    "extra": {[m
[32m+[m[32m        "think-path": "thinkphp"[m
[32m+[m[32m    },[m
[32m+[m[32m    "minimum-stability": "dev"[m
 }[m
[1mdiff --git a/console b/console[m
[1mindex b887415..99bff04 100644[m
[1m--- a/console[m
[1m+++ b/console[m
[36m@@ -14,25 +14,5 @@[m
 define('APP_PATH', './application/');[m
 // 定义应用模式为console[m
 define('APP_MODE', 'console');[m
[31m-// 开启调试模式[m
[31m-define('APP_DEBUG', true);[m
[31m-// 关闭应用自动执行[m
[31m-define('APP_AUTO_RUN', false);[m
 // 加载框架引导文件[m
[31m-require './thinkphp/start.php';[m
[31m-// 实例化console[m
[31m-$console = new \think\Console('Think Console', '0.1');[m
[31m-// 读取指令集[m
[31m-if (is_file(APP_PATH . 'command' . EXT)) {[m
[31m-    $commands = include APP_PATH . 'command' . EXT;[m
[31m-    if (is_array($commands)) {[m
[31m-        foreach ($commands as $command) {[m
[31m-            if (class_exists($command) && is_subclass_of($command, "\\think\\console\\command\\Command")) {[m
[31m-                // 注册指令[m
[31m-                $console->add(new $command());[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[31m-// 运行[m
[31m-$console->run();[m
\ No newline at end of file[m
[32m+[m[32mrequire './thinkphp/start.php';[m
\ No newline at end of file[m
[1mdiff --git a/extend/.gitignore b/extend/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..c96a04f[m
[1m--- /dev/null[m
[1m+++ b/extend/.gitignore[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m*[m
[32m+[m[32m!.gitignore[m
\ No newline at end of file[m
[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 65dee67..1473e24 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -13,7 +13,5 @@[m
 [m
 // 定义应用目录[m
 define('APP_PATH', __DIR__ . '/../application/');[m
[31m-// 开启调试模式[m
[31m-define('APP_DEBUG', true);[m
 // 加载框架引导文件[m
 require __DIR__ . '/../thinkphp/start.php';[m

[33mcommit ab368887559915ed2bdab50457386a4b54973190[m
Merge: a86c63b 32db0d3
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Mar 26 09:13:28 2016 +0800

    Merge branch 'master' of https://github.com/top-think/think

[33mcommit a86c63baedfe7b3bb8105573f61498bed1668843[m
Author: thinkphp <thinkphp@qq.com>
Date:   Sat Mar 26 09:13:03 2016 +0800

    入口文件更改

[1mdiff --git a/composer.json b/composer.json[m
[1mindex ceaf867..b96d2f9 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -4,7 +4,7 @@[m
     "type": "project",[m
     "keywords": ["framework", "thinkphp", "ORM"],[m
     "homepage": "http://thinkphp.cn/",[m
[31m-    "license": "Apache2",[m
[32m+[m[32m    "license": "Apache-2.0",[m
     "authors": [[m
         {[m
             "name": "liu21st",[m
[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 2482bea..65dee67 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -16,8 +16,4 @@[m [mdefine('APP_PATH', __DIR__ . '/../application/');[m
 // 开启调试模式[m
 define('APP_DEBUG', true);[m
 // 加载框架引导文件[m
[31m-if (is_file(__DIR__ . '/../vendor/autoload.php')) {[m
[31m-    require_once __DIR__ . '/../vendor/autoload.php';[m
[31m-} else {[m
[31m-    require __DIR__ . '/../thinkphp/start.php';[m
[31m-}[m
[32m+[m[32mrequire __DIR__ . '/../thinkphp/start.php';[m

[33mcommit 32db0d372080409f70339721b06254fd745a6bf0[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Fri Mar 25 00:09:18 2016 +0800

    更新 README.me

[1mdiff --git a/README.md b/README.md[m
[1mindex e411e39..47f7f0c 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -32,6 +32,10 @@[m [mThinkPHP5在保持快速开发和大道至简的核心理念不变的同时，PH[m
 [m
 ## 目录结构[m
 [m
[32m+[m[32mThinkPHP5支持两种不同的运行模式，两种模式下目录结构略有不同。[m
[32m+[m
[32m+[m[32m### 独立式[m
[32m+[m
 初始的目录结构如下：[m
 [m
 ~~~[m
[36m@@ -81,6 +85,10 @@[m [mwww  WEB部署目录（或者子目录）[m
 > 切换到public目录后，启动命令：php -S localhost:8888  router.php[m
 > 上面的目录结构和名称是可以改变的，这取决于你的入口文件和配置参数。[m
 [m
[32m+[m[32m### composer包模式[m
[32m+[m
[32m+[m[32m此时目录结构与独立式类似，但是根目录没有 `thinkphp` 目录，取而代之的是 `vendor/topthink/framework`。[m
[32m+[m
 ## 命名规范[m
 [m
 ThinkPHP5的命名规范如下：[m

[33mcommit 02284e6fad2e08f0819b884d8b1476417d34d190[m
Author: thinkphp <thinkphp@qq.com>
Date:   Thu Mar 24 23:27:33 2016 +0800

    清理文件和readme修改

[1mdiff --git a/README.md b/README.md[m
[1mindex 5169fcc..e411e39 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,8 +1,6 @@[m
 ThinkPHP 5.0.0 RC2[m
 ===============[m
 [m
[31m-[![Build Status](https://img.shields.io/travis/top-think/think.svg)](https://travis-ci.org/top-think/think)[m
[31m-[![Coverage Status](https://img.shields.io/codecov/c/github/top-think/think.svg)](https://codecov.io/github/top-think/think)[m
 [![Downloads](https://img.shields.io/github/downloads/top-think/think/total.svg)](https://github.com/top-think/think/releases)[m
 [![Releases](https://img.shields.io/github/release/top-think/think.svg)](https://github.com/top-think/think/releases/latest)[m
 [![Releases Downloads](https://img.shields.io/github/downloads/top-think/think/latest/total.svg)](https://github.com/top-think/think/releases/latest)[m
[1mdiff --git a/thinkphp/library/think/Validate.php b/thinkphp/library/think/Validate.php[m
[1mdeleted file mode 100644[m
[1mindex 601e301..0000000[m
[1m--- a/thinkphp/library/think/Validate.php[m
[1m+++ /dev/null[m
[36m@@ -1,907 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Validate[m
[31m-{[m
[31m-    // 实例[m
[31m-    protected static $instance = null;[m
[31m-[m
[31m-    // 自定义的验证类型[m
[31m-    protected $type = [];[m
[31m-[m
[31m-    // 验证类型别名[m
[31m-    protected $alias = [[m
[31m-        '>' => 'gt', '>=' => 'egt', '<' => 'lt', '<=' => 'elt', '=' => 'eq', 'same' => 'eq',[m
[31m-    ];[m
[31m-[m
[31m-    // 当前验证的规则[m
[31m-    protected $rule = [];[m
[31m-[m
[31m-    // 验证提示信息[m
[31m-    protected $message = [];[m
[31m-[m
[31m-    // 验证规则默认提示信息[m
[31m-    protected $typeMsg = [[m
[31m-        'require'    => ':attribute不能为空',[m
[31m-        'number'     => ':attribute必须是数字',[m
[31m-        'float'      => ':attribute必须是浮点数',[m
[31m-        'boolean'    => ':attribute必须是布尔值',[m
[31m-        'email'      => ':attribute格式不符',[m
[31m-        'array'      => ':attribute必须是数组',[m
[31m-        'accepted'   => ':attribute必须是yes、on或者1',[m
[31m-        'date'       => ':attribute格式不符合',[m
[31m-        'alpha'      => ':attribute只能是字母',[m
[31m-        'alphaNum'   => ':attribute只能是字母和数字',[m
[31m-        'alphaDash'  => ':attribute只能是字母、数字和下划线_及破折号-',[m
[31m-        'activeUrl'  => ':attribute不是有效的域名或者IP',[m
[31m-        'url'        => ':attribute不是有效的URL地址',[m
[31m-        'ip'         => ':attribute不是有效的IP地址',[m
[31m-        'dateFormat' => ':attribute必须使用日期格式 :rule',[m
[31m-        'in'         => ':attribute必须在 :rule 范围内',[m
[31m-        'notIn'      => ':attribute不能在 :rule 范围内',[m
[31m-        'between'    => ':attribute只能在 :1 - :2 之间',[m
[31m-        'notBetween' => ':attribute不能在 :1 - :2 之间',[m
[31m-        'length'     => ':attribute长度不符合要求 :rule',[m
[31m-        'max'        => ':attribute长度不能超过 :rule',[m
[31m-        'min'        => ':attribute长度不能小于 :rule',[m
[31m-        'after'      => ':attribute日期不能小于 :rule',[m
[31m-        'before'     => ':attribute日期不能超过 :rule',[m
[31m-        'expire'     => '不在有效期内 :rule',[m
[31m-        'allowIp'    => '不允许的IP访问',[m
[31m-        'denyIp'     => '禁止的IP访问',[m
[31m-        'confirm'    => ':attribute和字段 :rule 不一致',[m
[31m-        'egt'        => ':attribute必须大于等于 :rule',[m
[31m-        'gt'         => ':attribute必须大于 :rule',[m
[31m-        'elt'        => ':attribute必须小于等于 :rule',[m
[31m-        'lt'         => ':attribute必须小于 :rule',[m
[31m-        'eq'         => ':attribute必须等于 :rule',[m
[31m-        'unique'     => ':attribute已存在',[m
[31m-        'regex'      => ':attribute不符合指定规则',[m
[31m-    ];[m
[31m-[m
[31m-    // 当前验证场景[m
[31m-    protected $currentScene = null;[m
[31m-[m
[31m-    // 正则表达式 regex = ['zip'=>'\d{6}',...][m
[31m-    protected $regex = [];[m
[31m-[m
[31m-    // 验证场景 scene = ['edit'=>'name1,name2,...'][m
[31m-    protected $scene = [];[m
[31m-[m
[31m-    // 验证失败错误信息[m
[31m-    protected $error = [];[m
[31m-[m
[31m-    // 批量验证[m
[31m-    protected $batch = false;[m
[31m-[m
[31m-    /**[m
[31m-     * 架构函数[m
[31m-     * @access public[m
[31m-     * @param array $rules 验证规则[m
[31m-     * @param array $message 验证提示信息[m
[31m-     */[m
[31m-    public function __construct(array $rules = [], $message = [])[m
[31m-    {[m
[31m-        $this->rule    = array_merge($this->rule, $rules);[m
[31m-        $this->message = array_merge($this->message, $message);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实例化验证[m
[31m-     * @access public[m
[31m-     * @param array $rules 验证规则[m
[31m-     * @param array $message 验证提示信息[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public static function make($rules = [], $message = [])[m
[31m-    {[m
[31m-        if (is_null(self::$instance)) {[m
[31m-            self::$instance = new self($rules, $message);[m
[31m-        }[m
[31m-        return self::$instance;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 添加字段验证规则[m
[31m-     * @access protected[m
[31m-     * @param string|array $name  字段名称或者规则数组[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public function rule($name, $rule = '')[m
[31m-    {[m
[31m-        if (is_array($name)) {[m
[31m-            $this->rule = array_merge($this->rule, $name);[m
[31m-        } else {[m
[31m-            $this->rule[$name] = $rule;[m
[31m-        }[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 注册验证（类型）规则[m
[31m-     * @access public[m
[31m-     * @param string $type  验证规则类型[m
[31m-     * @param mixed $callback callback方法(或闭包)[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public function extend($type, $callback = null)[m
[31m-    {[m
[31m-        if (is_array($type)) {[m
[31m-            $this->type = array_merge($this->type, $type);[m
[31m-        } else {[m
[31m-            $this->type[$type] = $callback;[m
[31m-        }[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置提示信息[m
[31m-     * @access public[m
[31m-     * @param string|array $name  字段名称[m
[31m-     * @param string $message 提示信息[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public function message($name, $message = '')[m
[31m-    {[m
[31m-        if (is_array($name)) {[m
[31m-            $this->message = array_merge($this->message, $name);[m
[31m-        } else {[m
[31m-            $this->message[$name] = $message;[m
[31m-        }[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取验证规则的默认提示信息[m
[31m-     * @access protected[m
[31m-     * @param string|array $type  验证规则类型名称或者数组[m
[31m-     * @param string $msg  验证提示信息[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public function setTypeMsg($type, $msg = null)[m
[31m-    {[m
[31m-        if (is_array($type)) {[m
[31m-            $this->typeMsg = array_merge($this->typeMsg, $type);[m
[31m-        } else {[m
[31m-            $this->typeMsg[$type] = $msg;[m
[31m-        }[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置验证场景[m
[31m-     * @access public[m
[31m-     * @param string|array $name  场景名或者场景设置数组[m
[31m-     * @param mixed $fields 要验证的字段[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public function scene($name, $fields = null)[m
[31m-    {[m
[31m-        if (is_array($name)) {[m
[31m-            $this->scene = array_merge($this->scene, $name);[m
[31m-        }if (is_null($fields)) {[m
[31m-            // 设置当前场景[m
[31m-            $this->currentScene = $name;[m
[31m-        } else {[m
[31m-            // 设置验证场景[m
[31m-            $this->scene[$name] = $fields;[m
[31m-        }[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置批量验证[m
[31m-     * @access public[m
[31m-     * @param bool $batch  是否批量验证[m
[31m-     * @return Validate[m
[31m-     */[m
[31m-    public function batch($batch = true)[m
[31m-    {[m
[31m-        $this->batch = $batch;[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 数据自动验证[m
[31m-     * @access public[m
[31m-     * @param array $data  数据[m
[31m-     * @param mixed $rules  验证规则[m
[31m-     * @param string $scene 验证场景[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    public function check(&$data, $rules = [], $scene = '')[m
[31m-    {[m
[31m-        $this->error = [];[m
[31m-[m
[31m-        if (empty($rules)) {[m
[31m-            // 读取验证规则[m
[31m-            $rules = $this->rule;[m
[31m-        }[m
[31m-[m
[31m-        // 分析验证规则[m
[31m-        $scene = $this->getScene($scene);[m
[31m-[m
[31m-        foreach ($rules as $key => $item) {[m
[31m-            // field => rule1|rule2... field=>['rule1','rule2',...][m
[31m-            if (is_numeric($key)) {[m
[31m-                // [field,rule1|rule2,msg1|msg2][m
[31m-                $key  = $item[0];[m
[31m-                $rule = $item[1];[m
[31m-                if (isset($item[2])) {[m
[31m-                    $msg = is_string($item[2]) ? explode('|', $item[2]) : $item[2];[m
[31m-                } else {[m
[31m-                    $msg = [];[m
[31m-                }[m
[31m-            } else {[m
[31m-                $rule = $item;[m
[31m-                $msg  = [];[m
[31m-            }[m
[31m-            if (strpos($key, '|')) {[m
[31m-                // 字段|描述 用于指定属性名称[m
[31m-                list($key, $title) = explode('|', $key);[m
[31m-            } else {[m
[31m-                $title = $key;[m
[31m-            }[m
[31m-[m
[31m-            // 场景检测[m
[31m-            if (!empty($scene)) {[m
[31m-                if ($scene instanceof \Closure && !call_user_func_array($scene, [$key, &$data])) {[m
[31m-                    continue;[m
[31m-                } elseif (is_array($scene) && !in_array($key, $scene)) {[m
[31m-                    continue;[m
[31m-                }[m
[31m-            }[m
[31m-[m
[31m-            // 获取数据 支持二维数组[m
[31m-            $value = $this->getDataValue($data, $key);[m
[31m-[m
[31m-            // 字段验证[m
[31m-            $result = $this->checkItem($key, $value, $rule, $data, $title, $msg);[m
[31m-[m
[31m-            if (true !== $result) {[m
[31m-                // 没有返回true 则表示验证失败[m
[31m-                if (!empty($this->batch)) {[m
[31m-                    // 批量验证[m
[31m-                    if (is_array($result)) {[m
[31m-                        $this->error = array_merge($this->error, $result);[m
[31m-                    } else {[m
[31m-                        $this->error[$key] = $result;[m
[31m-                    }[m
[31m-                } else {[m
[31m-                    $this->error = $result;[m
[31m-                    return false;[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        return !empty($this->error) ? false : true;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证单个字段规则[m
[31m-     * @access protected[m
[31m-     * @param string $field  字段名[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rules  验证规则[m
[31m-     * @param array $data  数据[m
[31m-     * @param string $title  字段描述[m
[31m-     * @param array $msg  提示信息[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    protected function checkItem($field, $value, $rules, &$data, $title = '', $msg = [])[m
[31m-    {[m
[31m-        if ($rules instanceof \Closure) {[m
[31m-            // 匿名函数验证 支持传入当前字段和所有字段两个数据[m
[31m-            $result = call_user_func_array($rules, [$value, &$data]);[m
[31m-        } else {[m
[31m-            // 支持多规则验证 require|in:a,b,c|... 或者 ['require','in'=>'a,b,c',...][m
[31m-            if (is_string($rules)) {[m
[31m-                $rules = explode('|', $rules);[m
[31m-            }[m
[31m-            $i = 0;[m
[31m-            foreach ($rules as $key => $rule) {[m
[31m-                if ($rule instanceof \Closure) {[m
[31m-                    $result = call_user_func_array($rule, [$value, &$data]);[m
[31m-                } else {[m
[31m-                    // 判断验证类型[m
[31m-                    if (is_numeric($key) && strpos($rule, ':')) {[m
[31m-                        list($type, $rule) = explode(':', $rule, 2);[m
[31m-                        if (isset($this->alias[$type])) {[m
[31m-                            // 判断别名[m
[31m-                            $type = $this->alias[$type];[m
[31m-                        }[m
[31m-                        $info = $type;[m
[31m-                    } elseif (is_numeric($key)) {[m
[31m-                        $type = 'is';[m
[31m-                        $info = $rule;[m
[31m-                    } else {[m
[31m-                        $info = $type = $key;[m
[31m-                    }[m
[31m-[m
[31m-                    // 如果不是require 有数据才会行验证[m
[31m-                    if (0 === strpos($info, 'require') || !empty($value)) {[m
[31m-                        // 验证类型[m
[31m-                        $callback = isset($this->type[$type]) ? $this->type[$type] : [$this, $type];[m
[31m-                        // 验证数据[m
[31m-                        $result = call_user_func_array($callback, [$value, $rule, &$data, $field]);[m
[31m-                    } else {[m
[31m-                        $result = true;[m
[31m-                    }[m
[31m-                }[m
[31m-[m
[31m-                if (false === $result) {[m
[31m-                    // 验证失败 返回错误信息[m
[31m-                    if (isset($msg[$i])) {[m
[31m-                        $message = $msg[$i];[m
[31m-                    } else {[m
[31m-                        $message = $this->getRuleMsg($field, $title, $info, $rule);[m
[31m-                    }[m
[31m-                    return $message;[m
[31m-                } elseif (true !== $result) {[m
[31m-                    // 返回自定义错误信息[m
[31m-                    return $result;[m
[31m-                }[m
[31m-                $i++;[m
[31m-            }[m
[31m-        }[m
[31m-        return true !== $result ? $result : true;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否和某个字段的值一致[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @param array $data  数据[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function confirm($value, $rule, $data)[m
[31m-    {[m
[31m-        return $this->getDataValue($data, $rule) == $value;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否大于等于某个值[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function egt($value, $rule)[m
[31m-    {[m
[31m-        return $value >= $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否大于某个值[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function gt($value, $rule)[m
[31m-    {[m
[31m-        return $value > $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否小于等于某个值[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function elt($value, $rule)[m
[31m-    {[m
[31m-        return $value <= $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否小于某个值[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function lt($value, $rule)[m
[31m-    {[m
[31m-        return $value < $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否等于某个值[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function eq($value, $rule)[m
[31m-    {[m
[31m-        return $value == $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证字段值是否为有效格式[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param string $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function is($value, $rule)[m
[31m-    {[m
[31m-        switch ($rule) {[m
[31m-            case 'require':[m
[31m-                // 必须[m
[31m-                $result = !empty($value) && '0' != $value;[m
[31m-                break;[m
[31m-            case 'accepted':[m
[31m-                // 接受[m
[31m-                $result = in_array($value, ['1', 'on', 'yes']);[m
[31m-                break;[m
[31m-            case 'date':[m
[31m-                // 是否是一个有效日期[m
[31m-                $result = false !== strtotime($value);[m
[31m-                break;[m
[31m-            case 'alpha':[m
[31m-                // 只允许字母[m
[31m-                $result = $this->regex($value, '/^[A-Za-z]+$/');[m
[31m-                break;[m
[31m-            case 'alphaNum':[m
[31m-                // 只允许字母和数字[m
[31m-                $result = $this->regex($value, '/^[A-Za-z0-9]+$/');[m
[31m-                break;[m
[31m-            case 'alphaDash':[m
[31m-                // 只允许字母、数字和下划线 破折号[m
[31m-                $result = $this->regex($value, '/^[A-Za-z0-9\-\_]+$/');[m
[31m-                break;[m
[31m-            case 'activeUrl':[m
[31m-                // 是否为有效的网址[m
[31m-                $result = checkdnsrr($value);[m
[31m-                break;[m
[31m-            case 'ip':[m
[31m-                // 是否为IP地址[m
[31m-                $result = $this->filter($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6);[m
[31m-                break;[m
[31m-            case 'url':[m
[31m-                // 是否为一个URL地址[m
[31m-                $result = $this->filter($value, FILTER_VALIDATE_URL);[m
[31m-                break;[m
[31m-            case 'float':[m
[31m-                // 是否为float[m
[31m-                $result = $this->filter($value, FILTER_VALIDATE_FLOAT);[m
[31m-                break;[m
[31m-            case 'number':[m
[31m-            case 'integer':[m
[31m-                // 是否为整形[m
[31m-                $result = $this->filter($value, FILTER_VALIDATE_INT);[m
[31m-                break;[m
[31m-            case 'email':[m
[31m-                // 是否为邮箱地址[m
[31m-                $result = $this->filter($value, FILTER_VALIDATE_EMAIL);[m
[31m-                break;[m
[31m-            case 'boolean':[m
[31m-                // 是否为布尔值[m
[31m-                $result = $this->filter($value, FILTER_VALIDATE_BOOLEAN);[m
[31m-                break;[m
[31m-            case 'array':[m
[31m-                // 是否为数组[m
[31m-                $result = is_array($value);[m
[31m-                break;[m
[31m-            default:[m
[31m-                // 正则验证[m
[31m-                $result = $this->regex($value, $rule);[m
[31m-        }[m
[31m-        return $result;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证时间和日期是否符合指定格式[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function dateFormat($value, $rule)[m
[31m-    {[m
[31m-        $info = date_parse_from_format($rule, $value);[m
[31m-        return 0 == $info['warning_count'] && 0 == $info['error_count'];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否唯一[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则 格式：数据表,字段名,排除ID,主键名[m
[31m-     * @param array $data  数据[m
[31m-     * @param string $field  验证字段名[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function unique($value, $rule, $data, $field)[m
[31m-    {[m
[31m-        if (is_string($rule)) {[m
[31m-            $rule = explode(',', $rule);[m
[31m-        }[m
[31m-        $model = Loader::table($rule[0]);[m
[31m-        $field = isset($rule[1]) ? $rule[1] : $field;[m
[31m-[m
[31m-        if (strpos($field, '^')) {[m
[31m-            // 支持多个字段验证[m
[31m-            $fields = explode('^', $field);[m
[31m-            foreach ($fields as $field) {[m
[31m-                $map[$field] = $data[$field];[m
[31m-            }[m
[31m-        } elseif (strpos($field, '=')) {[m
[31m-            parse_str($field, $map);[m
[31m-        } else {[m
[31m-            $map[$field] = $data[$field];[m
[31m-        }[m
[31m-[m
[31m-        $key = strval(isset($rule[3]) ? $rule[3] : $model->getPk());[m
[31m-        if (isset($rule[2])) {[m
[31m-            $map[$key] = ['neq', $rule[2]];[m
[31m-        } elseif (isset($data[$key])) {[m
[31m-            $map[$key] = ['neq', $data[$key]];[m
[31m-        }[m
[31m-[m
[31m-        if ($model->where($map)->field($key)->find()) {[m
[31m-            return false;[m
[31m-        }[m
[31m-        return true;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 使用行为类验证[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @param array $data  数据[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    protected function behavior($value, $rule, $data)[m
[31m-    {[m
[31m-        return Hook::exec($rule, '', $data);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 使用filter_var方式验证[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function filter($value, $rule)[m
[31m-    {[m
[31m-        if (is_string($rule) && strpos($rule, ',')) {[m
[31m-            list($rule, $param) = explode(',', $rule);[m
[31m-        } elseif (is_array($rule)) {[m
[31m-            $param = isset($rule[1]) ? $rule[1] : null;[m
[31m-        } else {[m
[31m-            $param = null;[m
[31m-        }[m
[31m-        return false !== filter_var($value, is_int($rule) ? $rule : filter_id($rule), $param);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证某个字段等于某个值的时候必须[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @param array $data  数据[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function requireIf($value, $rule, $data)[m
[31m-    {[m
[31m-        list($field, $val) = explode(',', $rule);[m
[31m-        if ($this->getDataValue($data, $field) == $val) {[m
[31m-            return !empty($value);[m
[31m-        } else {[m
[31m-            return true;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证某个字段有值的情况下必须[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @param array $data  数据[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function requireWith($value, $rule, $data)[m
[31m-    {[m
[31m-        $val = $this->getDataValue($data, $rule);[m
[31m-        if (!empty($val)) {[m
[31m-            return !empty($value);[m
[31m-        } else {[m
[31m-            return true;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否在范围内[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function in($value, $rule)[m
[31m-    {[m
[31m-        return in_array($value, is_array($rule) ? $rule : explode(',', $rule));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证是否不在某个范围[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function notIn($value, $rule)[m
[31m-    {[m
[31m-        return !in_array($value, is_array($rule) ? $rule : explode(',', $rule));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * between验证数据[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function between($value, $rule)[m
[31m-    {[m
[31m-        if (is_string($rule)) {[m
[31m-            $rule = explode(',', $rule);[m
[31m-        }[m
[31m-        list($min, $max) = $rule;[m
[31m-        return $value >= $min && $value <= $max;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 使用notbetween验证数据[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function notBetween($value, $rule)[m
[31m-    {[m
[31m-        if (is_string($rule)) {[m
[31m-            $rule = explode(',', $rule);[m
[31m-        }[m
[31m-        list($min, $max) = $rule;[m
[31m-        return $value < $min || $value > $max;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证数据长度[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function length($value, $rule)[m
[31m-    {[m
[31m-        $length = strlen((string) $value); // 当前数据长度[m
[31m-        if (strpos($rule, ',')) {[m
[31m-            // 长度区间[m
[31m-            list($min, $max) = explode(',', $rule);[m
[31m-            return $length >= $min && $length <= $max;[m
[31m-        } else {[m
[31m-            // 指定长度[m
[31m-            return $length == $rule;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证数据最大长度[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function max($value, $rule)[m
[31m-    {[m
[31m-        $length = strlen((string) $value);[m
[31m-        return $length <= $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证数据最小长度[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function min($value, $rule)[m
[31m-    {[m
[31m-        $length = strlen((string) $value);[m
[31m-        return $length >= $rule;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证日期[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function after($value, $rule)[m
[31m-    {[m
[31m-        return strtotime($value) >= strtotime($rule);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证日期[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function before($value, $rule)[m
[31m-    {[m
[31m-        return strtotime($value) <= strtotime($rule);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证有效期[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    protected function expire($value, $rule)[m
[31m-    {[m
[31m-        if (is_string($rule)) {[m
[31m-            $rule = explode(',', $rule);[m
[31m-        }[m
[31m-        list($start, $end) = $rule;[m
[31m-        if (!is_numeric($start)) {[m
[31m-            $start = strtotime($start);[m
[31m-        }[m
[31m-[m
[31m-        if (!is_numeric($end)) {[m
[31m-            $end = strtotime($end);[m
[31m-        }[m
[31m-        return NOW_TIME >= $start && NOW_TIME <= $end;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证IP许可[m
[31m-     * @access protected[m
[31m-     * @param string $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    protected function allowIp($value, $rule)[m
[31m-    {[m
[31m-        return in_array($_SERVER['REMOTE_ADDR'], is_array($rule) ? $rule : explode(',', $rule));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证IP禁用[m
[31m-     * @access protected[m
[31m-     * @param string $value  字段值[m
[31m-     * @param mixed $rule  验证规则[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    protected function denyIp($value, $rule)[m
[31m-    {[m
[31m-        return !in_array($_SERVER['REMOTE_ADDR'], is_array($rule) ? $rule : explode(',', $rule));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 使用正则验证数据[m
[31m-     * @access protected[m
[31m-     * @param mixed $value  字段值[m
[31m-     * @param mixed $rule  验证规则 正则规则或者预定义正则名[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    protected function regex($value, $rule)[m
[31m-    {[m
[31m-        if (isset($this->regex[$rule])) {[m
[31m-            $rule = $this->regex[$rule];[m
[31m-        }[m
[31m-        if (0 !== strpos($rule, '/') && !preg_match('/\/[imsU]{0,4}$/', $rule)) {[m
[31m-            // 不是正则表达式则两端补上/[m
[31m-            $rule = '/^' . $rule . '$/';[m
[31m-        }[m
[31m-        return 1 === preg_match($rule, (string) $value);[m
[31m-    }[m
[31m-[m
[31m-    // 获取错误信息[m
[31m-    public function getError()[m
[31m-    {[m
[31m-        return $this->error;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取数据值[m
[31m-     * @access protected[m
[31m-     * @param array $data  数据[m
[31m-     * @param string $key  数据标识 支持二维[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    protected function getDataValue($data, $key)[m
[31m-    {[m
[31m-        if (strpos($key, '.')) {[m
[31m-            // 支持二维数组验证[m
[31m-            list($name1, $name2) = explode('.', $key);[m
[31m-            $value               = isset($data[$name1][$name2]) ? $data[$name1][$name2] : null;[m
[31m-        } else {[m
[31m-            $value = isset($data[$key]) ? $data[$key] : null;[m
[31m-        }[m
[31m-        return $value;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取验证规则的错误提示信息[m
[31m-     * @access protected[m
[31m-     * @param string $attribute  字段英文名[m
[31m-     * @param string $title  字段描述名[m
[31m-     * @param string $type  验证规则名称[m
[31m-     * @param mixed $rule  验证规则数据[m
[31m-     * @return string[m
[31m-     */[m
[31m-    protected function getRuleMsg($attribute, $title, $type, $rule)[m
[31m-    {[m
[31m-        if (isset($this->message[$attribute . '.' . $type])) {[m
[31m-            $msg = $this->message[$attribute . '.' . $type];[m
[31m-        } elseif (isset($this->message[$attribute])) {[m
[31m-            $msg = $this->message[$attribute];[m
[31m-        } elseif (isset($this->typeMsg[$type])) {[m
[31m-            $msg = $this->typeMsg[$type];[m
[31m-        } else {[m
[31m-            $msg = $title . '规则错误';[m
[31m-        }[m
[31m-        // TODO 多语言支持[m
[31m-        if (is_string($msg) && false !== strpos($msg, ':')) {[m
[31m-            // 变量替换[m
[31m-            if (strpos($rule, ',')) {[m
[31m-                $array = array_pad(explode(',', $rule), 3, '');[m
[31m-            } else {[m
[31m-                $array = array_pad([], 3, '');[m
[31m-            }[m
[31m-            $msg = str_replace([m
[31m-                [':attribute', ':rule', ':1', ':2', ':3'],[m
[31m-                [$title, (string) $rule, $array[0], $array[1], $array[2]],[m
[31m-                $msg);[m
[31m-        }[m
[31m-        return $msg;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取数据验证的场景[m
[31m-     * @access protected[m
[31m-     * @param string $scene  验证场景[m
[31m-     * @return array[m
[31m-     */[m
[31m-    protected function getScene($scene = '')[m
[31m-    {[m
[31m-        if (empty($scene)) {[m
[31m-            // 读取指定场景[m
[31m-            $scene = $this->currentScene;[m
[31m-        }[m
[31m-[m
[31m-        if (!empty($scene) && isset($this->scene[$scene])) {[m
[31m-            // 如果设置了验证适用场景[m
[31m-            $scene = $this->scene[$scene];[m
[31m-            if (is_string($scene)) {[m
[31m-                $scene = explode(',', $scene);[m
[31m-            }[m
[31m-        } else {[m
[31m-            $scene = [];[m
[31m-        }[m
[31m-        return $scene;[m
[31m-    }[m
[31m-}[m

[33mcommit de54abe03995ca0f8f05e4a40da1f9472024279a[m
Merge: 4c72487 1af9973
Author: ThinkPHP <thinkphp@qq.com>
Date:   Thu Mar 24 22:58:23 2016 +0800

    Merge pull request #427 from top-think/split
    
    将框架核心移动到独立仓库

[33mcommit 1af9973d848cd455bde65128e453055b5267d913[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Thu Mar 24 15:20:34 2016 +0800

    自动选择加载composer autoloader或tp loader

[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 3a0ae93..2482bea 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -16,4 +16,8 @@[m [mdefine('APP_PATH', __DIR__ . '/../application/');[m
 // 开启调试模式[m
 define('APP_DEBUG', true);[m
 // 加载框架引导文件[m
[31m-require_once __DIR__ . '/../vendor/autoload.php';[m
[32m+[m[32mif (is_file(__DIR__ . '/../vendor/autoload.php')) {[m
[32m+[m[32m    require_once __DIR__ . '/../vendor/autoload.php';[m
[32m+[m[32m} else {[m
[32m+[m[32m    require __DIR__ . '/../thinkphp/start.php';[m
[32m+[m[32m}[m

[33mcommit 69c4b45940bb3c5b2781b22aba8e2f032bac59f6[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Thu Mar 24 15:04:17 2016 +0800

    调整composer及入口文件

[1mdiff --git a/composer.json b/composer.json[m
[1mindex 2abf3a0..ceaf867 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -13,9 +13,6 @@[m
     ],[m
     "require": {[m
         "php": ">=5.4.0",[m
[31m-        "topthink/framework": "*"[m
[31m-    },[m
[31m-    "config": {[m
[31m-        "vendor-dir": "type:wordpress-plugin"[m
[32m+[m[32m        "topthink/framework": "dev-master"[m
     }[m
 }[m
[1mdiff --git a/public/index.php b/public/index.php[m
[1mindex 65dee67..3a0ae93 100644[m
[1m--- a/public/index.php[m
[1m+++ b/public/index.php[m
[36m@@ -16,4 +16,4 @@[m [mdefine('APP_PATH', __DIR__ . '/../application/');[m
 // 开启调试模式[m
 define('APP_DEBUG', true);[m
 // 加载框架引导文件[m
[31m-require __DIR__ . '/../thinkphp/start.php';[m
[32m+[m[32mrequire_once __DIR__ . '/../vendor/autoload.php';[m
[1mdiff --git a/vendor/.gitignore b/vendor/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..c96a04f[m
[1m--- /dev/null[m
[1m+++ b/vendor/.gitignore[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m*[m
[32m+[m[32m!.gitignore[m
\ No newline at end of file[m

[33mcommit 5c880381bf13658a4f1301fedac374c491bf2185[m
Author: 7IN0SAN9 <me@7in0.me>
Date:   Thu Mar 24 14:32:24 2016 +0800

    框架核心独立

[1mdiff --git a/.travis.yml b/.travis.yml[m
[1mdeleted file mode 100644[m
[1mindex e7b91b3..0000000[m
[1m--- a/.travis.yml[m
[1m+++ /dev/null[m
[36m@@ -1,49 +0,0 @@[m
[31m-sudo: false[m
[31m-[m
[31m-language: php[m
[31m-[m
[31m-services:[m
[31m-  - memcached[m
[31m-  - mongodb[m
[31m-  - mysql[m
[31m-  - postgresql[m
[31m-  - redis-server[m
[31m-[m
[31m-matrix:[m
[31m-  fast_finish: true[m
[31m-  include:[m
[31m-    - php: 5.4[m
[31m-    - php: 5.5[m
[31m-    - php: 5.6[m
[31m-    - php: 7.0[m
[31m-    - php: hhvm[m
[31m-  allow_failures:[m
[31m-    - php: hhvm[m
[31m-[m
[31m-cache:[m
[31m-  directories:[m
[31m-    - $HOME/.composer/cache[m
[31m-[m
[31m-before_install:[m
[31m-  - composer self-update[m
[31m-  - mysql -e "create database IF NOT EXISTS test;" -uroot[m
[31m-  - psql -c 'DROP DATABASE IF EXISTS test;' -U postgres[m
[31m-  - psql -c 'create database test;' -U postgres[m
[31m-[m
[31m-install:[m
[31m-  - ./thinkphp/tests/script/install.sh[m
[31m-[m
[31m-script:[m
[31m-  ## LINT[m
[31m-  - find thinkphp ! -path "thinkphp/vendor/*" -type f -name \*.php -exec php -l {} \;[m
[31m-  ## PHP_CodeSniffer[m
[31m-  - thinkphp/vendor/bin/phpcs --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 --standard=PSR2 --ignore="thinkphp/vendor/*" thinkphp[m
[31m-  ## PHP Copy/Paste Detector[m
[31m-  - thinkphp/vendor/bin/phpcpd --verbose --exclude vendor thinkphp || true[m
[31m-  ## PHPLOC[m
[31m-  - thinkphp/vendor/bin/phploc --exclude vendor thinkphp[m
[31m-  ## PHPUNIT[m
[31m-  - thinkphp/vendor/bin/phpunit --coverage-clover=coverage.xml --configuration=thinkphp/phpunit.xml[m
[31m-[m
[31m-after_success:[m
[31m-  - bash <(curl -s https://codecov.io/bash)[m
[1mdiff --git a/README.md b/README.md[m
[1mindex cd2a920..5169fcc 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,4 +1,4 @@[m
[31m-thinkphp5.0.0 RC2[m
[32m+[m[32mThinkPHP 5.0.0 RC2[m
 ===============[m
 [m
 [![Build Status](https://img.shields.io/travis/top-think/think.svg)](https://travis-ci.org/top-think/think)[m
[1mdiff --git a/composer.json b/composer.json[m
[1mindex 9b35865..2abf3a0 100644[m
[1m--- a/composer.json[m
[1m+++ b/composer.json[m
[36m@@ -12,17 +12,10 @@[m
         }[m
     ],[m
     "require": {[m
[31m-        "php": ">=5.4.0"[m
[31m-    },[m
[31m-    "require-dev": {[m
[31m-        "johnkary/phpunit-speedtrap": "^1.0",[m
[31m-        "mikey179/vfsStream": "~1.6",[m
[31m-        "phploc/phploc": "*",[m
[31m-        "phpunit/phpunit": "4.8.*",[m
[31m-        "sebastian/phpcpd": "*",[m
[31m-        "squizlabs/php_codesniffer": "2.*"[m
[32m+[m[32m        "php": ">=5.4.0",[m
[32m+[m[32m        "topthink/framework": "*"[m
     },[m
     "config": {[m
[31m-        "vendor-dir": "thinkphp/vendor"[m
[32m+[m[32m        "vendor-dir": "type:wordpress-plugin"[m
     }[m
 }[m
[1mdiff --git a/thinkphp/.htaccess b/thinkphp/.htaccess[m
[1mdeleted file mode 100644[m
[1mindex 3418e55..0000000[m
[1m--- a/thinkphp/.htaccess[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-deny from all[m
\ No newline at end of file[m
[1mdiff --git a/thinkphp/base.php b/thinkphp/base.php[m
[1mdeleted file mode 100644[m
[1mindex 768dea1..0000000[m
[1m--- a/thinkphp/base.php[m
[1m+++ /dev/null[m
[36m@@ -1,61 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-// 开始运行时间和内存使用[m
[31m-define('START_TIME', microtime(true));[m
[31m-define('START_MEM', memory_get_usage());[m
[31m-//  版本信息[m
[31m-define('THINK_VERSION', '5.0.0 RC2');[m
[31m-// 系统常量[m
[31m-defined('DS') or define('DS', DIRECTORY_SEPARATOR);[m
[31m-defined('THINK_PATH') or define('THINK_PATH', dirname(__FILE__) . DS);[m
[31m-defined('LIB_PATH') or define('LIB_PATH', THINK_PATH . 'library' . DS);[m
[31m-defined('EXTEND_PATH') or define('EXTEND_PATH', THINK_PATH . 'extend' . DS);[m
[31m-defined('MODE_PATH') or define('MODE_PATH', THINK_PATH . 'mode' . DS); // 系统应用模式目录[m
[31m-defined('CORE_PATH') or define('CORE_PATH', LIB_PATH . 'think' . DS);[m
[31m-defined('TRAIT_PATH') or define('TRAIT_PATH', LIB_PATH . 'traits' . DS);[m
[31m-defined('APP_PATH') or define('APP_PATH', dirname($_SERVER['SCRIPT_FILENAME']) . DS);[m
[31m-defined('ROOT_PATH') or define('ROOT_PATH', dirname(APP_PATH) . DS);[m
[31m-defined('APP_NAMESPACE') or define('APP_NAMESPACE', 'app');[m
[31m-defined('COMMON_MODULE') or define('COMMON_MODULE', 'common');[m
[31m-defined('RUNTIME_PATH') or define('RUNTIME_PATH', ROOT_PATH . 'runtime' . DS);[m
[31m-defined('LOG_PATH') or define('LOG_PATH', RUNTIME_PATH . 'log' . DS);[m
[31m-defined('CACHE_PATH') or define('CACHE_PATH', RUNTIME_PATH . 'cache' . DS);[m
[31m-defined('TEMP_PATH') or define('TEMP_PATH', RUNTIME_PATH . 'temp' . DS);[m
[31m-defined('VENDOR_PATH') or define('VENDOR_PATH', THINK_PATH . 'vendor' . DS);[m
[31m-defined('EXT') or define('EXT', '.php');[m
[31m-defined('MODEL_LAYER') or define('MODEL_LAYER', 'model');[m
[31m-defined('VIEW_LAYER') or define('VIEW_LAYER', 'view');[m
[31m-defined('CONTROLLER_LAYER') or define('CONTROLLER_LAYER', 'controller');[m
[31m-defined('VALIDATE_LAYER') or define('VALIDATE_LAYER', 'validate');[m
[31m-defined('APP_MULTI_MODULE') or define('APP_MULTI_MODULE', true); // 是否多模块[m
[31m-defined('APP_HOOK') or define('APP_HOOK', false); // 是否开启HOOK[m
[31m-defined('ENV_PREFIX') or define('ENV_PREFIX', 'PHP_'); // 环境变量的配置前缀[m
[31m-defined('IS_API') or define('IS_API', false); // 是否API接口[m
[31m-defined('APP_AUTO_RUN') or define('APP_AUTO_RUN', true); // 是否自动运行[m
[31m-defined('APP_ROUTE_ON') or define('APP_ROUTE_ON', true); // 是否允许路由[m
[31m-defined('APP_ROUTE_MUST') or define('APP_ROUTE_MUST', true); // 是否严格检查路由[m
[31m-defined('CLASS_APPEND_SUFFIX') or define('CLASS_APPEND_SUFFIX', false); // 是否追加类名后缀[m
[31m-// 应用模式 默认为普通模式[m
[31m-defined('APP_MODE') or define('APP_MODE', function_exists('saeAutoLoader') ? 'sae' : 'common');[m
[31m-[m
[31m-// 环境常量[m
[31m-define('IS_CGI', strpos(PHP_SAPI, 'cgi') === 0 ? 1 : 0);[m
[31m-define('IS_WIN', strstr(PHP_OS, 'WIN') ? 1 : 0);[m
[31m-define('IS_MAC', strstr(PHP_OS, 'Darwin') ? 1 : 0);[m
[31m-define('IS_CLI', PHP_SAPI == 'cli' ? 1 : 0);[m
[31m-define('IS_AJAX', (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') ? true : false);[m
[31m-define('NOW_TIME', $_SERVER['REQUEST_TIME']);[m
[31m-define('REQUEST_METHOD', IS_CLI ? 'GET' : $_SERVER['REQUEST_METHOD']);[m
[31m-define('IS_GET', REQUEST_METHOD == 'GET' ? true : false);[m
[31m-define('IS_POST', REQUEST_METHOD == 'POST' ? true : false);[m
[31m-define('IS_PUT', REQUEST_METHOD == 'PUT' ? true : false);[m
[31m-define('IS_DELETE', REQUEST_METHOD == 'DELETE' ? true : false);[m
[1mdiff --git a/thinkphp/convention.php b/thinkphp/convention.php[m
[1mdeleted file mode 100644[m
[1mindex d4d9478..0000000[m
[1m--- a/thinkphp/convention.php[m
[1m+++ /dev/null[m
[36m@@ -1,202 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-return [[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 应用设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    // 应用模式状态[m
[31m-    'app_status'             => '',[m
[31m-    // 注册的根命名空间[m
[31m-    'root_namespace'         => [],[m
[31m-    // 扩展配置文件[m
[31m-    'extra_config_list'      => ['database', 'route', 'validate', 'auto'],[m
[31m-    // 扩展函数文件[m
[31m-    'extra_file_list'        => [THINK_PATH . 'helper' . EXT],[m
[31m-    // 默认输出类型[m
[31m-    'default_return_type'    => 'html',[m
[31m-    // 默认语言[m
[31m-    'default_lang'           => 'zh-cn',[m
[31m-    // response是否返回方式[m
[31m-    'response_return'        => false,[m
[31m-    // 默认AJAX 数据返回格式,可选JSON XML ...[m
[31m-    'default_ajax_return'    => 'JSON',[m
[31m-    // 默认JSONP格式返回的处理方法[m
[31m-    'default_jsonp_handler'  => 'jsonpReturn',[m
[31m-    // 默认JSONP处理方法[m
[31m-    'var_jsonp_handler'      => 'callback',[m
[31m-    // 默认时区[m
[31m-    'default_timezone'       => 'PRC',[m
[31m-    // 是否开启多语言[m
[31m-    'lang_switch_on'         => false,[m
[31m-    // 支持的多语言列表[m
[31m-    'lang_list'              => ['zh-cn'],[m
[31m-    // 语言变量[m
[31m-    'lang_detect_var'        => 'lang',[m
[31m-    // 语言cookie变量[m
[31m-    'lang_cookie_var'        => 'think_lang',[m
[31m-    // 默认全局过滤方法 用逗号分隔多个[m
[31m-    'default_filter'         => '',[m
[31m-    // 自动Response输出[m
[31m-    'response_auto_output'   => true,[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 模块设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    // 默认模块名[m
[31m-    'default_module'         => 'index',[m
[31m-    // 禁止访问模块[m
[31m-    'deny_module_list'       => [COMMON_MODULE, 'runtime'],[m
[31m-    // 默认控制器名[m
[31m-    'default_controller'     => 'Index',[m
[31m-    // 默认操作名[m
[31m-    'default_action'         => 'index',[m
[31m-    // 默认验证器[m
[31m-    'default_validate'       => '',[m
[31m-    // 默认的空控制器名[m
[31m-    'empty_controller'       => 'Error',[m
[31m-    // 操作方法后缀[m
[31m-    'action_suffix'          => '',[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | URL设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    // PATHINFO变量名 用于兼容模式[m
[31m-    'var_pathinfo'           => 's',[m
[31m-    // 兼容PATH_INFO获取[m
[31m-    'pathinfo_fetch'         => ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'],[m
[31m-    // pathinfo分隔符[m
[31m-    'pathinfo_depr'          => '/',[m
[31m-    // 获取当前页面地址的系统变量 默认为REQUEST_URI[m
[31m-    'url_request_uri'        => 'REQUEST_URI',[m
[31m-    // 基础URL路径[m
[31m-    'base_url'               => $_SERVER["SCRIPT_NAME"],[m
[31m-    // URL伪静态后缀[m
[31m-    'url_html_suffix'        => '.html',[m
[31m-    // URL普通方式参数 用于自动生成[m
[31m-    'url_common_param'       => false,[m
[31m-    //url禁止访问的后缀[m
[31m-    'url_deny_suffix'        => 'ico|png|gif|jpg',[m
[31m-    // 是否开启路由[m
[31m-    'url_route_on'           => true,[m
[31m-    // 是否强制使用路由[m
[31m-    'url_route_must'         => false,[m
[31m-    // URL模块映射[m
[31m-    'url_module_map'         => [],[m
[31m-    // 域名部署[m
[31m-    'url_domain_deploy'      => false,[m
[31m-    // 域名根，如.thinkphp.cn[m
[31m-    'url_domain_root'        => '',[m
[31m-    // 是否自动转换URL中的控制器名[m
[31m-    'url_controller_convert' => true,[m
[31m-    // 是否自动转换URL中的操作名[m
[31m-    'url_action_convert'     => true,[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 视图及模板设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    // 默认跳转页面对应的模板文件[m
[31m-    'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',[m
[31m-    'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 异常及错误设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    // 异常页面的模板文件[m
[31m-    'exception_tmpl'         => THINK_PATH . 'tpl' . DS . 'think_exception.tpl',[m
[31m-    // 异常处理忽略的错误类型，支持PHP所有的错误级别常量，多个级别可以用|运算法[m
[31m-    // 参考：http://php.net/manual/en/errorfunc.constants.php[m
[31m-    'exception_ignore_type'  => 0,[m
[31m-    // 错误显示信息,非调试模式有效[m
[31m-    'error_message'          => '页面错误！请稍后再试～',[m
[31m-    // 错误定向页面[m
[31m-    'error_page'             => '',[m
[31m-    // 显示错误信息[m
[31m-    'show_error_msg'         => false,[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 日志设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    'log'                    => [[m
[31m-        // 日志记录方式，支持 file socket trace sae[m
[31m-        'type' => 'File',[m
[31m-        // 日志保存目录[m
[31m-        'path' => LOG_PATH,[m
[31m-    ],[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 缓存设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    'cache'                  => [[m
[31m-        // 驱动方式[m
[31m-        'type'   => 'File',[m
[31m-        // 缓存保存目录[m
[31m-        'path'   => CACHE_PATH,[m
[31m-        // 缓存前缀[m
[31m-        'prefix' => '',[m
[31m-        // 缓存有效期 0表示永久缓存[m
[31m-        'expire' => 0,[m
[31m-    ],[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 会话设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    'session'                => [[m
[31m-        'id'             => '',[m
[31m-        // SESSION_ID的提交变量,解决flash上传跨域[m
[31m-        'var_session_id' => '',[m
[31m-        // SESSION 前缀[m
[31m-        'prefix'         => 'think',[m
[31m-        // 驱动方式 支持redis memcache memcached[m
[31m-        'type'           => '',[m
[31m-        // 是否自动开启 SESSION[m
[31m-        'auto_start'     => true,[m
[31m-    ],[m
[31m-[m
[31m-    // +----------------------------------------------------------------------[m
[31m-    // | 数据库设置[m
[31m-    // +----------------------------------------------------------------------[m
[31m-[m
[31m-    'db_fields_strict'       => true,[m
[31m-    'db_attr_case'           => \PDO::CASE_LOWER,[m
[31m-    'database'               => [[m
[31m-        // 数据库类型[m
[31m-        'type'        => 'mysql',[m
[31m-        // 数据库连接DSN配置[m
[31m-        'dsn'         => '',[m
[31m-        // 服务器地址[m
[31m-        'hostname'    => 'localhost',[m
[31m-        // 数据库名[m
[31m-        'database'    => '',[m
[31m-        // 数据库用户名[m
[31m-        'username'    => 'root',[m
[31m-        // 数据库密码[m
[31m-        'password'    => '',[m
[31m-        // 数据库连接端口[m
[31m-        'hostport'    => '',[m
[31m-        // 数据库连接参数[m
[31m-        'params'      => [],[m
[31m-        // 数据库编码默认采用utf8[m
[31m-        'charset'     => 'utf8',[m
[31m-        // 数据库表前缀[m
[31m-        'prefix'      => '',[m
[31m-        // 数据库调试模式[m
[31m-        'debug'       => false,[m
[31m-        // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)[m
[31m-        'deploy'      => 0,[m
[31m-        // 数据库读写是否分离 主从式有效[m
[31m-        'rw_separate' => false,[m
[31m-        // 读写分离后 主服务器数量[m
[31m-        'master_num'  => 1,[m
[31m-        // 指定从服务器序号[m
[31m-        'slave_no'    => '',[m
[31m-    ],[m
[31m-[m
[31m-];[m
[1mdiff --git a/thinkphp/extend/.gitignore b/thinkphp/extend/.gitignore[m
[1mdeleted file mode 100644[m
[1mindex c96a04f..0000000[m
[1m--- a/thinkphp/extend/.gitignore[m
[1m+++ /dev/null[m
[36m@@ -1,2 +0,0 @@[m
[31m-*[m
[31m-!.gitignore[m
\ No newline at end of file[m
[1mdiff --git a/thinkphp/helper.php b/thinkphp/helper.php[m
[1mdeleted file mode 100644[m
[1mindex bedb39f..0000000[m
[1m--- a/thinkphp/helper.php[m
[1m+++ /dev/null[m
[36m@@ -1,300 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-//------------------------[m
[31m-// ThinkPHP 助手函数[m
[31m-//-------------------------[m
[31m-[m
[31m-// 获取多语言变量[m
[31m-function L($name, $vars = [], $lang = '')[m
[31m-{[m
[31m-    return \think\Lang::get($name, $vars, $lang);[m
[31m-}[m
[31m-[m
[31m-// 获取配置参数[m
[31m-function C($name = '', $value = null, $range = '')[m
[31m-{[m
[31m-    if (is_null($value) && is_string($name)) {[m
[31m-        return \think\Config::get($name, $range);[m
[31m-    } else {[m
[31m-        return \think\Config::set($name, $value, $range);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-// 获取输入数据 支持默认值和过滤[m
[31m-function I($key, $default = null, $filter = '', $merge = false)[m
[31m-{[m
[31m-    if (0 === strpos($key, '?')) {[m
[31m-        $key = substr($key, 1);[m
[31m-        $has = '?';[m
[31m-    } else {[m
[31m-        $has = '';[m
[31m-    }[m
[31m-    if ($pos = strpos($key, '.')) {[m
[31m-        // 指定参数来源[m
[31m-        $method = substr($key, 0, $pos);[m
[31m-        if (in_array($method, ['get', 'post', 'put', 'delete', 'param', 'request', 'session', 'cookie', 'server', 'globals', 'env', 'path', 'file'])) {[m
[31m-            $key = substr($key, $pos + 1);[m
[31m-        } else {[m
[31m-            $method = 'param';[m
[31m-        }[m
[31m-    } else {[m
[31m-        // 默认为自动判断[m
[31m-        $method = 'param';[m
[31m-    }[m
[31m-    return \think\Input::$method($has . $key, $default, $filter, $merge);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 记录时间（微秒）和内存使用情况[m
[31m- * @param string $start 开始标签[m
[31m- * @param string $end 结束标签[m
[31m- * @param integer $dec 小数位[m
[31m- * @return mixed[m
[31m- */[m
[31m-function G($start, $end = '', $dec = 6)[m
[31m-{[m
[31m-    if ('' == $end) {[m
[31m-        \think\Debug::remark($start);[m
[31m-    } else {[m
[31m-        return 'm' == $dec ? \think\Debug::getRangeMem($start, $end) : \think\Debug::getRangeTime($start, $end, $dec);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 实例化一个没有模型文件的Model[m
[31m- * @param string $name Model名称 支持指定基础模型 例如 MongoModel:User[m
[31m- * @param string|null $tablePrefix 表前缀 null表示自动获取配置[m
[31m- * @param mixed $connection 数据库连接信息[m
[31m- * @return \Think\Model[m
[31m- */[m
[31m-function M($name = '', $tablePrefix = null, $connection = '')[m
[31m-{[m
[31m-    return \think\Loader::table($name, ['prefix' => $tablePrefix, 'connection' => $connection]);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 实例化Model[m
[31m- * @param string $name Model名称[m
[31m- * @param string $layer 业务层名称[m
[31m- * @return object[m
[31m- */[m
[31m-function D($name = '', $layer = MODEL_LAYER)[m
[31m-{[m
[31m-    return \think\Loader::model($name, $layer);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 实例化数据库类[m
[31m- * @param array $config 数据库配置参数[m
[31m- * @return object[m
[31m- */[m
[31m-function db($config = [])[m
[31m-{[m
[31m-    return \think\Db::connect($config);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 实例化控制器 格式：[模块/]控制器[m
[31m- * @param string $name 资源地址[m
[31m- * @param string $layer 控制层名称[m
[31m- * @return object[m
[31m- */[m
[31m-function A($name, $layer = CONTROLLER_LAYER)[m
[31m-{[m
[31m-    return \think\Loader::controller($name, $layer);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 调用模块的操作方法 参数格式 [模块/控制器/]操作[m
[31m- * @param string $url 调用地址[m
[31m- * @param string|array $vars 调用参数 支持字符串和数组[m
[31m- * @param string $layer 要调用的控制层名称[m
[31m- * @return mixed[m
[31m- */[m
[31m-function R($url, $vars = [], $layer = CONTROLLER_LAYER)[m
[31m-{[m
[31m-    return \think\Loader::action($url, $vars, $layer);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 导入所需的类库 同java的Import 本函数有缓存功能[m
[31m- * @param string $class 类库命名空间字符串[m
[31m- * @param string $baseUrl 起始路径[m
[31m- * @param string $ext 导入的文件扩展名[m
[31m- * @return boolean[m
[31m- */[m
[31m-function import($class, $baseUrl = '', $ext = EXT)[m
[31m-{[m
[31m-    return \think\Loader::import($class, $baseUrl, $ext);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 快速导入第三方框架类库 所有第三方框架的类库文件统一放到 系统的Vendor目录下面[m
[31m- * @param string $class 类库[m
[31m- * @param string $ext 类库后缀[m
[31m- * @return boolean[m
[31m- */[m
[31m-function vendor($class, $ext = EXT)[m
[31m-{[m
[31m-    return \think\Loader::import($class, VENDOR_PATH, $ext);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 快速导入Traits[m
[31m- * @param string $class trait库[m
[31m- * @param string $ext 类库后缀[m
[31m- * @return boolean[m
[31m- */[m
[31m-function T($class, $ext = EXT)[m
[31m-{[m
[31m-    return \think\Loader::import($class, TRAIT_PATH, $ext);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 抛出异常处理[m
[31m- *[m
[31m- * @param string  $msg  异常消息[m
[31m- * @param integer $code 异常代码 默认为0[m
[31m- *[m
[31m- * @throws \think\Exception[m
[31m- */[m
[31m-function E($msg, $code = 0)[m
[31m-{[m
[31m-    throw new \think\Exception($msg, $code);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 浏览器友好的变量输出[m
[31m- * @param mixed $var 变量[m
[31m- * @param boolean $echo 是否输出 默认为true 如果为false 则返回输出字符串[m
[31m- * @param string $label 标签 默认为空[m
[31m- * @return void|string[m
[31m- */[m
[31m-function dump($var, $echo = true, $label = null)[m
[31m-{[m
[31m-    return \think\Debug::dump($var, $echo, $label);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 渲染输出Widget[m
[31m- * @param string $name Widget名称[m
[31m- * @param array $data 传人的参数[m
[31m- * @return mixed[m
[31m- */[m
[31m-function W($name, $data = [])[m
[31m-{[m
[31m-    return \think\Loader::action($name, $data, 'widget');[m
[31m-}[m
[31m-[m
[31m-function U($url = '', $vars = '', $suffix = true, $domain = false)[m
[31m-{[m
[31m-    return \think\Url::build($url, $vars, $suffix, $domain);[m
[31m-}[m
[31m-[m
[31m-function session($name, $value = '', $prefix = null)[m
[31m-{[m
[31m-    if (is_array($name)) {[m
[31m-        // 初始化[m
[31m-        \think\Session::init($name);[m
[31m-    } elseif (is_null($name)) {[m
[31m-        // 清除[m
[31m-        \think\Session::clear($value);[m
[31m-    } elseif ('' === $value) {[m
[31m-        // 判断或获取[m
[31m-        return 0 === strpos($name, '?') ? \think\Session::has(substr($name, 1), $prefix) : \think\Session::get($name, $prefix);[m
[31m-    } elseif (is_null($value)) {[m
[31m-        // 删除session[m
[31m-        return \think\Session::delete($name, $prefix);[m
[31m-    } else {[m
[31m-        // 设置session[m
[31m-        return \think\Session::set($name, $value, $prefix);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-function cookie($name, $value = '')[m
[31m-{[m
[31m-    if (is_array($name)) {[m
[31m-        // 初始化[m
[31m-        \think\Cookie::init($name);[m
[31m-    } elseif (is_null($name)) {[m
[31m-        // 清除[m
[31m-        \think\Cookie::clear($value);[m
[31m-    } elseif ('' === $value) {[m
[31m-        // 获取[m
[31m-        return \think\Cookie::get($name);[m
[31m-    } elseif (is_null($value)) {[m
[31m-        // 删除session[m
[31m-        return \think\Cookie::delete($name);[m
[31m-    } else {[m
[31m-        // 设置session[m
[31m-        return \think\Cookie::set($name, $value);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 缓存管理[m
[31m- * @param mixed $name 缓存名称，如果为数组表示进行缓存设置[m
[31m- * @param mixed $value 缓存值[m
[31m- * @param mixed $options 缓存参数[m
[31m- * @return mixed[m
[31m- */[m
[31m-function S($name, $value = '', $options = null)[m
[31m-{[m
[31m-    if (is_array($options)) {[m
[31m-        // 缓存操作的同时初始化[m
[31m-        \think\Cache::connect($options);[m
[31m-    } elseif (is_array($name)) {[m
[31m-        // 缓存初始化[m
[31m-        return \think\Cache::connect($name);[m
[31m-    }[m
[31m-    if ('' === $value) {[m
[31m-        // 获取缓存[m
[31m-        return \think\Cache::get($name);[m
[31m-    } elseif (is_null($value)) {[m
[31m-        // 删除缓存[m
[31m-        return \think\Cache::rm($name);[m
[31m-    } else {[m
[31m-        // 缓存数据[m
[31m-        if (is_array($options)) {[m
[31m-            $expire = isset($options['expire']) ? $options['expire'] : null; //修复查询缓存无法设置过期时间[m
[31m-        } else {[m
[31m-            $expire = is_numeric($options) ? $options : null; //默认快捷缓存设置过期时间[m
[31m-        }[m
[31m-        return \think\Cache::set($name, $value, $expire);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 记录日志信息[m
[31m- * @param mixed $log log信息 支持字符串和数组[m
[31m- * @param string $level 日志级别[m
[31m- * @return void|array[m
[31m- */[m
[31m-function trace($log = '[think]', $level = 'log')[m
[31m-{[m
[31m-    if ('[think]' === $log) {[m
[31m-        return \think\Log::getLog();[m
[31m-    } else {[m
[31m-        \think\Log::record($log, $level);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * 渲染模板输出[m
[31m- * @param string $template 模板文件[m
[31m- * @param array $vars 模板变量[m
[31m- * @return string[m
[31m- */[m
[31m-function V($template = '', $vars = [])[m
[31m-{[m
[31m-    return \think\View::instance(\think\Config::get())->fetch($template, $vars);[m
[31m-}[m
[1mdiff --git a/thinkphp/lang/.gitignore b/thinkphp/lang/.gitignore[m
[1mdeleted file mode 100644[m
[1mindex c96a04f..0000000[m
[1m--- a/thinkphp/lang/.gitignore[m
[1m+++ /dev/null[m
[36m@@ -1,2 +0,0 @@[m
[31m-*[m
[31m-!.gitignore[m
\ No newline at end of file[m
[1mdiff --git a/thinkphp/library/think/App.php b/thinkphp/library/think/App.php[m
[1mdeleted file mode 100644[m
[1mindex f886ea3..0000000[m
[1m--- a/thinkphp/library/think/App.php[m
[1m+++ /dev/null[m
[36m@@ -1,388 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-/**[m
[31m- * App 应用管理[m
[31m- * @author  liu21st <liu21st@gmail.com>[m
[31m- */[m
[31m-class App[m
[31m-{[m
[31m-[m
[31m-    // 应用调度机制[m
[31m-    private static $dispatch = [];[m
[31m-[m
[31m-    /**[m
[31m-     * 执行应用程序[m
[31m-     * @access public[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function run()[m
[31m-    {[m
[31m-        // 初始化应用（公共模块）[m
[31m-        self::initModule(COMMON_MODULE, Config::get());[m
[31m-[m
[31m-        // 获取配置参数[m
[31m-        $config = Config::get();[m
[31m-[m
[31m-        // 注册根命名空间[m
[31m-        if (!empty($config['root_namespace'])) {[m
[31m-            Loader::addNamespace($config['root_namespace']);[m
[31m-        }[m
[31m-[m
[31m-        // 加载额外文件[m
[31m-        if (!empty($config['extra_file_list'])) {[m
[31m-            foreach ($config['extra_file_list'] as $file) {[m
[31m-                $file = strpos($file, '.') ? $file : APP_PATH . $file . EXT;[m
[31m-                if (is_file($file)) {[m
[31m-                    include_once $file;[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        // 设置系统时区[m
[31m-        date_default_timezone_set($config['default_timezone']);[m
[31m-[m
[31m-        // 监听app_init[m
[31m-        APP_HOOK && Hook::listen('app_init');[m
[31m-[m
[31m-        // 开启多语言机制[m
[31m-        if ($config['lang_switch_on']) {[m
[31m-            // 获取当前语言[m
[31m-            defined('LANG_SET') or define('LANG_SET', Lang::range());[m
[31m-            // 加载系统语言包[m
[31m-            Lang::load(THINK_PATH . 'lang' . DS . LANG_SET . EXT);[m
[31m-            if (!APP_MULTI_MODULE) {[m
[31m-                Lang::load(APP_PATH . 'lang' . DS . LANG_SET . EXT);[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (empty(self::$dispatch['type'])) {[m
[31m-            // 未指定调度类型 则进行URL路由检测[m
[31m-            self::route($config);[m
[31m-        }[m
[31m-        // 记录路由信息[m
[31m-        APP_DEBUG && Log::record('[ ROUTE ] ' . var_export(self::$dispatch, true), 'info');[m
[31m-        // 监听app_begin[m
[31m-        APP_HOOK && Hook::listen('app_begin');[m
[31m-[m
[31m-        // 根据类型调度[m
[31m-        switch (self::$dispatch['type']) {[m
[31m-            case 'redirect':[m
[31m-                // 执行重定向跳转[m
[31m-                header('Location: ' . self::$dispatch['url'], true, self::$dispatch['status']);[m
[31m-                break;[m
[31m-            case 'module':[m
[31m-                // 模块/控制器/操作[m
[31m-                $data = self::module(self::$dispatch['module'], $config);[m
[31m-                break;[m
[31m-            case 'controller':[m
[31m-                // 执行控制器操作[m
[31m-                $data = Loader::action(self::$dispatch['controller'], self::$dispatch['params']);[m
[31m-                break;[m
[31m-            case 'method':[m
[31m-                // 执行回调方法[m
[31m-                $data = self::invokeMethod(self::$dispatch['method'], self::$dispatch['params']);[m
[31m-                break;[m
[31m-            case 'function':[m
[31m-                // 规则闭包[m
[31m-                $data = self::invokeFunction(self::$dispatch['function'], self::$dispatch['params']);[m
[31m-                break;[m
[31m-            default:[m
[31m-                throw new Exception('dispatch type not support', 10008);[m
[31m-        }[m
[31m-        // 监听app_end[m
[31m-        APP_HOOK && Hook::listen('app_end', $data);[m
[31m-        // 输出数据到客户端[m
[31m-        if (Config::get('response_auto_output')) {[m
[31m-            // 自动响应输出[m
[31m-            return Response::send($data, Response::type(), Config::get('response_return'));[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 执行函数或者闭包方法 支持参数调用[m
[31m-    public static function invokeFunction($function, $vars = [])[m
[31m-    {[m
[31m-        $reflect = new \ReflectionFunction($function);[m
[31m-        $args    = self::bindParams($reflect, $vars);[m
[31m-        // 记录执行信息[m
[31m-        APP_DEBUG && Log::record('[ RUN ] ' . $reflect->getFileName() . '[ ' . var_export($vars, true) . ' ]', 'info');[m
[31m-        return $reflect->invokeArgs($args);[m
[31m-    }[m
[31m-[m
[31m-    // 调用反射执行类的方法 支持参数绑定[m
[31m-    public static function invokeMethod($method, $vars = [])[m
[31m-    {[m
[31m-        if (empty($vars)) {[m
[31m-            // 自动获取请求变量[m
[31m-            switch (REQUEST_METHOD) {[m
[31m-                case 'POST':[m
[31m-                    $vars = array_merge($_GET, $_POST);[m
[31m-                    break;[m
[31m-                case 'PUT':[m
[31m-                    parse_str(file_get_contents('php://input'), $vars);[m
[31m-                    $vars = array_merge($_GET, $vars);[m
[31m-                    break;[m
[31m-                default:[m
[31m-                    $vars = $_GET;[m
[31m-            }[m
[31m-        }[m
[31m-        if (is_array($method)) {[m
[31m-            $class   = is_object($method[0]) ? $method[0] : new $method[0];[m
[31m-            $reflect = new \ReflectionMethod($class, $method[1]);[m
[31m-        } else {[m
[31m-            // 静态方法[m
[31m-            $reflect = new \ReflectionMethod($method);[m
[31m-        }[m
[31m-        $args = self::bindParams($reflect, $vars);[m
[31m-        // 记录执行信息[m
[31m-        APP_DEBUG && Log::record('[ RUN ] ' . $reflect->getFileName() . '[ ' . var_export($args, true) . ' ]', 'info');[m
[31m-        return $reflect->invokeArgs(isset($class) ? $class : null, $args);[m
[31m-    }[m
[31m-[m
[31m-    // 绑定参数[m
[31m-    private static function bindParams($reflect, $vars)[m
[31m-    {[m
[31m-        $args = [];[m
[31m-        // 判断数组类型 数字数组时按顺序绑定参数[m
[31m-        $type = key($vars) === 0 ? 1 : 0;[m
[31m-        if ($reflect->getNumberOfParameters() > 0) {[m
[31m-            $params = $reflect->getParameters();[m
[31m-            foreach ($params as $param) {[m
[31m-                $name = $param->getName();[m
[31m-                if (1 == $type && !empty($vars)) {[m
[31m-                    $args[] = array_shift($vars);[m
[31m-                } elseif (0 == $type && isset($vars[$name])) {[m
[31m-                    $args[] = $vars[$name];[m
[31m-                } elseif ($param->isDefaultValueAvailable()) {[m
[31m-                    $args[] = $param->getDefaultValue();[m
[31m-                } else {[m
[31m-                    throw new Exception('method param miss:' . $name, 10004);[m
[31m-                }[m
[31m-            }[m
[31m-            // 全局过滤[m
[31m-            array_walk_recursive($args, 'think\\Input::filterExp');[m
[31m-        }[m
[31m-        return $args;[m
[31m-    }[m
[31m-[m
[31m-    // 执行 模块/控制器/操作[m
[31m-    private static function module($result, $config)[m
[31m-    {[m
[31m-        if (APP_MULTI_MODULE) {[m
[31m-            // 多模块部署[m
[31m-            $module = strtolower($result[0] ?: $config['default_module']);[m
[31m-            if ($maps = $config['url_module_map']) {[m
[31m-                if (isset($maps[$module])) {[m
[31m-                    // 记录当前别名[m
[31m-                    define('MODULE_ALIAS', $module);[m
[31m-                    // 获取实际的项目名[m
[31m-                    $module = $maps[MODULE_ALIAS];[m
[31m-                } elseif (array_search($module, $maps)) {[m
[31m-                    // 禁止访问原始项目[m
[31m-                    $module = '';[m
[31m-                }[m
[31m-            }[m
[31m-            // 获取模块名称[m
[31m-            define('MODULE_NAME', strip_tags($module));[m
[31m-[m
[31m-            // 模块初始化[m
[31m-            if (MODULE_NAME && !in_array(MODULE_NAME, $config['deny_module_list']) && is_dir(APP_PATH . MODULE_NAME)) {[m
[31m-                define('MODULE_PATH', APP_PATH . MODULE_NAME . DS);[m
[31m-                define('VIEW_PATH', MODULE_PATH . VIEW_LAYER . DS);[m
[31m-                // 初始化模块[m
[31m-                self::initModule(MODULE_NAME, $config);[m
[31m-            } else {[m
[31m-                throw new Exception('module [ ' . MODULE_NAME . ' ] not exists ', 10005);[m
[31m-            }[m
[31m-        } else {[m
[31m-            // 单一模块部署[m
[31m-            define('MODULE_NAME', '');[m
[31m-            define('MODULE_PATH', APP_PATH);[m
[31m-            define('VIEW_PATH', MODULE_PATH . VIEW_LAYER . DS);[m
[31m-        }[m
[31m-[m
[31m-        // 获取控制器名[m
[31m-        $controllerName = strip_tags($result[1] ?: Config::get('default_controller'));[m
[31m-        defined('CONTROLLER_NAME') or define('CONTROLLER_NAME', Config::get('url_controller_convert') ? strtolower($controllerName) : $controllerName);[m
[31m-[m
[31m-        // 获取操作名[m
[31m-        $actionName = strip_tags($result[2] ?: Config::get('default_action'));[m
[31m-        defined('ACTION_NAME') or define('ACTION_NAME', Config::get('url_action_convert') ? strtolower($actionName) : $actionName);[m
[31m-[m
[31m-        // 执行操作[m
[31m-        if (!preg_match('/^[A-Za-z](\/|\.|\w)*$/', CONTROLLER_NAME)) {[m
[31m-            // 安全检测[m
[31m-            throw new Exception('illegal controller name:' . CONTROLLER_NAME, 10000);[m
[31m-        }[m
[31m-        $instance = Loader::controller(CONTROLLER_NAME, '', Config::get('empty_controller'));[m
[31m-        // 获取当前操作名[m
[31m-        $action = ACTION_NAME . Config::get('action_suffix');[m
[31m-[m
[31m-        try {[m
[31m-            // 操作方法开始监听[m
[31m-            $call = [$instance, $action];[m
[31m-            APP_HOOK && Hook::listen('action_begin', $call);[m
[31m-            if (!preg_match('/^[A-Za-z](\w)*$/', $action)) {[m
[31m-                // 非法操作[m
[31m-                throw new Exception('illegal action name :' . ACTION_NAME, 10001);[m
[31m-            }[m
[31m-            // 执行操作方法[m
[31m-            $data = self::invokeMethod($call);[m
[31m-        } catch (\ReflectionException $e) {[m
[31m-            // 操作不存在[m
[31m-            if (method_exists($instance, '_empty')) {[m
[31m-                $method = new \ReflectionMethod($instance, '_empty');[m
[31m-                $data   = $method->invokeArgs($instance, [$action, '']);[m
[31m-                APP_DEBUG && Log::record('[ RUN ] ' . $method->getFileName(), 'info');[m
[31m-            } else {[m
[31m-                throw new Exception('method [ ' . (new \ReflectionClass($instance))->getName() . '->' . $action . ' ] not exists ', 10002);[m
[31m-            }[m
[31m-        }[m
[31m-        return $data;[m
[31m-    }[m
[31m-[m
[31m-    // 初始化模块[m
[31m-    private static function initModule($module, $config)[m
[31m-    {[m
[31m-        // 定位模块目录[m
[31m-        $module = (COMMON_MODULE == $module || !APP_MULTI_MODULE) ? '' : $module . DS;[m
[31m-[m
[31m-        // 加载初始化文件[m
[31m-        if (is_file(APP_PATH . $module . 'init' . EXT)) {[m
[31m-            include APP_PATH . $module . 'init' . EXT;[m
[31m-        } else {[m
[31m-            $path = APP_PATH . $module;[m
[31m-            // 加载模块配置[m
[31m-            $config = Config::load(APP_PATH . $module . 'config' . EXT);[m
[31m-[m
[31m-            // 加载应用状态配置[m
[31m-            if ($config['app_status']) {[m
[31m-                $config = Config::load(APP_PATH . $module . $config['app_status'] . EXT);[m
[31m-            }[m
[31m-[m
[31m-            // 读取扩展配置文件[m
[31m-            if ($config['extra_config_list']) {[m
[31m-                foreach ($config['extra_config_list'] as $name => $file) {[m
[31m-                    $filename = $path . $file . EXT;[m
[31m-                    Config::load($filename, is_string($name) ? $name : pathinfo($filename, PATHINFO_FILENAME));[m
[31m-                }[m
[31m-            }[m
[31m-[m
[31m-            // 加载别名文件[m
[31m-            if (is_file($path . 'alias' . EXT)) {[m
[31m-                Loader::addMap(include $path . 'alias' . EXT);[m
[31m-            }[m
[31m-[m
[31m-            // 加载行为扩展文件[m
[31m-            if (APP_HOOK && is_file($path . 'tags' . EXT)) {[m
[31m-                Hook::import(include $path . 'tags' . EXT);[m
[31m-            }[m
[31m-[m
[31m-            // 加载公共文件[m
[31m-            if (is_file($path . 'common' . EXT)) {[m
[31m-                include $path . 'common' . EXT;[m
[31m-            }[m
[31m-[m
[31m-            // 加载当前模块语言包[m
[31m-            if ($config['lang_switch_on'] && $module) {[m
[31m-                Lang::load($path . 'lang' . DS . LANG_SET . EXT);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 分析 PATH_INFO[m
[31m-    private static function parsePathinfo(array $config)[m
[31m-    {[m
[31m-        if (isset($_GET[$config['var_pathinfo']])) {[m
[31m-            // 判断URL里面是否有兼容模式参数[m
[31m-            $_SERVER['PATH_INFO'] = $_GET[$config['var_pathinfo']];[m
[31m-            unset($_GET[$config['var_pathinfo']]);[m
[31m-        } elseif (IS_CLI) {[m
[31m-            // CLI模式下 index.php module/controller/action/params/...[m
[31m-            $_SERVER['PATH_INFO'] = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : '';[m
[31m-        }[m
[31m-[m
[31m-        // 监听path_info[m
[31m-        APP_HOOK && Hook::listen('path_info');[m
[31m-        // 分析PATHINFO信息[m
[31m-        if (!isset($_SERVER['PATH_INFO'])) {[m
[31m-            foreach ($config['pathinfo_fetch'] as $type) {[m
[31m-                if (!empty($_SERVER[$type])) {[m
[31m-                    $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type], $_SERVER['SCRIPT_NAME'])) ?[m
[31m-                    substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type];[m
[31m-                    break;[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * URL路由检测（根据PATH_INFO)[m
[31m-     * @access public[m
[31m-     * @param  array $config[m
[31m-     * @throws Exception[m
[31m-     */[m
[31m-    public static function route(array $config)[m
[31m-    {[m
[31m-        // 解析PATH_INFO[m
[31m-        self::parsePathinfo($config);[m
[31m-[m
[31m-        if (empty($_SERVER['PATH_INFO'])) {[m
[31m-            $_SERVER['PATH_INFO'] = '';[m
[31m-            define('__INFO__', '');[m
[31m-            define('__EXT__', '');[m
[31m-        } else {[m
[31m-            $_SERVER['PATH_INFO'] = trim($_SERVER['PATH_INFO'], '/');[m
[31m-            define('__INFO__', $_SERVER['PATH_INFO']);[m
[31m-            // URL后缀[m
[31m-            define('__EXT__', strtolower(pathinfo($_SERVER['PATH_INFO'], PATHINFO_EXTENSION)));[m
[31m-            // 检测URL禁用后缀[m
[31m-            if ($config['url_deny_suffix'] && preg_match('/\.(' . $config['url_deny_suffix'] . ')$/i', __INFO__)) {[m
[31m-                throw new Exception('url suffix deny');[m
[31m-            }[m
[31m-            // 去除正常的URL后缀[m
[31m-            $_SERVER['PATH_INFO'] = preg_replace($config['url_html_suffix'] ? '/\.(' . trim($config['url_html_suffix'], '.') . ')$/i' : '/\.' . __EXT__ . '$/i', '', __INFO__);[m
[31m-        }[m
[31m-[m
[31m-        $depr   = $config['pathinfo_depr'];[m
[31m-        $result = false;[m
[31m-        // 路由检测[m
[31m-        if (APP_ROUTE_ON && !empty($config['url_route_on'])) {[m
[31m-            // 开启路由[m
[31m-            if (!empty($config['route'])) {[m
[31m-                // 注册路由定义文件[m
[31m-                Route::register($config['route']);[m
[31m-            }[m
[31m-            // 路由检测（根据路由定义返回不同的URL调度）[m
[31m-            $result = Route::check($_SERVER['PATH_INFO'], $depr, !IS_CLI ? $config['url_domain_deploy'] : false);[m
[31m-            if (APP_ROUTE_MUST && false === $result && $config['url_route_must']) {[m
[31m-                // 路由无效[m
[31m-                throw new Exception('route not define ');[m
[31m-            }[m
[31m-        }[m
[31m-        if (false === $result) {[m
[31m-            // 路由无效默认分析为模块/控制器/操作/参数...方式URL[m
[31m-            $result = Route::parseUrl($_SERVER['PATH_INFO'], $depr);[m
[31m-        }[m
[31m-        //保证$_REQUEST正常取值[m
[31m-        $_REQUEST = array_merge($_POST, $_GET, $_COOKIE);[m
[31m-        // 注册调度机制[m
[31m-        self::dispatch($result);[m
[31m-    }[m
[31m-[m
[31m-    // 指定应用调度[m
[31m-    public static function dispatch($dispatch)[m
[31m-    {[m
[31m-        self::$dispatch = $dispatch;[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Build.php b/thinkphp/library/think/Build.php[m
[1mdeleted file mode 100644[m
[1mindex 5b7306c..0000000[m
[1m--- a/thinkphp/library/think/Build.php[m
[1m+++ /dev/null[m
[36m@@ -1,153 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-namespace think;[m
[31m-[m
[31m-class Build[m
[31m-{[m
[31m-    public static function run($build)[m
[31m-    {[m
[31m-        // 锁定[m
[31m-        $lockfile = APP_PATH . 'build.lock';[m
[31m-        if (is_writable($lockfile)) {[m
[31m-            return;[m
[31m-        } elseif (!touch($lockfile)) {[m
[31m-            throw new Exception('应用目录[' . APP_PATH . ']不可写，目录无法自动生成！<BR>请手动生成项目目录~', 10006);[m
[31m-        }[m
[31m-        foreach ($build as $module => $list) {[m
[31m-            if ('__dir__' == $module) {[m
[31m-                // 创建目录列表[m
[31m-                self::buildDir($list);[m
[31m-            } elseif ('__file__' == $module) {[m
[31m-                // 创建文件列表[m
[31m-                self::buildFile($list);[m
[31m-            } else {[m
[31m-                // 创建模块[m
[31m-                self::buildModule($module, $list);[m
[31m-            }[m
[31m-        }[m
[31m-        // 解除锁定[m
[31m-        unlink($lockfile);[m
[31m-    }[m
[31m-[m
[31m-    // 创建目录[m
[31m-    protected static function buildDir($list)[m
[31m-    {[m
[31m-        foreach ($list as $dir) {[m
[31m-            if (!is_dir(APP_PATH . $dir)) {[m
[31m-                // 创建目录[m
[31m-                mkdir(APP_PATH . $dir, 0777, true);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 创建文件[m
[31m-    protected static function buildFile($list)[m
[31m-    {[m
[31m-        foreach ($list as $file) {[m
[31m-            if (!is_dir(APP_PATH . dirname($file))) {[m
[31m-                // 创建目录[m
[31m-                mkdir(APP_PATH . dirname($file), 0777, true);[m
[31m-            }[m
[31m-            if (!is_file(APP_PATH . $file)) {[m
[31m-                file_put_contents(APP_PATH . $file, 'php' == pathinfo($file, PATHINFO_EXTENSION) ? "<?php\n" : '');[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 创建模块[m
[31m-    protected static function buildModule($module, $list)[m
[31m-    {[m
[31m-        $module = APP_MULTI_MODULE ? $module : '';[m
[31m-        if (!is_dir(APP_PATH . $module)) {[m
[31m-            // 创建模块目录[m
[31m-            mkdir(APP_PATH . $module);[m
[31m-        }[m
[31m-        if (basename(RUNTIME_PATH) != $module) {[m
[31m-            // 创建配置文件和公共文件[m
[31m-            self::buildCommon($module);[m
[31m-            // 创建模块的默认页面[m
[31m-            self::buildHello($module);[m
[31m-        }[m
[31m-        // 创建子目录和文件[m
[31m-        foreach ($list as $path => $file) {[m
[31m-            $modulePath = APP_PATH . $module . DS;[m
[31m-            if ('__dir__' == $path) {[m
[31m-                // 生成子目录[m
[31m-                foreach ($file as $dir) {[m
[31m-                    if (!is_dir($modulePath . $dir)) {[m
[31m-                        // 创建目录[m
[31m-                        mkdir($modulePath . $dir, 0777, true);[m
[31m-                    }[m
[31m-                }[m
[31m-            } elseif ('__file__' == $path) {[m
[31m-                // 生成（空白）文件[m
[31m-                foreach ($file as $name) {[m
[31m-                    if (!is_file($modulePath . $name)) {[m
[31m-                        file_put_contents($modulePath . $name, 'php' == pathinfo($name, PATHINFO_EXTENSION) ? "<?php\n" : '');[m
[31m-                    }[m
[31m-                }[m
[31m-            } else {[m
[31m-                // 生成相关MVC文件[m
[31m-                foreach ($file as $val) {[m
[31m-                    $filename  = $modulePath . $path . DS . $val . (CLASS_APPEND_SUFFIX ? ucfirst($path) : '') . EXT;[m
[31m-                    $namespace = APP_NAMESPACE . '\\' . ($module ? $module . '\\' : '') . $path;[m
[31m-                    $class     = $val . (CLASS_APPEND_SUFFIX ? ucfirst($path) : '');[m
[31m-                    switch ($path) {[m
[31m-                        case CONTROLLER_LAYER:    // 控制器[m
[31m-                            $content = "<?php\nnamespace {$namespace};\n\nclass {$class}\n{\n\n}";[m
[31m-                            break;[m
[31m-                        case MODEL_LAYER:    // 模型[m
[31m-                            $content = "<?php\nnamespace {$namespace};\n\nuse think\Model;\n\nclass {$class} extends Model\n{\n\n}";[m
[31m-                            break;[m
[31m-                        case VIEW_LAYER:    // 视图[m
[31m-                            $filename = $modulePath . $path . DS . $val . '.html';[m
[31m-                            if (!is_dir(dirname($filename))) {[m
[31m-                                // 创建目录[m
[31m-                                mkdir(dirname($filename), 0777, true);[m
[31m-                            }[m
[31m-                            $content = '';[m
[31m-                            break;[m
[31m-                        default:[m
[31m-                            // 其他文件[m
[31m-                            $content = "<?php\nnamespace {$namespace};\n\nclass {$class}\n{\n\n}";[m
[31m-                    }[m
[31m-[m
[31m-                    if (!is_file($filename)) {[m
[31m-                        file_put_contents($filename, $content);[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 创建欢迎页面[m
[31m-    protected static function buildHello($module)[m
[31m-    {[m
[31m-        $filename = APP_PATH . ($module ? $module . DS : '') . CONTROLLER_LAYER . DS . 'Index' . (CLASS_APPEND_SUFFIX ? ucfirst(CONTROLLER_LAYER) : '') . EXT;[m
[31m-        if (!is_file($filename)) {[m
[31m-            $content = file_get_contents(THINK_PATH . 'tpl' . DS . 'default_index.tpl');[m
[31m-            $content = str_replace(['{$app}', '{$module}', '{layer}', '{$suffix}'], [APP_NAMESPACE, $module ? $module . '\\' : '', CONTROLLER_LAYER, CLASS_APPEND_SUFFIX ? ucfirst(CONTROLLER_LAYER) : ''], $content);[m
[31m-            if (!is_dir(dirname($filename))) {[m
[31m-                mkdir(dirname($filename), 0777, true);[m
[31m-            }[m
[31m-            file_put_contents($filename, $content);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 创建模块公共文件[m
[31m-    protected static function buildCommon($module)[m
[31m-    {[m
[31m-        $filename = APP_PATH . ($module ? $module . DS : '') . 'config.php';[m
[31m-        if (!is_file($filename)) {[m
[31m-            file_put_contents($filename, "<?php\nreturn [\n\n];");[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Cache.php b/thinkphp/library/think/Cache.php[m
[1mdeleted file mode 100644[m
[1mindex 333db04..0000000[m
[1m--- a/thinkphp/library/think/Cache.php[m
[1m+++ /dev/null[m
[36m@@ -1,65 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-/**[m
[31m- * Class Cache[m
[31m- * [m
[31m- * @package think[m
[31m- * @method static mixed get() get(string $name)[m
[31m- * @method static bool set() set(string $name, mixed $value, mixed $expire = null)[m
[31m- * @method static bool rm() rm(string $name, bool $expire = false)[m
[31m- * @method static bool clear() clear()[m
[31m- */[m
[31m-class Cache[m
[31m-{[m
[31m-    protected static $instance = [];[m
[31m-    public static $readTimes   = 0;[m
[31m-    public static $writeTimes  = 0;[m
[31m-[m
[31m-    /**[m
[31m-     * 操作句柄[m
[31m-     * @var object[m
[31m-     * @access protected[m
[31m-     */[m
[31m-    protected static $handler = null;[m
[31m-[m
[31m-    /**[m
[31m-     * 连接缓存[m
[31m-     * @access public[m
[31m-     * @param array $options  配置数组[m
[31m-     * @return object[m
[31m-     */[m
[31m-    public static function connect(array $options = [])[m
[31m-    {[m
[31m-        $md5 = md5(serialize($options));[m
[31m-        if (!isset(self::$instance[$md5])) {[m
[31m-            $type  = !empty($options['type']) ? $options['type'] : 'File';[m
[31m-            $class = (!empty($options['namespace']) ? $options['namespace'] : '\\think\\cache\\driver\\') . ucwords($type);[m
[31m-            unset($options['type']);[m
[31m-            self::$instance[$md5] = new $class($options);[m
[31m-            // 记录初始化信息[m
[31m-            APP_DEBUG && Log::record('[ CACHE ] INIT ' . $type . ':' . var_export($options, true), 'info');[m
[31m-        }[m
[31m-        self::$handler = self::$instance[$md5];[m
[31m-        return self::$handler;[m
[31m-    }[m
[31m-[m
[31m-    public static function __callStatic($method, $params)[m
[31m-    {[m
[31m-        if (is_null(self::$handler)) {[m
[31m-            // 自动初始化缓存[m
[31m-            self::connect(Config::get('cache'));[m
[31m-        }[m
[31m-        return call_user_func_array([self::$handler, $method], $params);[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Config.php b/thinkphp/library/think/Config.php[m
[1mdeleted file mode 100644[m
[1mindex 7f4f829..0000000[m
[1m--- a/thinkphp/library/think/Config.php[m
[1m+++ /dev/null[m
[36m@@ -1,173 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Config[m
[31m-{[m
[31m-    // 配置参数[m
[31m-    private static $config = [];[m
[31m-    // 参数作用域[m
[31m-    private static $range = '_sys_';[m
[31m-[m
[31m-    // 设定配置参数的作用域[m
[31m-    public static function range($range)[m
[31m-    {[m
[31m-        self::$range = $range;[m
[31m-        if (!isset(self::$config[$range])) {[m
[31m-            self::$config[$range] = [];[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 解析配置文件或内容[m
[31m-     * @param string $config 配置文件路径或内容[m
[31m-     * @param string $type 配置解析类型[m
[31m-     * @param string $range  作用域[m
[31m-     */[m
[31m-    public static function parse($config, $type = '', $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        if (empty($type)) {[m
[31m-            $type = pathinfo($config, PATHINFO_EXTENSION);[m
[31m-        }[m
[31m-        $class = (false === strpos($type, '\\')) ? '\\think\\config\\driver\\' . ucwords($type) : $type;[m
[31m-        self::set((new $class())->parse($config), '', $range);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 加载配置文件（PHP格式）[m
[31m-     * @param string $file 配置文件名[m
[31m-     * @param string $name 配置名（如设置即表示二级配置）[m
[31m-     * @param string $range  作用域[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function load($file, $name = '', $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        if (!isset(self::$config[$range])) {[m
[31m-            self::$config[$range] = [];[m
[31m-        }[m
[31m-        // 记录加载信息[m
[31m-        APP_DEBUG && Log::record('[ CONFIG ] ' . $file, 'info');[m
[31m-        return is_file($file) ? self::set(include $file, $name, $range) : self::$config[$range];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 检测配置是否存在[m
[31m-     * @param string $name 配置参数名（支持二级配置 .号分割）[m
[31m-     * @param string $range  作用域[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    public static function has($name, $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-[m
[31m-        if (!strpos($name, '.')) {[m
[31m-            // 判断环境变量[m
[31m-            $result = getenv(ENV_PREFIX . $name);[m
[31m-            if (false !== $result) {[m
[31m-                return $result;[m
[31m-            }[m
[31m-            return isset(self::$config[$range][strtolower($name)]);[m
[31m-        } else {[m
[31m-            // 二维数组设置和获取支持[m
[31m-            $name   = explode('.', $name);[m
[31m-            $result = getenv(ENV_PREFIX . $name[0] . '_' . $name[1]);[m
[31m-            // 判断环境变量[m
[31m-            if (false !== $result) {[m
[31m-                return $result;[m
[31m-            }[m
[31m-            return isset(self::$config[$range][strtolower($name[0])][$name[1]]);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取配置参数 为空则获取所有配置[m
[31m-     * @param string $name 配置参数名（支持二级配置 .号分割）[m
[31m-     * @param string $range  作用域[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function get($name = null, $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        // 无参数时获取所有[m
[31m-        if (empty($name) && isset(self::$config[$range])) {[m
[31m-            return self::$config[$range];[m
[31m-        }[m
[31m-[m
[31m-        if (!strpos($name, '.')) {[m
[31m-            $result = getenv(ENV_PREFIX . $name);[m
[31m-            if (false !== $result) {[m
[31m-                return $result;[m
[31m-            }[m
[31m-            $name = strtolower($name);[m
[31m-            return isset(self::$config[$range][$name]) ? self::$config[$range][$name] : null;[m
[31m-        } else {[m
[31m-            // 二维数组设置和获取支持[m
[31m-            $name   = explode('.', $name);[m
[31m-            $result = getenv(ENV_PREFIX . $name[0] . '_' . $name[1]);[m
[31m-            // 判断环境变量[m
[31m-            if (false !== $result) {[m
[31m-                return $result;[m
[31m-            }[m
[31m-            $name[0] = strtolower($name[0]);[m
[31m-            return isset(self::$config[$range][$name[0]][$name[1]]) ? self::$config[$range][$name[0]][$name[1]] : null;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置配置参数 name为数组则为批量设置[m
[31m-     * @param string $name 配置参数名（支持二级配置 .号分割）[m
[31m-     * @param mixed $value 配置值[m
[31m-     * @param string $range  作用域[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function set($name, $value = null, $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        if (!isset(self::$config[$range])) {[m
[31m-            self::$config[$range] = [];[m
[31m-        }[m
[31m-        if (is_string($name)) {[m
[31m-            if (!strpos($name, '.')) {[m
[31m-                self::$config[$range][strtolower($name)] = $value;[m
[31m-            } else {[m
[31m-                // 二维数组设置和获取支持[m
[31m-                $name                                                 = explode('.', $name);[m
[31m-                self::$config[$range][strtolower($name[0])][$name[1]] = $value;[m
[31m-            }[m
[31m-            return;[m
[31m-        } elseif (is_array($name)) {[m
[31m-            // 批量设置[m
[31m-            if (!empty($value)) {[m
[31m-                self::$config[$range][$value] = isset(self::$config[$range][$value]) ?[m
[31m-                array_merge(self::$config[$range][$value], $name) :[m
[31m-                self::$config[$range][$value] = $name;[m
[31m-                return self::$config[$range][$value];[m
[31m-            } else {[m
[31m-                return self::$config[$range] = array_merge(self::$config[$range], array_change_key_case($name));[m
[31m-            }[m
[31m-        } else {[m
[31m-            // 为空直接返回 已有配置[m
[31m-            return self::$config[$range];[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 重置配置参数[m
[31m-     */[m
[31m-    public static function reset($range = '')[m
[31m-    {[m
[31m-        $range                          = $range ?: self::$range;[m
[31m-        true === $range ? self::$config = [] : self::$config[$range] = [];[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Console.php b/thinkphp/library/think/Console.php[m
[1mdeleted file mode 100644[m
[1mindex 24b8513..0000000[m
[1m--- a/thinkphp/library/think/Console.php[m
[1m+++ /dev/null[m
[36m@@ -1,955 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | TopThink [ WE CAN DO IT JUST THINK IT ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2015 http://www.topthink.com All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: zhangyajun <448901948@qq.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-use think\console\command\Command;[m
[31m-use think\console\command\Help as HelpCommand;[m
[31m-use think\console\helper\Debug as DebugFormatterHelper;[m
[31m-use think\console\helper\Formatter as FormatterHelper;[m
[31m-use think\console\helper\Process as ProcessHelper;[m
[31m-use think\console\helper\Question as QuestionHelper;[m
[31m-use think\console\helper\Set as HelperSet;[m
[31m-use think\console\Input;[m
[31m-use think\console\input\Argument as InputArgument;[m
[31m-use think\console\input\Definition as InputDefinition;[m
[31m-use think\console\input\Option as InputOption;[m
[31m-use think\console\Output;[m
[31m-use think\console\output\Stream;[m
[31m-[m
[31m-class Console[m
[31m-{[m
[31m-[m
[31m-    private $name;[m
[31m-    private $version;[m
[31m-[m
[31m-    /** @var Command[] */[m
[31m-    private $commands = [];[m
[31m-[m
[31m-    private $wantHelps = false;[m
[31m-[m
[31m-    /** @var  Command */[m
[31m-    private $runningCommand;[m
[31m-[m
[31m-    private $catchExceptions = true;[m
[31m-    private $autoExit        = true;[m
[31m-    private $definition;[m
[31m-    private $helperSet;[m
[31m-    private $terminalDimensions;[m
[31m-    private $defaultCommand;[m
[31m-[m
[31m-    private static $defaultCommands = [[m
[31m-        "think\\console\\command\\Help",[m
[31m-        "think\\console\\command\\Lists",[m
[31m-        "think\\console\\command\\Build",[m
[31m-        "think\\console\\command\\make\\Controller",[m
[31m-        "think\\console\\command\\make\\Model"[m
[31m-    ];[m
[31m-[m
[31m-    public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN')[m
[31m-    {[m
[31m-        $this->name    = $name;[m
[31m-        $this->version = $version;[m
[31m-[m
[31m-        $this->defaultCommand = 'list';[m
[31m-        $this->helperSet      = $this->getDefaultHelperSet();[m
[31m-        $this->definition     = $this->getDefaultInputDefinition();[m
[31m-[m
[31m-        foreach ($this->getDefaultCommands() as $command) {[m
[31m-            $this->add($command);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 执行当前的指令[m
[31m-     * @return int[m
[31m-     * @throws \Exception[m
[31m-     * @api[m
[31m-     */[m
[31m-    public function run()[m
[31m-    {[m
[31m-        $input  = new Input();[m
[31m-        $output = new Output();[m
[31m-[m
[31m-        $this->configureIO($input, $output);[m
[31m-[m
[31m-        try {[m
[31m-            $exitCode = $this->doRun($input, $output);[m
[31m-        } catch (\Exception $e) {[m
[31m-            if (!$this->catchExceptions) {[m
[31m-                throw $e;[m
[31m-            }[m
[31m-[m
[31m-            $this->renderException($e, $output->getErrorOutput());[m
[31m-[m
[31m-            $exitCode = $e->getCode();[m
[31m-            if (is_numeric($exitCode)) {[m
[31m-                $exitCode = (int) $exitCode;[m
[31m-                if (0 === $exitCode) {[m
[31m-                    $exitCode = 1;[m
[31m-                }[m
[31m-            } else {[m
[31m-                $exitCode = 1;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if ($this->autoExit) {[m
[31m-            if ($exitCode > 255) {[m
[31m-                $exitCode = 255;[m
[31m-            }[m
[31m-[m
[31m-            exit($exitCode);[m
[31m-        }[m
[31m-[m
[31m-        return $exitCode;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 执行指令[m
[31m-     * @param Input  $input[m
[31m-     * @param Output $output[m
[31m-     * @return int[m
[31m-     */[m
[31m-    public function doRun(Input $input, Output $output)[m
[31m-    {[m
[31m-        if (true === $input->hasParameterOption(['--version', '-V'])) {[m
[31m-            $output->writeln($this->getLongVersion());[m
[31m-[m
[31m-            return 0;[m
[31m-        }[m
[31m-[m
[31m-        $name = $this->getCommandName($input);[m
[31m-[m
[31m-        if (true === $input->hasParameterOption(['--help', '-h'])) {[m
[31m-            if (!$name) {[m
[31m-                $name  = 'help';[m
[31m-                $input = new Input(['help']);[m
[31m-            } else {[m
[31m-                $this->wantHelps = true;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (!$name) {[m
[31m-            $name  = $this->defaultCommand;[m
[31m-            $input = new Input([$this->defaultCommand]);[m
[31m-        }[m
[31m-[m
[31m-        $command = $this->find($name);[m
[31m-[m
[31m-        $this->runningCommand = $command;[m
[31m-        $exitCode             = $this->doRunCommand($command, $input, $output);[m
[31m-        $this->runningCommand = null;[m
[31m-[m
[31m-        return $exitCode;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置助手集[m
[31m-     * @param HelperSet $helperSet[m
[31m-     */[m
[31m-    public function setHelperSet(HelperSet $helperSet)[m
[31m-    {[m
[31m-        $this->helperSet = $helperSet;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取助手集[m
[31m-     * @return HelperSet[m
[31m-     */[m
[31m-    public function getHelperSet()[m
[31m-    {[m
[31m-        return $this->helperSet;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置输入参数定义[m
[31m-     * @param InputDefinition $definition[m
[31m-     */[m
[31m-    public function setDefinition(InputDefinition $definition)[m
[31m-    {[m
[31m-        $this->definition = $definition;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取输入参数定义[m
[31m-     * @return InputDefinition The InputDefinition instance[m
[31m-     */[m
[31m-    public function getDefinition()[m
[31m-    {[m
[31m-        return $this->definition;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Gets the help message.[m
[31m-     * @return string A help message.[m
[31m-     */[m
[31m-    public function getHelp()[m
[31m-    {[m
[31m-        return $this->getLongVersion();[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 是否捕获异常[m
[31m-     * @param bool $boolean[m
[31m-     * @api[m
[31m-     */[m
[31m-    public function setCatchExceptions($boolean)[m
[31m-    {[m
[31m-        $this->catchExceptions = (bool) $boolean;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 是否自动退出[m
[31m-     * @param bool $boolean[m
[31m-     * @api[m
[31m-     */[m
[31m-    public function setAutoExit($boolean)[m
[31m-    {[m
[31m-        $this->autoExit = (bool) $boolean;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取名称[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public function getName()[m
[31m-    {[m
[31m-        return $this->name;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置名称[m
[31m-     * @param string $name[m
[31m-     */[m
[31m-    public function setName($name)[m
[31m-    {[m
[31m-        $this->name = $name;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取版本[m
[31m-     * @return string[m
[31m-     * @api[m
[31m-     */[m
[31m-    public function getVersion()[m
[31m-    {[m
[31m-        return $this->version;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置版本[m
[31m-     * @param string $version[m
[31m-     */[m
[31m-    public function setVersion($version)[m
[31m-    {[m
[31m-        $this->version = $version;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取完整的版本号[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public function getLongVersion()[m
[31m-    {[m
[31m-        if ('UNKNOWN' !== $this->getName() && 'UNKNOWN' !== $this->getVersion()) {[m
[31m-            return sprintf('<info>%s</info> version <comment>%s</comment>', $this->getName(), $this->getVersion());[m
[31m-        }[m
[31m-[m
[31m-        return '<info>Console Tool</info>';[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 注册一个指令[m
[31m-     * @param string $name[m
[31m-     * @return Command[m
[31m-     */[m
[31m-    public function register($name)[m
[31m-    {[m
[31m-        return $this->add(new Command($name));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 添加指令[m
[31m-     * @param Command[] $commands[m
[31m-     */[m
[31m-    public function addCommands(array $commands)[m
[31m-    {[m
[31m-        foreach ($commands as $command) {[m
[31m-            $this->add($command);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 添加一个指令[m
[31m-     * @param Command $command[m
[31m-     * @return Command[m
[31m-     */[m
[31m-    public function add(Command $command)[m
[31m-    {[m
[31m-        $command->setConsole($this);[m
[31m-[m
[31m-        if (!$command->isEnabled()) {[m
[31m-            $command->setConsole(null);[m
[31m-            return null;[m
[31m-        }[m
[31m-[m
[31m-        if (null === $command->getDefinition()) {[m
[31m-            throw new \LogicException(sprintf('Command class "%s" is not correctly initialized. You probably forgot to call the parent constructor.', get_class($command)));[m
[31m-        }[m
[31m-[m
[31m-        $this->commands[$command->getName()] = $command;[m
[31m-[m
[31m-        foreach ($command->getAliases() as $alias) {[m
[31m-            $this->commands[$alias] = $command;[m
[31m-        }[m
[31m-[m
[31m-        return $command;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取指令[m
[31m-     * @param string $name 指令名称[m
[31m-     * @return Command[m
[31m-     * @throws \InvalidArgumentException[m
[31m-     */[m
[31m-    public function get($name)[m
[31m-    {[m
[31m-        if (!isset($this->commands[$name])) {[m
[31m-            throw new \InvalidArgumentException(sprintf('The command "%s" does not exist.', $name));[m
[31m-        }[m
[31m-[m
[31m-        $command = $this->commands[$name];[m
[31m-[m
[31m-        if ($this->wantHelps) {[m
[31m-            $this->wantHelps = false;[m
[31m-[m
[31m-            /** @var HelpCommand $helpCommand */[m
[31m-            $helpCommand = $this->get('help');[m
[31m-            $helpCommand->setCommand($command);[m
[31m-[m
[31m-            return $helpCommand;[m
[31m-        }[m
[31m-[m
[31m-        return $command;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 某个指令是否存在[m
[31m-     * @param string $name 指令民初[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    public function has($name)[m
[31m-    {[m
[31m-        return isset($this->commands[$name]);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取所有的命名空间[m
[31m-     * @return array[m
[31m-     */[m
[31m-    public function getNamespaces()[m
[31m-    {[m
[31m-        $namespaces = [];[m
[31m-        foreach ($this->commands as $command) {[m
[31m-            $namespaces = array_merge($namespaces, $this->extractAllNamespaces($command->getName()));[m
[31m-[m
[31m-            foreach ($command->getAliases() as $alias) {[m
[31m-                $namespaces = array_merge($namespaces, $this->extractAllNamespaces($alias));[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        return array_values(array_unique(array_filter($namespaces)));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 查找注册命名空间中的名称或缩写。[m
[31m-     * @param string $namespace[m
[31m-     * @return string[m
[31m-     * @throws \InvalidArgumentException[m
[31m-     */[m
[31m-    public function findNamespace($namespace)[m
[31m-    {[m
[31m-        $allNamespaces = $this->getNamespaces();[m
[31m-        $expr          = preg_replace_callback('{([^:]+|)}', function ($matches) {[m
[31m-            return preg_quote($matches[1]) . '[^:]*';[m
[31m-        }, $namespace);[m
[31m-        $namespaces = preg_grep('{^' . $expr . '}', $allNamespaces);[m
[31m-[m
[31m-        if (empty($namespaces)) {[m
[31m-            $message = sprintf('There are no commands defined in the "%s" namespace.', $namespace);[m
[31m-[m
[31m-            if ($alternatives = $this->findAlternatives($namespace, $allNamespaces)) {[m
[31m-                if (1 == count($alternatives)) {[m
[31m-                    $message .= "\n\nDid you mean this?\n    ";[m
[31m-                } else {[m
[31m-                    $message .= "\n\nDid you mean one of these?\n    ";[m
[31m-                }[m
[31m-[m
[31m-                $message .= implode("\n    ", $alternatives);[m
[31m-            }[m
[31m-[m
[31m-            throw new \InvalidArgumentException($message);[m
[31m-        }[m
[31m-[m
[31m-        $exact = in_array($namespace, $namespaces, true);[m
[31m-        if (count($namespaces) > 1 && !$exact) {[m
[31m-            throw new \InvalidArgumentException(sprintf('The namespace "%s" is ambiguous (%s).', $namespace, $this->getAbbreviationSuggestions(array_values($namespaces))));[m
[31m-        }[m
[31m-[m
[31m-        return $exact ? $namespace : reset($namespaces);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 查找指令[m
[31m-     * @param string $name 名称或者别名[m
[31m-     * @return Command[m
[31m-     * @throws \InvalidArgumentException[m
[31m-     */[m
[31m-    public function find($name)[m
[31m-    {[m
[31m-        $allCommands = array_keys($this->commands);[m
[31m-        $expr        = preg_replace_callback('{([^:]+|)}', function ($matches) {[m
[31m-            return preg_quote($matches[1]) . '[^:]*';[m
[31m-        }, $name);[m
[31m-        $commands = preg_grep('{^' . $expr . '}', $allCommands);[m
[31m-[m
[31m-        if (empty($commands) || count(preg_grep('{^' . $expr . '$}', $commands)) < 1) {[m
[31m-            if (false !== $pos = strrpos($name, ':')) {[m
[31m-                $this->findNamespace(substr($name, 0, $pos));[m
[31m-            }[m
[31m-[m
[31m-            $message = sprintf('Command "%s" is not defined.', $name);[m
[31m-[m
[31m-            if ($alternatives = $this->findAlternatives($name, $allCommands)) {[m
[31m-                if (1 == count($alternatives)) {[m
[31m-                    $message .= "\n\nDid you mean this?\n    ";[m
[31m-                } else {[m
[31m-                    $message .= "\n\nDid you mean one of these?\n    ";[m
[31m-                }[m
[31m-                $message .= implode("\n    ", $alternatives);[m
[31m-            }[m
[31m-[m
[31m-            throw new \InvalidArgumentException($message);[m
[31m-        }[m
[31m-[m
[31m-        if (count($commands) > 1) {[m
[31m-            $commandList = $this->commands;[m
[31m-            $commands    = array_filter($commands, function ($nameOrAlias) use ($commandList, $commands) {[m
[31m-                $commandName = $commandList[$nameOrAlias]->getName();[m
[31m-[m
[31m-                return $commandName === $nameOrAlias || !in_array($commandName, $commands);[m
[31m-            });[m
[31m-        }[m
[31m-[m
[31m-        $exact = in_array($name, $commands, true);[m
[31m-        if (count($commands) > 1 && !$exact) {[m
[31m-            $suggestions = $this->getAbbreviationSuggestions(array_values($commands));[m
[31m-[m
[31m-            throw new \InvalidArgumentException(sprintf('Command "%s" is ambiguous (%s).', $name, $suggestions));[m
[31m-        }[m
[31m-[m
[31m-        return $this->get($exact ? $name : reset($commands));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取所有的指令[m
[31m-     * @param string $namespace 命名空间[m
[31m-     * @return Command[][m
[31m-     * @api[m
[31m-     */[m
[31m-    public function all($namespace = null)[m
[31m-    {[m
[31m-        if (null === $namespace) {[m
[31m-            return $this->commands;[m
[31m-        }[m
[31m-[m
[31m-        $commands = [];[m
[31m-        foreach ($this->commands as $name => $command) {[m
[31m-            if ($this->extractNamespace($name, substr_count($namespace, ':') + 1) === $namespace) {[m
[31m-                $commands[$name] = $command;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        return $commands;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取可能的指令名[m
[31m-     * @param array $names[m
[31m-     * @return array[m
[31m-     */[m
[31m-    public static function getAbbreviations($names)[m
[31m-    {[m
[31m-        $abbrevs = [];[m
[31m-        foreach ($names as $name) {[m
[31m-            for ($len = strlen($name); $len > 0; --$len) {[m
[31m-                $abbrev             = substr($name, 0, $len);[m
[31m-                $abbrevs[$abbrev][] = $name;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        return $abbrevs;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 呈现捕获的异常[m
[31m-     * @param \Exception $e[m
[31m-     * @param Stream     $output[m
[31m-     */[m
[31m-    public function renderException(\Exception $e, Stream $output)[m
[31m-    {[m
[31m-        do {[m
[31m-            $title = sprintf('  [%s]  ', get_class($e));[m
[31m-[m
[31m-            $len = $this->stringWidth($title);[m
[31m-[m
[31m-            $width = $this->getTerminalWidth() ? $this->getTerminalWidth() - 1 : PHP_INT_MAX;[m
[31m-[m
[31m-            if (defined('HHVM_VERSION') && $width > 1 << 31) {[m
[31m-                $width = 1 << 31;[m
[31m-            }[m
[31m-            $formatter = $output->getFormatter();[m
[31m-            $lines     = [];[m
[31m-            foreach (preg_split('/\r?\n/', $e->getMessage()) as $line) {[m
[31m-                foreach ($this->splitStringByWidth($line, $width - 4) as $line) {[m
[31m-[m
[31m-                    $lineLength = $this->stringWidth(preg_replace('/\[[^m]*m/', '', $formatter->format($line))) + 4;[m
[31m-                    $lines[]    = [$line, $lineLength];[m
[31m-[m
[31m-                    $len = max($lineLength, $len);[m
[31m-                }[m
[31m-            }[m
[31m-[m
[31m-            $messages   = ['', ''];[m
[31m-            $messages[] = $emptyLine = $formatter->format(sprintf('<error>%s</error>', str_repeat(' ', $len)));[m
[31m-            $messages[] = $formatter->format(sprintf('<error>%s%s</error>', $title, str_repeat(' ', max(0, $len - $this->stringWidth($title)))));[m
[31m-            foreach ($lines as $line) {[m
[31m-                $messages[] = $formatter->format(sprintf('<error>  %s  %s</error>', $line[0], str_repeat(' ', $len - $line[1])));[m
[31m-            }[m
[31m-            $messages[] = $emptyLine;[m
[31m-            $messages[] = '';[m
[31m-            $messages[] = '';[m
[31m-[m
[31m-            $output->writeln($messages, Output::OUTPUT_RAW);[m
[31m-[m
[31m-            if (Output::VERBOSITY_VERBOSE <= $output->getVerbosity()) {[m
[31m-                $output->writeln('<comment>Exception trace:</comment>');[m
[31m-[m
[31m-                // exception related properties[m
[31m-                $trace = $e->getTrace();[m
[31m-                array_unshift($trace, [[m
[31m-                    'function' => '',[m
[31m-                    'file'     => $e->getFile() !== null ? $e->getFile() : 'n/a',[m
[31m-                    'line'     => $e->getLine() !== null ? $e->getLine() : 'n/a',[m
[31m-                    'args'     => [],[m
[31m-                ]);[m
[31m-[m
[31m-                for ($i = 0, $count = count($trace); $i < $count; ++$i) {[m
[31m-                    $class    = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';[m
[31m-                    $type     = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';[m
[31m-                    $function = $trace[$i]['function'];[m
[31m-                    $file     = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n/a';[m
[31m-                    $line     = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n/a';[m
[31m-[m
[31m-                    $output->writeln(sprintf(' %s%s%s() at <info>%s:%s</info>', $class, $type, $function, $file, $line));[m
[31m-                }[m
[31m-[m
[31m-                $output->writeln('');[m
[31m-                $output->writeln('');[m
[31m-            }[m
[31m-        } while ($e = $e->getPrevious());[m
[31m-[m
[31m-        if (null !== $this->runningCommand) {[m
[31m-            $output->writeln(sprintf('<info>%s</info>', sprintf($this->runningCommand->getSynopsis(), $this->getName())));[m
[31m-            $output->writeln('');[m
[31m-            $output->writeln('');[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取终端宽度[m
[31m-     * @return int|null[m
[31m-     */[m
[31m-    protected function getTerminalWidth()[m
[31m-    {[m
[31m-        $dimensions = $this->getTerminalDimensions();[m
[31m-[m
[31m-        return $dimensions[0];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取终端高度[m
[31m-     * @return int|null[m
[31m-     */[m
[31m-    protected function getTerminalHeight()[m
[31m-    {[m
[31m-        $dimensions = $this->getTerminalDimensions();[m
[31m-[m
[31m-        return $dimensions[1];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取当前终端的尺寸[m
[31m-     * @return array[m
[31m-     */[m
[31m-    public function getTerminalDimensions()[m
[31m-    {[m
[31m-        if ($this->terminalDimensions) {[m
[31m-            return $this->terminalDimensions;[m
[31m-        }[m
[31m-[m
[31m-        if ('\\' === DS) {[m
[31m-            if (preg_match('/^(\d+)x\d+ \(\d+x(\d+)\)$/', trim(getenv('ANSICON')), $matches)) {[m
[31m-                return [(int) $matches[1], (int) $matches[2]];[m
[31m-            }[m
[31m-            if (preg_match('/^(\d+)x(\d+)$/', $this->getConsoleMode(), $matches)) {[m
[31m-                return [(int) $matches[1], (int) $matches[2]];[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if ($sttyString = $this->getSttyColumns()) {[m
[31m-            if (preg_match('/rows.(\d+);.columns.(\d+);/i', $sttyString, $matches)) {[m
[31m-                return [(int) $matches[2], (int) $matches[1]];[m
[31m-            }[m
[31m-            if (preg_match('/;.(\d+).rows;.(\d+).columns/i', $sttyString, $matches)) {[m
[31m-                return [(int) $matches[2], (int) $matches[1]];[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        return [null, null];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置终端尺寸[m
[31m-     * @param int $width[m
[31m-     * @param int $height[m
[31m-     * @return Console[m
[31m-     */[m
[31m-    public function setTerminalDimensions($width, $height)[m
[31m-    {[m
[31m-        $this->terminalDimensions = [$width, $height];[m
[31m-[m
[31m-        return $this;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 配置基于用户的参数和选项的输入和输出实例。[m
[31m-     * @param Input  $input  输入实例[m
[31m-     * @param Output $output 输出实例[m
[31m-     */[m
[31m-    protected function configureIO(Input $input, Output $output)[m
[31m-    {[m
[31m-        if (true === $input->hasParameterOption(['--ansi'])) {[m
[31m-            $output->setDecorated(true);[m
[31m-        } elseif (true === $input->hasParameterOption(['--no-ansi'])) {[m
[31m-            $output->setDecorated(false);[m
[31m-        }[m
[31m-[m
[31m-        if (true === $input->hasParameterOption(['--no-interaction', '-n'])) {[m
[31m-            $input->setInteractive(false);[m
[31m-        } elseif (function_exists('posix_isatty') && $this->getHelperSet()->has('question')) {[m
[31m-            $inputStream = $this->getHelperSet()->get('question')->getInputStream();[m
[31m-            if (!@posix_isatty($inputStream) && false === getenv('SHELL_INTERACTIVE')) {[m
[31m-                $input->setInteractive(false);[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (true === $input->hasParameterOption(['--quiet', '-q'])) {[m
[31m-            $output->setVerbosity(Output::VERBOSITY_QUIET);[m
[31m-        } else {[m
[31m-            if ($input->hasParameterOption('-vvv') || $input->hasParameterOption('--verbose=3')[m
[31m-                || $input->getParameterOption('--verbose') === 3[m
[31m-            ) {[m
[31m-                $output->setVerbosity(Output::VERBOSITY_DEBUG);[m
[31m-            } elseif ($input->hasParameterOption('-vv') || $input->hasParameterOption('--verbose=2')[m
[31m-                || $input->getParameterOption('--verbose') === 2[m
[31m-            ) {[m
[31m-                $output->setVerbosity(Output::VERBOSITY_VERY_VERBOSE);[m
[31m-            } elseif ($input->hasParameterOption('-v') || $input->hasParameterOption('--verbose=1')[m
[31m-                || $input->hasParameterOption('--verbose')[m
[31m-                || $input->getParameterOption('--verbose')[m
[31m-            ) {[m
[31m-                $output->setVerbosity(Output::VERBOSITY_VERBOSE);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 执行指令[m
[31m-     * @param Command $command 指令实例[m
[31m-     * @param Input   $input   输入实例[m
[31m-     * @param Output  $output  输出实例[m
[31m-     * @return int[m
[31m-     * @throws \Exception[m
[31m-     */[m
[31m-    protected function doRunCommand(Command $command, Input $input, Output $output)[m
[31m-    {[m
[31m-        return $command->run($input, $output);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取指令的基础名称[m
[31m-     * @param Input $input[m
[31m-     * @return string[m
[31m-     */[m
[31m-    protected function getCommandName(Input $input)[m
[31m-    {[m
[31m-        return $input->getFirstArgument();[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取默认输入定义[m
[31m-     * @return InputDefinition[m
[31m-     */[m
[31m-    protected function getDefaultInputDefinition()[m
[31m-    {[m
[31m-        return new InputDefinition([[m
[31m-            new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),[m
[31m-            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message'),[m
[31m-            new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this console version'),[m
[31m-            new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Do not output any message'),[m
[31m-            new InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),[m
[31m-            new InputOption('--ansi', '', InputOption::VALUE_NONE, 'Force ANSI output'),[m
[31m-            new InputOption('--no-ansi', '', InputOption::VALUE_NONE, 'Disable ANSI output'),[m
[31m-            new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question'),[m
[31m-        ]);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置默认命令[m
[31m-     * @return Command[] An array of default Command instances[m
[31m-     */[m
[31m-    protected function getDefaultCommands()[m
[31m-    {[m
[31m-        $defaultCommands = [];[m
[31m-[m
[31m-        foreach (self::$defaultCommands as $classname) {[m
[31m-            if (class_exists($classname) && is_subclass_of($classname, "think\\console\\command\\Command")) {[m
[31m-                $defaultCommands[] = new $classname();[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        return $defaultCommands;[m
[31m-    }[m
[31m-[m
[31m-    public static function addDefaultCommands(array $classnames)[m
[31m-    {[m
[31m-        self::$defaultCommands = array_merge(self::$defaultCommands, $classnames);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置默认助手[m
[31m-     * @return HelperSet[m
[31m-     */[m
[31m-    protected function getDefaultHelperSet()[m
[31m-    {[m
[31m-        return new HelperSet([[m
[31m-            new FormatterHelper(),[m
[31m-            new DebugFormatterHelper(),[m
[31m-            new ProcessHelper(),[m
[31m-            new QuestionHelper(),[m
[31m-        ]);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取stty列数[m
[31m-     * @return string[m
[31m-     */[m
[31m-    private function getSttyColumns()[m
[31m-    {[m
[31m-        if (!function_exists('proc_open')) {[m
[31m-            return null;[m
[31m-        }[m
[31m-[m
[31m-        $descriptorspec = [1 => ['pipe', 'w'], 2 => ['pipe', 'w']];[m
[31m-        $process        = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);[m
[31m-        if (is_resource($process)) {[m
[31m-            $info = stream_get_contents($pipes[1]);[m
[31m-            fclose($pipes[1]);[m
[31m-            fclose($pipes[2]);[m
[31m-            proc_close($process);[m
[31m-[m
[31m-            return $info;[m
[31m-        }[m
[31m-        return null;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取终端模式[m
[31m-     * @return string <width>x<height> 或 null[m
[31m-     */[m
[31m-    private function getConsoleMode()[m
[31m-    {[m
[31m-        if (!function_exists('proc_open')) {[m
[31m-            return null;[m
[31m-        }[m
[31m-[m
[31m-        $descriptorspec = [1 => ['pipe', 'w'], 2 => ['pipe', 'w']];[m
[31m-        $process        = proc_open('mode CON', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);[m
[31m-        if (is_resource($process)) {[m
[31m-            $info = stream_get_contents($pipes[1]);[m
[31m-            fclose($pipes[1]);[m
[31m-            fclose($pipes[2]);[m
[31m-            proc_close($process);[m
[31m-[m
[31m-            if (preg_match('/--------+\r?\n.+?(\d+)\r?\n.+?(\d+)\r?\n/', $info, $matches)) {[m
[31m-                return $matches[2] . 'x' . $matches[1];[m
[31m-            }[m
[31m-        }[m
[31m-        return null;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取可能的建议[m
[31m-     * @param array $abbrevs[m
[31m-     * @return string[m
[31m-     */[m
[31m-    private function getAbbreviationSuggestions($abbrevs)[m
[31m-    {[m
[31m-        return sprintf('%s, %s%s', $abbrevs[0], $abbrevs[1], count($abbrevs) > 2 ? sprintf(' and %d more', count($abbrevs) - 2) : '');[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 返回命名空间部分[m
[31m-     * @param string $name  指令[m
[31m-     * @param string $limit 部分的命名空间的最大数量[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public function extractNamespace($name, $limit = null)[m
[31m-    {[m
[31m-        $parts = explode(':', $name);[m
[31m-        array_pop($parts);[m
[31m-[m
[31m-        return implode(':', null === $limit ? $parts : array_slice($parts, 0, $limit));[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 查找可替代的建议[m
[31m-     * @param string             $name[m
[31m-     * @param array|\Traversable $collection[m
[31m-     * @return array[m
[31m-     */[m
[31m-    private function findAlternatives($name, $collection)[m
[31m-    {[m
[31m-        $threshold    = 1e3;[m
[31m-        $alternatives = [];[m
[31m-[m
[31m-        $collectionParts = [];[m
[31m-        foreach ($collection as $item) {[m
[31m-            $collectionParts[$item] = explode(':', $item);[m
[31m-        }[m
[31m-[m
[31m-        foreach (explode(':', $name) as $i => $subname) {[m
[31m-            foreach ($collectionParts as $collectionName => $parts) {[m
[31m-                $exists = isset($alternatives[$collectionName]);[m
[31m-                if (!isset($parts[$i]) && $exists) {[m
[31m-                    $alternatives[$collectionName] += $threshold;[m
[31m-                    continue;[m
[31m-                } elseif (!isset($parts[$i])) {[m
[31m-                    continue;[m
[31m-                }[m
[31m-[m
[31m-                $lev = levenshtein($subname, $parts[$i]);[m
[31m-                if ($lev <= strlen($subname) / 3 || '' !== $subname && false !== strpos($parts[$i], $subname)) {[m
[31m-                    $alternatives[$collectionName] = $exists ? $alternatives[$collectionName] + $lev : $lev;[m
[31m-                } elseif ($exists) {[m
[31m-                    $alternatives[$collectionName] += $threshold;[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        foreach ($collection as $item) {[m
[31m-            $lev = levenshtein($name, $item);[m
[31m-            if ($lev <= strlen($name) / 3 || false !== strpos($item, $name)) {[m
[31m-                $alternatives[$item] = isset($alternatives[$item]) ? $alternatives[$item] - $lev : $lev;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        $alternatives = array_filter($alternatives, function ($lev) use ($threshold) {[m
[31m-            return $lev < 2 * $threshold;[m
[31m-        });[m
[31m-        asort($alternatives);[m
[31m-[m
[31m-        return array_keys($alternatives);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置默认的指令[m
[31m-     * @param string $commandName The Command name[m
[31m-     */[m
[31m-    public function setDefaultCommand($commandName)[m
[31m-    {[m
[31m-        $this->defaultCommand = $commandName;[m
[31m-    }[m
[31m-[m
[31m-    private function stringWidth($string)[m
[31m-    {[m
[31m-        if (!function_exists('mb_strwidth')) {[m
[31m-            return strlen($string);[m
[31m-        }[m
[31m-[m
[31m-        if (false === $encoding = mb_detect_encoding($string)) {[m
[31m-            return strlen($string);[m
[31m-        }[m
[31m-[m
[31m-        return mb_strwidth($string, $encoding);[m
[31m-    }[m
[31m-[m
[31m-    private function splitStringByWidth($string, $width)[m
[31m-    {[m
[31m-        if (!function_exists('mb_strwidth')) {[m
[31m-            return str_split($string, $width);[m
[31m-        }[m
[31m-[m
[31m-        if (false === $encoding = mb_detect_encoding($string)) {[m
[31m-            return str_split($string, $width);[m
[31m-        }[m
[31m-[m
[31m-        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);[m
[31m-        $lines      = [];[m
[31m-        $line       = '';[m
[31m-        foreach (preg_split('//u', $utf8String) as $char) {[m
[31m-            if (mb_strwidth($line . $char, 'utf8') <= $width) {[m
[31m-                $line .= $char;[m
[31m-                continue;[m
[31m-            }[m
[31m-            $lines[] = str_pad($line, $width);[m
[31m-            $line    = $char;[m
[31m-        }[m
[31m-        if (strlen($line)) {[m
[31m-            $lines[] = count($lines) ? str_pad($line, $width) : $line;[m
[31m-        }[m
[31m-[m
[31m-        mb_convert_variables($encoding, 'utf8', $lines);[m
[31m-[m
[31m-        return $lines;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 返回所有的命名空间[m
[31m-     * @param string $name[m
[31m-     * @return array[m
[31m-     */[m
[31m-    private function extractAllNamespaces($name)[m
[31m-    {[m
[31m-        $parts      = explode(':', $name, -1);[m
[31m-        $namespaces = [];[m
[31m-[m
[31m-        foreach ($parts as $part) {[m
[31m-            if (count($namespaces)) {[m
[31m-                $namespaces[] = end($namespaces) . ':' . $part;[m
[31m-            } else {[m
[31m-                $namespaces[] = $part;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        return $namespaces;[m
[31m-    }[m
[31m-[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Controller.php b/thinkphp/library/think/Controller.php[m
[1mdeleted file mode 100644[m
[1mindex cd60e4b..0000000[m
[1m--- a/thinkphp/library/think/Controller.php[m
[1m+++ /dev/null[m
[36m@@ -1,183 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-\think\Loader::import('controller/Jump', TRAIT_PATH, EXT);[m
[31m-[m
[31m-class Controller[m
[31m-{[m
[31m-    use \traits\controller\Jump;[m
[31m-[m
[31m-    // 视图类实例[m
[31m-    protected $view = null;[m
[31m-[m
[31m-    /**[m
[31m-     * 前置操作方法列表[m
[31m-     * @var array $beforeActionList[m
[31m-     * @access protected[m
[31m-     */[m
[31m-    protected $beforeActionList = [];[m
[31m-[m
[31m-    /**[m
[31m-     * 架构函数[m
[31m-     * @access public[m
[31m-     */[m
[31m-    public function __construct()[m
[31m-    {[m
[31m-        $this->view = \think\View::instance(Config::get());[m
[31m-[m
[31m-        // 控制器初始化[m
[31m-        if (method_exists($this, '_initialize')) {[m
[31m-            $this->_initialize();[m
[31m-        }[m
[31m-[m
[31m-        // 前置操作方法[m
[31m-        if ($this->beforeActionList) {[m
[31m-            foreach ($this->beforeActionList as $method => $options) {[m
[31m-                is_numeric($method) ?[m
[31m-                $this->beforeAction($options) :[m
[31m-                $this->beforeAction($method, $options);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 前置操作[m
[31m-     * @access protected[m
[31m-     * @param string    $method     前置操作方法名[m
[31m-     * @param array     $options    调用参数 ['only'=>[...]] 或者['except'=>[...]][m
[31m-     */[m
[31m-    protected function beforeAction($method, $options = [])[m
[31m-    {[m
[31m-        if (isset($options['only'])) {[m
[31m-            if (is_string($options['only'])) {[m
[31m-                $options['only'] = explode(',', $options['only']);[m
[31m-            }[m
[31m-            if (!in_array(ACTION_NAME, $options['only'])) {[m
[31m-                return;[m
[31m-            }[m
[31m-        } elseif (isset($options['except'])) {[m
[31m-            if (is_string($options['except'])) {[m
[31m-                $options['except'] = explode(',', $options['except']);[m
[31m-            }[m
[31m-            if (in_array(ACTION_NAME, $options['except'])) {[m
[31m-                return;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (method_exists($this, $method)) {[m
[31m-            call_user_func([$this, $method]);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 加载模板和页面输出 可以返回输出内容[m
[31m-     * @access public[m
[31m-     * @param string $template 模板文件名[m
[31m-     * @param array  $vars     模板输出变量[m
[31m-     * @param array $config     模板参数[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public function fetch($template = '', $vars = [], $config = [])[m
[31m-    {[m
[31m-        return $this->view->fetch($template, $vars, $config);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 加载模板和页面输出 可以返回输出内容[m
[31m-     * @access public[m
[31m-     * @param string $template 模板文件名[m
[31m-     * @param array  $vars     模板输出变量[m
[31m-     * @param array $config     模板参数[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public function display($template = '', $vars = [], $config = [])[m
[31m-    {[m
[31m-        return $this->view->fetch($template, $vars, $config);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 渲染内容输出[m
[31m-     * @access public[m
[31m-     * @param string $content 内容[m
[31m-     * @param array  $vars    模板输出变量[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public function show($content, $vars = [])[m
[31m-    {[m
[31m-        return $this->view->show($content, $vars);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 模板变量赋值[m
[31m-     * @access protected[m
[31m-     * @param mixed $name  要显示的模板变量[m
[31m-     * @param mixed $value 变量的值[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public function assign($name, $value = '')[m
[31m-    {[m
[31m-        $this->view->assign($name, $value);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 初始化模板引擎[m
[31m-     * @access protected[m
[31m-     * @param string $engine 引擎名称[m
[31m-     * @param array $config 引擎参数[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public function engine($engine, $config = [])[m
[31m-    {[m
[31m-        $this->view->engine($engine, $config);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 验证数据[m
[31m-     * @access protected[m
[31m-     * @param array $data 数据[m
[31m-     * @param string|array $validate 验证器名或者验证规则数组[m
[31m-     * @param array $message 提示信息[m
[31m-     * @param mixed $callback 回调方法（闭包）[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public function validate($data, $validate, $message = [], $callback = null)[m
[31m-    {[m
[31m-        if (is_array($validate)) {[m
[31m-            $v = Loader::validate(Config::get('default_validate'));[m
[31m-            $v->rule($validate);[m
[31m-        } else {[m
[31m-            if (strpos($validate, '.')) {[m
[31m-                // 支持场景[m
[31m-                list($validate, $scene) = explode('.', $validate);[m
[31m-            }[m
[31m-            $v = Loader::validate($validate);[m
[31m-            if (!empty($scene)) {[m
[31m-                $v->scene($scene);[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (is_array($message)) {[m
[31m-            $v->message($message);[m
[31m-        }[m
[31m-[m
[31m-        if (is_callable($callback)) {[m
[31m-            call_user_func_array($callback, [$v, &$data]);[m
[31m-        }[m
[31m-[m
[31m-        if (!$v->check($data)) {[m
[31m-            return $v->getError();[m
[31m-        } else {[m
[31m-            return true;[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Cookie.php b/thinkphp/library/think/Cookie.php[m
[1mdeleted file mode 100644[m
[1mindex 3ababc3..0000000[m
[1m--- a/thinkphp/library/think/Cookie.php[m
[1m+++ /dev/null[m
[36m@@ -1,173 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Cookie[m
[31m-{[m
[31m-[m
[31m-    protected static $config = [[m
[31m-        // cookie 名称前缀[m
[31m-        'prefix'    => '',[m
[31m-        // cookie 保存时间[m
[31m-        'expire'    => 0,[m
[31m-        // cookie 保存路径[m
[31m-        'path'      => '/',[m
[31m-        // cookie 有效域名[m
[31m-        'domain'    => '',[m
[31m-        //  cookie 启用安全传输[m
[31m-        'secure'    => false,[m
[31m-        // httponly设置[m
[31m-        'httponly'  => '',[m
[31m-        // 是否使用 setcookie[m
[31m-        'setcookie' => true,[m
[31m-    ];[m
[31m-[m
[31m-    /**[m
[31m-     * Cookie初始化[m
[31m-     * @param array $config[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function init(array $config = [])[m
[31m-    {[m
[31m-        self::$config = array_merge(self::$config, array_change_key_case($config));[m
[31m-        if (!empty(self::$config['httponly'])) {[m
[31m-            ini_set('session.cookie_httponly', 1);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置或者获取cookie作用域（前缀）[m
[31m-     * @param string $prefix[m
[31m-     * @return string|void[m
[31m-     */[m
[31m-    public static function prefix($prefix = '')[m
[31m-    {[m
[31m-        if (empty($prefix)) {[m
[31m-            return self::$config['prefix'];[m
[31m-        }[m
[31m-        self::$config['prefix'] = $prefix;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Cookie 设置、获取、删除[m
[31m-     *[m
[31m-     * @param string $name  cookie名称[m
[31m-     * @param mixed  $value cookie值[m
[31m-     * @param mixed  $option 可选参数 可能会是 null|integer|string[m
[31m-     *[m
[31m-     * @return mixed[m
[31m-     * @internal param mixed $options cookie参数[m
[31m-     */[m
[31m-    public static function set($name, $value = '', $option = null)[m
[31m-    {[m
[31m-        // 参数设置(会覆盖黙认设置)[m
[31m-        if (!is_null($option)) {[m
[31m-            if (is_numeric($option)) {[m
[31m-                $option = ['expire' => $option];[m
[31m-            } elseif (is_string($option)) {[m
[31m-                parse_str($option, $option);[m
[31m-            }[m
[31m-            $config = array_merge(self::$config, array_change_key_case($option));[m
[31m-        } else {[m
[31m-            $config = self::$config;[m
[31m-        }[m
[31m-        $name = $config['prefix'] . $name;[m
[31m-        // 设置cookie[m
[31m-        if (is_array($value)) {[m
[31m-            array_walk_recursive($value, 'self::jsonFormatProtect', 'encode');[m
[31m-            $value = 'think:' . json_encode($value);[m
[31m-        }[m
[31m-        $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0;[m
[31m-        if ($config['setcookie']) {[m
[31m-            setcookie($name, $value, $expire, $config['path'], $config['domain'], $config['secure'], $config['httponly']);[m
[31m-        }[m
[31m-        $_COOKIE[$name] = $value;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Cookie获取[m
[31m-     * @param string $name cookie名称[m
[31m-     * @param string|null $prefix cookie前缀[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function get($name, $prefix = null)[m
[31m-    {[m
[31m-        $prefix = !is_null($prefix) ? $prefix : self::$config['prefix'];[m
[31m-        $name   = $prefix . $name;[m
[31m-        if (isset($_COOKIE[$name])) {[m
[31m-            $value = $_COOKIE[$name];[m
[31m-            if (0 === strpos($value, 'think:')) {[m
[31m-                $value = substr($value, 6);[m
[31m-                $value = json_decode($value, true);[m
[31m-                array_walk_recursive($value, 'self::jsonFormatProtect', 'decode');[m
[31m-            }[m
[31m-            return $value;[m
[31m-        } else {[m
[31m-            return null;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Cookie删除[m
[31m-     * @param string $name cookie名称[m
[31m-     * @param string|null $prefix cookie前缀[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function delete($name, $prefix = null)[m
[31m-    {[m
[31m-        $config = self::$config;[m
[31m-        $prefix = !is_null($prefix) ? $prefix : $config['prefix'];[m
[31m-        $name   = $prefix . $name;[m
[31m-        if ($config['setcookie']) {[m
[31m-            setcookie($name, '', time() - 3600, $config['path'], $config['domain'], $config['secure'], $config['httponly']);[m
[31m-        }[m
[31m-        // 删除指定cookie[m
[31m-        unset($_COOKIE[$name]);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Cookie清空[m
[31m-     * @param string|null $prefix cookie前缀[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function clear($prefix = null)[m
[31m-    {[m
[31m-        // 清除指定前缀的所有cookie[m
[31m-        if (empty($_COOKIE)) {[m
[31m-            return;[m
[31m-        }[m
[31m-[m
[31m-        // 要删除的cookie前缀，不指定则删除config设置的指定前缀[m
[31m-        $config = self::$config;[m
[31m-        $prefix = !is_null($prefix) ? $prefix : $config['prefix'];[m
[31m-        if ($prefix) {[m
[31m-            // 如果前缀为空字符串将不作处理直接返回[m
[31m-            foreach ($_COOKIE as $key => $val) {[m
[31m-                if (0 === strpos($key, $prefix)) {[m
[31m-                    if ($config['setcookie']) {[m
[31m-                        setcookie($key, '', time() - 3600, $config['path'], $config['domain'], $config['secure'], $config['httponly']);[m
[31m-                    }[m
[31m-                    unset($_COOKIE[$key]);[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        return;[m
[31m-    }[m
[31m-[m
[31m-    private static function jsonFormatProtect(&$val, $key, $type = 'encode')[m
[31m-    {[m
[31m-        if (!empty($val) && true !== $val) {[m
[31m-            $val = 'decode' == $type ? urldecode($val) : urlencode($val);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Db.php b/thinkphp/library/think/Db.php[m
[1mdeleted file mode 100644[m
[1mindex 90237a6..0000000[m
[1m--- a/thinkphp/library/think/Db.php[m
[1m+++ /dev/null[m
[36m@@ -1,116 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-/**[m
[31m- * ThinkPHP 数据库中间层实现类[m
[31m- */[m
[31m-class Db[m
[31m-{[m
[31m-    //  数据库连接实例[m
[31m-    private static $instances = [];[m
[31m-    //  当前数据库连接实例[m
[31m-    private static $instance = null;[m
[31m-    // 查询次数[m
[31m-    public static $queryTimes = 0;[m
[31m-    // 执行次数[m
[31m-    public static $executeTimes = 0;[m
[31m-[m
[31m-    /**[m
[31m-     * 数据库初始化 并取得数据库类实例[m
[31m-     * @static[m
[31m-     * @access public[m
[31m-     * @param mixed $config 连接配置[m
[31m-     * @return Object 返回数据库驱动类[m
[31m-     */[m
[31m-    public static function connect($config = [])[m
[31m-    {[m
[31m-        $md5 = md5(serialize($config));[m
[31m-        if (!isset(self::$instances[$md5])) {[m
[31m-            // 解析连接参数 支持数组和字符串[m
[31m-            $options = self::parseConfig($config);[m
[31m-            if (empty($options['type'])) {[m
[31m-                throw new Exception('db type error');[m
[31m-            }[m
[31m-            $class                 = (!empty($options['namespace']) ? $options['namespace'] : '\\think\\db\\driver\\') . ucwords($options['type']);[m
[31m-            self::$instances[$md5] = new $class($options);[m
[31m-            // 记录初始化信息[m
[31m-            APP_DEBUG && Log::record('[ DB ] INIT ' . $options['type'] . ':' . var_export($options, true), 'info');[m
[31m-        }[m
[31m-        self::$instance = self::$instances[$md5];[m
[31m-        return self::$instance;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 数据库连接参数解析[m
[31m-     * @static[m
[31m-     * @access private[m
[31m-     * @param mixed $config[m
[31m-     * @return array[m
[31m-     */[m
[31m-    private static function parseConfig($config)[m
[31m-    {[m
[31m-        if (empty($config)) {[m
[31m-            $config = Config::get('database');[m
[31m-        } elseif (is_string($config) && false === strpos($config, '/')) {[m
[31m-            // 支持读取配置参数[m
[31m-            $config = Config::get($config);[m
[31m-        }[m
[31m-        if (is_string($config)) {[m
[31m-            return self::parseDsn($config);[m
[31m-        } else {[m
[31m-            return $config;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * DSN解析[m
[31m-     * 格式： mysql://username:passwd@localhost:3306/DbName?param1=val1&param2=val2#utf8[m
[31m-     * @static[m
[31m-     * @access private[m
[31m-     * @param string $dsnStr[m
[31m-     * @return array[m
[31m-     */[m
[31m-    private static function parseDsn($dsnStr)[m
[31m-    {[m
[31m-        $info = parse_url($dsnStr);[m
[31m-        if (!$info) {[m
[31m-            return [];[m
[31m-        }[m
[31m-        $dsn = [[m
[31m-            'type'     => $info['scheme'],[m
[31m-            'username' => isset($info['user']) ? $info['user'] : '',[m
[31m-            'password' => isset($info['pass']) ? $info['pass'] : '',[m
[31m-            'hostname' => isset($info['host']) ? $info['host'] : '',[m
[31m-            'hostport' => isset($info['port']) ? $info['port'] : '',[m
[31m-            'database' => !empty($info['path']) ? ltrim($info['path'], '/') : '',[m
[31m-            'charset'  => isset($info['fragment']) ? $info['fragment'] : 'utf8',[m
[31m-        ];[m
[31m-[m
[31m-        if (isset($info['query'])) {[m
[31m-            parse_str($info['query'], $dsn['params']);[m
[31m-        } else {[m
[31m-            $dsn['params'] = [];[m
[31m-        }[m
[31m-        return $dsn;[m
[31m-    }[m
[31m-[m
[31m-    // 调用驱动类的方法[m
[31m-    public static function __callStatic($method, $params)[m
[31m-    {[m
[31m-        if (is_null(self::$instance)) {[m
[31m-            // 自动初始化数据库[m
[31m-            self::connect();[m
[31m-        }[m
[31m-        return call_user_func_array([self::$instance, $method], $params);[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Debug.php b/thinkphp/library/think/Debug.php[m
[1mdeleted file mode 100644[m
[1mindex 89feea7..0000000[m
[1m--- a/thinkphp/library/think/Debug.php[m
[1m+++ /dev/null[m
[36m@@ -1,180 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Debug[m
[31m-{[m
[31m-    // 区间时间信息[m
[31m-    protected static $info = [];[m
[31m-    // 区间内存信息[m
[31m-    protected static $mem = [];[m
[31m-[m
[31m-    /**[m
[31m-     * 记录时间（微秒）和内存使用情况[m
[31m-     * @param string $name 标记位置[m
[31m-     * @param mixed $value 标记值 留空则取当前 time 表示仅记录时间 否则同时记录时间和内存[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function remark($name, $value = '')[m
[31m-    {[m
[31m-        // 记录时间和内存使用[m
[31m-        self::$info[$name] = is_float($value) ? $value : microtime(true);[m
[31m-        if ('time' != $value) {[m
[31m-            self::$mem['mem'][$name]  = is_float($value) ? $value : memory_get_usage();[m
[31m-            self::$mem['peak'][$name] = memory_get_peak_usage();[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 统计某个区间的时间（微秒）使用情况[m
[31m-     * @param string $start 开始标签[m
[31m-     * @param string $end 结束标签[m
[31m-     * @param integer|string $dec 小数位[m
[31m-     * @return integer[m
[31m-     */[m
[31m-    public static function getRangeTime($start, $end, $dec = 6)[m
[31m-    {[m
[31m-        if (!isset(self::$info[$end])) {[m
[31m-            self::$info[$end] = microtime(true);[m
[31m-        }[m
[31m-        return number_format((self::$info[$end] - self::$info[$start]), $dec);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 统计从开始到统计时的时间（微秒）使用情况[m
[31m-     * @param integer|string $dec 小数位[m
[31m-     * @return integer[m
[31m-     */[m
[31m-    public static function getUseTime($dec = 6)[m
[31m-    {[m
[31m-        return number_format((microtime(true) - START_TIME), $dec);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取当前访问的吞吐率情况[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public static function getThroughputRate()[m
[31m-    {[m
[31m-        return number_format(1 / self::getUseTime(), 2) . 'req/s';[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 记录区间的内存使用情况[m
[31m-     * @param string $start 开始标签[m
[31m-     * @param string $end 结束标签[m
[31m-     * @param integer|string $dec 小数位[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public static function getRangeMem($start, $end, $dec = 2)[m
[31m-    {[m
[31m-        if (!isset(self::$mem['mem'][$end])) {[m
[31m-            self::$mem['mem'][$end] = memory_get_usage();[m
[31m-        }[m
[31m-        $size = self::$mem['mem'][$end] - self::$mem['mem'][$start];[m
[31m-        $a    = ['B', 'KB', 'MB', 'GB', 'TB'];[m
[31m-        $pos  = 0;[m
[31m-        while ($size >= 1024) {[m
[31m-            $size /= 1024;[m
[31m-            $pos++;[m
[31m-        }[m
[31m-        return round($size, $dec) . " " . $a[$pos];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 统计从开始到统计时的内存使用情况[m
[31m-     * @param integer|string $dec 小数位[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public static function getUseMem($dec = 2)[m
[31m-    {[m
[31m-        $size = memory_get_usage() - START_MEM;[m
[31m-        $a    = ['B', 'KB', 'MB', 'GB', 'TB'];[m
[31m-        $pos  = 0;[m
[31m-        while ($size >= 1024) {[m
[31m-            $size /= 1024;[m
[31m-            $pos++;[m
[31m-        }[m
[31m-        return round($size, $dec) . " " . $a[$pos];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 统计区间的内存峰值情况[m
[31m-     * @param string $start 开始标签[m
[31m-     * @param string $end 结束标签[m
[31m-     * @param integer|string $dec 小数位[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function getMemPeak($start, $end, $dec = 2)[m
[31m-    {[m
[31m-        if (!isset(self::$mem['peak'][$end])) {[m
[31m-            self::$mem['peak'][$end] = memory_get_peak_usage();[m
[31m-        }[m
[31m-        $size = self::$mem['peak'][$end] - self::$mem['peak'][$start];[m
[31m-        $a    = ['B', 'KB', 'MB', 'GB', 'TB'];[m
[31m-        $pos  = 0;[m
[31m-        while ($size >= 1024) {[m
[31m-            $size /= 1024;[m
[31m-            $pos++;[m
[31m-        }[m
[31m-        return round($size, $dec) . " " . $a[$pos];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取文件加载信息[m
[31m-     * @param bool $detail 是否显示详细[m
[31m-     * @return integer|array[m
[31m-     */[m
[31m-    public static function getFile($detail = false)[m
[31m-    {[m
[31m-        if ($detail) {[m
[31m-            $files = get_included_files();[m
[31m-            $info  = [];[m
[31m-            foreach ($files as $key => $file) {[m
[31m-                $info[] = $file . ' ( ' . number_format(filesize($file) / 1024, 2) . ' KB )';[m
[31m-            }[m
[31m-            return $info;[m
[31m-        }[m
[31m-        return count(get_included_files());[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 浏览器友好的变量输出[m
[31m-     * @param mixed $var 变量[m
[31m-     * @param boolean $echo 是否输出 默认为true 如果为false 则返回输出字符串[m
[31m-     * @param string $label 标签 默认为空[m
[31m-     * @return void|string[m
[31m-     */[m
[31m-    public static function dump($var, $echo = true, $label = null)[m
[31m-    {[m
[31m-        $label = (null === $label) ? '' : rtrim($label) . ':';[m
[31m-        ob_start();[m
[31m-        var_dump($var);[m
[31m-        $output = ob_get_clean();[m
[31m-        $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output);[m
[31m-        if (IS_CLI) {[m
[31m-            $output = PHP_EOL . $label . $output . PHP_EOL;[m
[31m-        } else {[m
[31m-            if (!extension_loaded('xdebug')) {[m
[31m-                $output = htmlspecialchars($output, ENT_QUOTES);[m
[31m-            }[m
[31m-            $output = '<pre>' . $label . $output . '</pre>';[m
[31m-        }[m
[31m-        if ($echo) {[m
[31m-            echo ($output);[m
[31m-            return null;[m
[31m-        } else {[m
[31m-            return $output;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Error.php b/thinkphp/library/think/Error.php[m
[1mdeleted file mode 100644[m
[1mindex 0f237ae..0000000[m
[1m--- a/thinkphp/library/think/Error.php[m
[1m+++ /dev/null[m
[36m@@ -1,228 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: 麦当苗儿 <zuojiazi@vip.qq.com> <http://zjzit.cn>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-use think\exception\ErrorException;[m
[31m-[m
[31m-class Error[m
[31m-{[m
[31m-    /**[m
[31m-     * 注册异常处理[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function register()[m
[31m-    {[m
[31m-        set_error_handler([__CLASS__, 'appError']);[m
[31m-        set_exception_handler([__CLASS__, 'appException']);[m
[31m-        register_shutdown_function([__CLASS__, 'appShutdown']);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Exception Handler[m
[31m-     * @param  \Exception $exception[m
[31m-     * @return bool  true-禁止往下传播已处理过的异常[m
[31m-     */[m
[31m-    public static function appException($exception)[m
[31m-    {[m
[31m-        // 收集异常数据[m
[31m-        if (APP_DEBUG) {[m
[31m-            // 调试模式，获取详细的错误信息[m
[31m-            $data = [[m
[31m-                'name'    => get_class($exception),[m
[31m-                'file'    => $exception->getFile(),[m
[31m-                'line'    => $exception->getLine(),[m
[31m-                'message' => $exception->getMessage(),[m
[31m-                'trace'   => $exception->getTrace(),[m
[31m-                'code'    => self::getCode($exception),[m
[31m-                'source'  => self::getSourceCode($exception),[m
[31m-                'datas'   => self::getExtendData($exception),[m
[31m-[m
[31m-                'tables'  => [[m
[31m-                    'GET Data'              => $_GET,[m
[31m-                    'POST Data'             => $_POST,[m
[31m-                    'Files'                 => $_FILES,[m
[31m-                    'Cookies'               => $_COOKIE,[m
[31m-                    'Session'               => isset($_SESSION) ? $_SESSION : [],[m
[31m-                    'Server/Request Data'   => $_SERVER,[m
[31m-                    'Environment Variables' => $_ENV,[m
[31m-                    'ThinkPHP Constants'    => self::getTPConst(),[m
[31m-                ],[m
[31m-            ];[m
[31m-            $log = "[{$data['code']}]{$data['message']}[{$data['file']}:{$data['line']}]";[m
[31m-        } else {[m
[31m-            // 部署模式仅显示 Code 和 Message[m
[31m-            $data = [[m
[31m-                'code'    => $exception->getCode(),[m
[31m-                'message' => $exception->getMessage(),[m
[31m-            ];[m
[31m-            $log = "[{$data['code']}]{$data['message']}";[m
[31m-        }[m
[31m-[m
[31m-        // 记录异常日志[m
[31m-        Log::record($log, 'error');[m
[31m-[m
[31m-        /* 非API模式下的部署模式，跳转到指定的 Error Page */[m
[31m-        $error_page = Config::get('error_page');[m
[31m-        if (!(APP_DEBUG || IS_API) && !empty($error_page)) {[m
[31m-            header("Location: {$error_page}");[m
[31m-        } else {[m
[31m-            // 输出错误信息[m
[31m-            self::output($exception, $data);[m
[31m-        }[m
[31m-        // 禁止往下传播已处理过的异常[m
[31m-        return true;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Error Handler[m
[31m-     * @param  integer $errno   错误编号[m
[31m-     * @param  integer $errstr  详细错误信息[m
[31m-     * @param  string  $errfile 出错的文件[m
[31m-     * @param  integer $errline 出错行号[m
[31m-     * @return bool  true-禁止往下传播已处理过的异常[m
[31m-     */[m
[31m-    public static function appError($errno, $errstr, $errfile = null, $errline = 0, array $errcontext = [])[m
[31m-    {[m
[31m-        if ($errno & Config::get('exception_ignore_type')) {[m
[31m-            // 忽略的异常记录到日志[m
[31m-            Log::record("[{$errno}]{$errstr}[{$errfile}:{$errline}]", 'notice');[m
[31m-        } else {[m
[31m-            // 将错误信息托管至 think\exception\ErrorException[m
[31m-            throw new ErrorException($errno, $errstr, $errfile, $errline, $errcontext);[m
[31m-            // 禁止往下传播已处理过的异常[m
[31m-            return true;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Shutdown Handler[m
[31m-     * @return bool true-禁止往下传播已处理过的异常; false-未处理的异常继续传播[m
[31m-     */[m
[31m-    public static function appShutdown()[m
[31m-    {[m
[31m-        // 写入日志[m
[31m-        Log::save();[m
[31m-[m
[31m-        if ($error = error_get_last()) {[m
[31m-            // 将错误信息托管至think\ErrorException[m
[31m-            $exception = new ErrorException([m
[31m-                $error['type'],[m
[31m-                $error['message'],[m
[31m-                $error['file'],[m
[31m-                $error['line'][m
[31m-            );[m
[31m-[m
[31m-            /**[m
[31m-             * Shutdown handler 中的异常将不被往下传播[m
[31m-             * 所以，这里我们必须手动传播而不能像 Error handler 中那样 throw[m
[31m-             */[m
[31m-            self::appException($exception);[m
[31m-            // 禁止往下传播已处理过的异常[m
[31m-            return true;[m
[31m-        }[m
[31m-        return false;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 输出异常信息[m
[31m-     * @param  \Exception $exception[m
[31m-     * @param  array      $data      异常信息[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function output($exception, array $data)[m
[31m-    {[m
[31m-        http_response_code($exception instanceof Exception ? $exception->getHttpStatus() : 500);[m
[31m-[m
[31m-        $type = Config::get('default_return_type');[m
[31m-        if (!APP_DEBUG && !Config::get('show_error_msg')) {[m
[31m-            // 不显示详细错误信息[m
[31m-            $data['message'] = Config::get('error_message');[m
[31m-        }[m
[31m-        if (IS_API && 'html' != $type) {[m
[31m-            // 异常信息输出监听[m
[31m-            APP_HOOK && Hook::listen('error_output', $data);[m
[31m-            // 输出异常内容[m
[31m-            Response::send($data, $type, Config::get('response_return'));[m
[31m-        } else {[m
[31m-            //ob_end_clean();[m
[31m-            extract($data);[m
[31m-            include Config::get('exception_tmpl');[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取错误编码[m
[31m-     * ErrorException则使用错误级别作为错误编码[m
[31m-     * @param  \Exception $exception[m
[31m-     * @return integer                错误编码[m
[31m-     */[m
[31m-    private static function getCode($exception)[m
[31m-    {[m
[31m-        $code = $exception->getCode();[m
[31m-        if (!$code && $exception instanceof ErrorException) {[m
[31m-            $code = $exception->getSeverity();[m
[31m-        }[m
[31m-        return $code;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取出错文件内容[m
[31m-     * 获取错误的前9行和后9行[m
[31m-     * @param  \Exception $exception[m
[31m-     * @return array                 错误文件内容[m
[31m-     */[m
[31m-    private static function getSourceCode($exception)[m
[31m-    {[m
[31m-        // 读取前9行和后9行[m
[31m-        $line  = $exception->getLine();[m
[31m-        $first = ($line - 9 > 0) ? $line - 9 : 1;[m
[31m-[m
[31m-        try {[m
[31m-            $contents = file($exception->getFile());[m
[31m-            $source   = [[m
[31m-                'first'  => $first,[m
[31m-                'source' => array_slice($contents, $first - 1, 19),[m
[31m-            ];[m
[31m-        } catch (Exception $e) {[m
[31m-            $source = [];[m
[31m-        }[m
[31m-        return $source;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取异常扩展信息[m
[31m-     * 用于非调试模式html返回类型显示[m
[31m-     * @param  \Exception $exception[m
[31m-     * @return array                 异常类定义的扩展数据[m
[31m-     */[m
[31m-    private static function getExtendData($exception)[m
[31m-    {[m
[31m-        $data = [];[m
[31m-        if ($exception instanceof Exception) {[m
[31m-            $data = $exception->getData();[m
[31m-        }[m
[31m-        return $data;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取ThinkPHP常量列表[m
[31m-     * @return array 常量列表[m
[31m-     */[m
[31m-    private static function getTPConst()[m
[31m-    {[m
[31m-        $consts = ['THINK_VERSION', 'THINK_PATH', 'LIB_PATH', 'EXTEND_PATH', 'MODE_PATH', 'CORE_PATH', 'TRAIT_PATH', 'APP_PATH', 'RUNTIME_PATH', 'LOG_PATH', 'CACHE_PATH', 'TEMP_PATH', 'MODULE_PATH', 'VIEW_PATH', 'APP_NAMESPACE', 'COMMON_MODULE', 'APP_MULTI_MODULE', 'MODULE_ALIAS', 'MODULE_NAME', 'CONTROLLER_NAME', 'ACTION_NAME', 'MODEL_LAYER', 'VIEW_LAYER', 'CONTROLLER_LAYER', 'APP_DEBUG', 'APP_HOOK', 'ENV_PREFIX', 'IS_API', 'VENDOR_PATH', 'APP_AUTO_RUN', 'APP_MODE', 'REQUEST_METHOD', 'IS_CGI', 'IS_WIN', 'IS_API', 'IS_CLI', 'IS_GET', 'IS_POST', 'IS_PUT', 'IS_AJAX', 'IS_DELETE', 'NOW_TIME', 'LANG_SET', 'EXT', 'DS', '__INFO__', '__EXT__'];[m
[31m-        foreach ($consts as $const) {[m
[31m-            $data[$const] = defined($const) ? constant($const) : 'undefined';[m
[31m-        }[m
[31m-        return $data;[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Exception.php b/thinkphp/library/think/Exception.php[m
[1mdeleted file mode 100644[m
[1mindex abf3201..0000000[m
[1m--- a/thinkphp/library/think/Exception.php[m
[1m+++ /dev/null[m
[36m@@ -1,71 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: 麦当苗儿 <zuojiazi@vip.qq.com> <http://zjzit.cn>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-/**[m
[31m- * ThinkPHP核心异常类[m
[31m- * 所有系统异常必须继承该类[m
[31m- */[m
[31m-class Exception extends \Exception[m
[31m-{[m
[31m-    /**[m
[31m-     * 系统异常后发送给客户端的HTTP Status[m
[31m-     * @var integer[m
[31m-     */[m
[31m-    protected $httpStatus = 500;[m
[31m-[m
[31m-    /**[m
[31m-     * 保存异常页面显示的额外Debug数据[m
[31m-     * @var array[m
[31m-     */[m
[31m-    protected $data = [];[m
[31m-[m
[31m-    /**[m
[31m-     * 设置异常额外的Debug数据[m
[31m-     * 数据将会显示为下面的格式[m
[31m-     *[m
[31m-     * Exception Data[m
[31m-     * --------------------------------------------------[m
[31m-     * Label 1[m
[31m-     *   key1      value1[m
[31m-     *   key2      value2[m
[31m-     * Label 2[m
[31m-     *   key1      value1[m
[31m-     *   key2      value2[m
[31m-     *[m
[31m-     * @param string $label 数据分类，用于异常页面显示[m
[31m-     * @param Array  $data  需要显示的数据，必须为关联数组[m
[31m-     */[m
[31m-    final protected function setData($label, array $data)[m
[31m-    {[m
[31m-        $this->data[$label] = $data;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取异常额外Debug数据[m
[31m-     * 主要用于输出到异常页面便于调试[m
[31m-     * @return array 由setData设置的Debug数据[m
[31m-     */[m
[31m-    final public function getData()[m
[31m-    {[m
[31m-        return $this->data;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取要发送给客户端的HTTP Status[m
[31m-     * @return integer HTTP Status[m
[31m-     */[m
[31m-    final public function getHttpStatus()[m
[31m-    {[m
[31m-        return $this->httpStatus;[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Hook.php b/thinkphp/library/think/Hook.php[m
[1mdeleted file mode 100644[m
[1mindex f5e55af..0000000[m
[1m--- a/thinkphp/library/think/Hook.php[m
[1m+++ /dev/null[m
[36m@@ -1,130 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Hook[m
[31m-{[m
[31m-[m
[31m-    private static $tags = [];[m
[31m-[m
[31m-    /**[m
[31m-     * 动态添加行为扩展到某个标签[m
[31m-     * @param string $tag 标签名称[m
[31m-     * @param mixed $behavior 行为名称[m
[31m-     * @param bool $first 是否放到开头执行[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function add($tag, $behavior, $first = false)[m
[31m-    {[m
[31m-        if (!isset(self::$tags[$tag])) {[m
[31m-            self::$tags[$tag] = [];[m
[31m-        }[m
[31m-        if (is_array($behavior)) {[m
[31m-            self::$tags[$tag] = array_merge(self::$tags[$tag], $behavior);[m
[31m-        } elseif ($first) {[m
[31m-            array_unshift(self::$tags[$tag], $behavior);[m
[31m-        } else {[m
[31m-            self::$tags[$tag][] = $behavior;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 批量导入插件[m
[31m-     * @param array $data 插件信息[m
[31m-     * @param boolean $recursive 是否递归合并[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function import(array $tags, $recursive = true)[m
[31m-    {[m
[31m-        if (!$recursive) {[m
[31m-            // 覆盖导入[m
[31m-            self::$tags = array_merge(self::$tags, $tags);[m
[31m-        } else {[m
[31m-            // 合并导入[m
[31m-            foreach ($tags as $tag => $val) {[m
[31m-                if (!isset(self::$tags[$tag])) {[m
[31m-                    self::$tags[$tag] = [];[m
[31m-                }[m
[31m-[m
[31m-                if (!empty($val['_overlay'])) {[m
[31m-                    // 可以针对某个标签指定覆盖模式[m
[31m-                    unset($val['_overlay']);[m
[31m-                    self::$tags[$tag] = $val;[m
[31m-                } else {[m
[31m-                    // 合并模式[m
[31m-                    self::$tags[$tag] = array_merge(self::$tags[$tag], $val);[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取插件信息[m
[31m-     * @param string $tag 插件位置 留空获取全部[m
[31m-     * @return array[m
[31m-     */[m
[31m-    public static function get($tag = '')[m
[31m-    {[m
[31m-        if (empty($tag)) {[m
[31m-            // 获取全部的插件信息[m
[31m-            return self::$tags;[m
[31m-        } else {[m
[31m-            return self::$tags[$tag];[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 监听标签的行为[m
[31m-     * @param string $tag 标签名称[m
[31m-     * @param mixed $params 传入参数[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function listen($tag, &$params = null)[m
[31m-    {[m
[31m-        if (isset(self::$tags[$tag])) {[m
[31m-            foreach (self::$tags[$tag] as $name) {[m
[31m-[m
[31m-                if (APP_DEBUG) {[m
[31m-                    Debug::remark('behavior_start', 'time');[m
[31m-                }[m
[31m-[m
[31m-                $result = self::exec($name, $tag, $params);[m
[31m-[m
[31m-                if (APP_DEBUG) {[m
[31m-                    Debug::remark('behavior_end', 'time');[m
[31m-                    Log::record('[ BEHAVIOR ] Run ' . ($name instanceof \Closure ? 'Closure' : $name) . ' @' . $tag . ' [ RunTime:' . Debug::getRangeTime('behavior_start', 'behavior_end') . 's ]', 'info');[m
[31m-                }[m
[31m-                if (false === $result) {[m
[31m-                    // 如果返回false 则中断行为执行[m
[31m-                    return;[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        return;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 执行某个行为[m
[31m-     * @param string $class 行为类名称[m
[31m-     * @param string $tag 方法名（标签名）[m
[31m-     * @param Mixed $params 传人的参数[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function exec($class, $tag = '', &$params = null)[m
[31m-    {[m
[31m-        if ($class instanceof \Closure) {[m
[31m-            return $class($params);[m
[31m-        }[m
[31m-        $obj = new $class();[m
[31m-        return ($tag && is_callable([$obj, $tag])) ? $obj->$tag($params) : $obj->run($params);[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Input.php b/thinkphp/library/think/Input.php[m
[1mdeleted file mode 100644[m
[1mindex 28a565d..0000000[m
[1m--- a/thinkphp/library/think/Input.php[m
[1m+++ /dev/null[m
[36m@@ -1,433 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Input[m
[31m-{[m
[31m-    // 全局过滤规则[m
[31m-    public static $filters;[m
[31m-[m
[31m-    /**[m
[31m-     * 获取get变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function get($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_GET, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取post变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function post($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_POST, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取put变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function put($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        static $_PUT = null;[m
[31m-        if (is_null($_PUT)) {[m
[31m-            parse_str(file_get_contents('php://input'), $_PUT);[m
[31m-        }[m
[31m-        return self::data($_PUT, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-    [m
[31m-    /**[m
[31m-     * 获取delete变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function delete($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        static $_DELETE = null;[m
[31m-        if (is_null($_DELETE)) {[m
[31m-            parse_str(file_get_contents('php://input'), $_DELETE);[m
[31m-            $_DELETE = array_merge($_DELETE, $_GET);[m
[31m-        }[m
[31m-        return self::data($_DELETE, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 根据请求方法获取变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function param($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        switch ($_SERVER['REQUEST_METHOD']) {[m
[31m-            case 'POST':[m
[31m-                $method = 'post';[m
[31m-                break;[m
[31m-            case 'PUT':[m
[31m-                $method = 'put';[m
[31m-                break;[m
[31m-            case 'DELETE':[m
[31m-                $method = 'delete';[m
[31m-                break;[m
[31m-            default:[m
[31m-                $method = 'get';[m
[31m-        }[m
[31m-        return self::$method($name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取request变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function request($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_REQUEST, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取session变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function session($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_SESSION, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取cookie变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function cookie($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_COOKIE, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取post变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function server($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_SERVER, strtoupper($name), $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取GLOBALS变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function globals($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($GLOBALS, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取环境变量[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function env($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_ENV, strtoupper($name), $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取PATH_INFO[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function path($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        if (!empty($_SERVER['PATH_INFO'])) {[m
[31m-            $depr  = \think\Config::get('pathinfo_depr');[m
[31m-            $input = explode($depr, trim($_SERVER['PATH_INFO'], $depr));[m
[31m-            return self::data($input, $name, $default, $filter, $merge);[m
[31m-        } else {[m
[31m-            return $default;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取$_FILES[m
[31m-     * @param string $name 数据名称[m
[31m-     * @param string $default 默认值[m
[31m-     * @param string $filter 过滤方法[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function file($name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        return self::data($_FILES, $name, $default, $filter, $merge);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取变量 支持过滤和默认值[m
[31m-     * @param array $input 数据源[m
[31m-     * @param string $name 字段名[m
[31m-     * @param mixed $default 默认值[m
[31m-     * @param mixed $filter 过滤函数[m
[31m-     * @param boolean $merge 是否与默认的过虑方法合并[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function data($input, $name = '', $default = null, $filter = null, $merge = false)[m
[31m-    {[m
[31m-        if (0 === strpos($name, '?')) {[m
[31m-            return self::has(substr($name, 1), $input);[m
[31m-        }[m
[31m-        if (!empty($input)) {[m
[31m-            $data = $input;[m
[31m-            $name = (string) $name;[m
[31m-            if ('' != $name) {[m
[31m-                // 解析name[m
[31m-                list($name, $type) = static::parseName($name);[m
[31m-                // 按.拆分成多维数组进行判断[m
[31m-                foreach (explode('.', $name) as $val) {[m
[31m-                    if (isset($data[$val])) {[m
[31m-                        $data = $data[$val];[m
[31m-                    } else {[m
[31m-                        // 无输入数据，返回默认值[m
[31m-                        return $default;[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-[m
[31m-            // 解析过滤器[m
[31m-            $filters = static::parseFilter($filter, $merge);[m
[31m-            // 为方便传参把默认值附加在过滤器后面[m
[31m-            $filters[] = $default;[m
[31m-            if (is_array($data)) {[m
[31m-                array_walk_recursive($data, 'self::filter', $filters);[m
[31m-            } else {[m
[31m-                self::filter($data, $name ?: 0, $filters);[m
[31m-            }[m
[31m-            if (isset($type) && $data !== $default) {[m
[31m-                // 强制类型转换[m
[31m-                static::typeCast($data, $type);[m
[31m-            }[m
[31m-        } else {[m
[31m-            $data = $default;[m
[31m-        }[m
[31m-        return $data;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 判断一个变量是否设置[m
[31m-     * @param string $name[m
[31m-     * @param array $data[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    public static function has($name, $data)[m
[31m-    {[m
[31m-        foreach (explode('.', $name) as $val) {[m
[31m-            if (!isset($data[$val])) {[m
[31m-                return false;[m
[31m-            } else {[m
[31m-                $data = $data[$val];[m
[31m-            }[m
[31m-        }[m
[31m-        return true;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置默认的过滤函数[m
[31m-     * @param string|array $name[m
[31m-     * @return array[m
[31m-     */[m
[31m-    public static function setFilter($name)[m
[31m-    {[m
[31m-        if (is_string($name)) {[m
[31m-            $name = explode(',', $name);[m
[31m-        }[m
[31m-        static::$filters = $name;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 过滤表单中的表达式[m
[31m-     * @param string $value[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function filterExp(&$value)[m
[31m-    {[m
[31m-        // TODO 其他安全过滤[m
[31m-[m
[31m-        // 过滤查询特殊字符[m
[31m-        if (preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i', $value)) {[m
[31m-            $value .= ' ';[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 递归过滤给定的值[m
[31m-     * @param mixed $value 键值[m
[31m-     * @param mixed $key 键名[m
[31m-     * @param array $filters 过滤方法+默认值[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    private static function filter(&$value, $key, $filters)[m
[31m-    {[m
[31m-        // 分离出默认值[m
[31m-        $default = array_pop($filters);[m
[31m-        foreach ($filters as $filter) {[m
[31m-            if (is_callable($filter)) {[m
[31m-                // 调用函数过滤[m
[31m-                $value = call_user_func($filter, $value);[m
[31m-            } else {[m
[31m-                $begin = substr($filter, 0, 1);[m
[31m-                if (in_array($begin, ['/', '#', '~']) && $begin == $end = substr($filter, -1)) {[m
[31m-                    // 正则过滤[m
[31m-                    if (!preg_match($filter, $value)) {[m
[31m-                        // 匹配不成功返回默认值[m
[31m-                        $value = $default;[m
[31m-                        break;[m
[31m-                    }[m
[31m-                } else {[m
[31m-                    // filter函数不存在时, 则使用filter_var进行过滤[m
[31m-                    // filter为非整形值时, 调用filter_id取得过滤id[m
[31m-                    $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));[m
[31m-                    if (false === $value) {[m
[31m-                        // 不通过过滤器则返回默认值[m
[31m-                        $value = $default;[m
[31m-                        break;[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        self::filterExp($value);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 解析name[m
[31m-     * @param string $name[m
[31m-     * @return array 返回name和类型[m
[31m-     */[m
[31m-    private static function parseName($name)[m
[31m-    {[m
[31m-        return strpos($name, '/') ? explode('/', $name, 2) : [$name, 's'];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 解析过滤器[m
[31m-     * @param mixed $filter[m
[31m-     * @return array[m
[31m-     */[m
[31m-    private static function parseFilter($filter, $merge = false)[m
[31m-    {[m
[31m-        if (is_null($filter)) {[m
[31m-            $result = self::getFilter();[m
[31m-        } elseif (empty($filter)) {[m
[31m-            $result = [];[m
[31m-        } else {[m
[31m-            if (is_array($filter)) {[m
[31m-                $result = $filter;[m
[31m-            } elseif (is_string($filter) && strpos($filter, ',')) {[m
[31m-                $result = explode(',', $filter);[m
[31m-            } else {[m
[31m-                $result = [$filter];[m
[31m-            }[m
[31m-            if ($merge) {[m
[31m-                // 与默认的过滤函数合并[m
[31m-                $result = array_merge(self::getFilter(), array_diff($result, self::getFilter()));[m
[31m-            }[m
[31m-        }[m
[31m-        return $result;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取过滤方法[m
[31m-     * @return array[m
[31m-     */[m
[31m-    private static function getFilter()[m
[31m-    {[m
[31m-        if (is_null(static::$filters)) {[m
[31m-            // 从配置项中读取[m
[31m-            $filters         = \think\Config::get('default_filter');[m
[31m-            static::$filters = empty($filters) ? [] : (is_array($filters) ? $filters : explode(',', $filters));[m
[31m-        }[m
[31m-        return static::$filters;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 强类型转换[m
[31m-     * @param string $data[m
[31m-     * @param string $type[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    private static function typeCast(&$data, $type)[m
[31m-    {[m
[31m-        switch (strtolower($type)) {[m
[31m-            // 数组[m
[31m-            case 'a':[m
[31m-                $data = (array) $data;[m
[31m-                break;[m
[31m-            // 数字[m
[31m-            case 'd':[m
[31m-                $data = (int) $data;[m
[31m-                break;[m
[31m-            // 浮点[m
[31m-            case 'f':[m
[31m-                $data = (float) $data;[m
[31m-                break;[m
[31m-            // 布尔[m
[31m-            case 'b':[m
[31m-                $data = (boolean) $data;[m
[31m-                break;[m
[31m-            // 字符串[m
[31m-            case 's':[m
[31m-            default:[m
[31m-                $data = (string) $data;[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Lang.php b/thinkphp/library/think/Lang.php[m
[1mdeleted file mode 100644[m
[1mindex 22bccc9..0000000[m
[1m--- a/thinkphp/library/think/Lang.php[m
[1m+++ /dev/null[m
[36m@@ -1,150 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Lang[m
[31m-{[m
[31m-    // 语言参数[m
[31m-    private static $lang = [];[m
[31m-    // 语言作用域[m
[31m-    private static $range = 'zh-cn';[m
[31m-[m
[31m-    // 设定语言参数的作用域（语言）[m
[31m-    public static function range($range = '')[m
[31m-    {[m
[31m-        if ('' == $range) {[m
[31m-            return self::$range;[m
[31m-        } else {[m
[31m-            self::$range = $range;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置语言定义(不区分大小写)[m
[31m-     * @param string|array $name 语言变量[m
[31m-     * @param string $value 语言值[m
[31m-     * @param string $range 作用域[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function set($name, $value = null, $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        // 批量定义[m
[31m-        if (!isset(self::$lang[$range])) {[m
[31m-            self::$lang[$range] = [];[m
[31m-        }[m
[31m-        if (is_array($name)) {[m
[31m-            return self::$lang[$range] = array_change_key_case($name) + self::$lang[$range];[m
[31m-        } else {[m
[31m-            return self::$lang[$range][strtolower($name)] = $value;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 加载语言定义(不区分大小写)[m
[31m-     * @param string $file 语言文件[m
[31m-     * @param string $range 作用域[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function load($file, $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        if (!isset(self::$lang[$range])) {[m
[31m-            self::$lang[$range] = [];[m
[31m-        }[m
[31m-        // 批量定义[m
[31m-        if (is_string($file)) {[m
[31m-            $file = [$file];[m
[31m-        }[m
[31m-        $lang = [];[m
[31m-        foreach ($file as $_file) {[m
[31m-            // 记录加载信息[m
[31m-            APP_DEBUG && Log::record('[ LANG ] ' . $_file, 'info');[m
[31m-            $_lang = is_file($_file) ? include $_file : [];[m
[31m-            $lang  = array_change_key_case($_lang) + $lang;[m
[31m-        }[m
[31m-        if (!empty($lang)) {[m
[31m-            self::$lang[$range] = $lang + self::$lang[$range];[m
[31m-        }[m
[31m-        return self::$lang[$range];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取语言定义(不区分大小写)[m
[31m-     * @param string|null $name 语言变量[m
[31m-     * @param array $vars 变量替换[m
[31m-     * @param string $range 作用域[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function get($name = null, $vars = [], $range = '')[m
[31m-    {[m
[31m-        $range = $range ?: self::$range;[m
[31m-        // 空参数返回所有定义[m
[31m-        if (empty($name)) {[m
[31m-            return self::$lang[$range];[m
[31m-        }[m
[31m-        $key   = strtolower($name);[m
[31m-        $value = isset(self::$lang[$range][$key]) ? self::$lang[$range][$key] : $name;[m
[31m-[m
[31m-        // 变量解析[m
[31m-        if (!empty($vars) && is_array($vars)) {[m
[31m-            /**[m
[31m-             * Notes:[m
[31m-             * 为了检测的方便，数字索引的判断仅仅是参数数组的第一个元素的key为数字0[m
[31m-             * 数字索引采用的是系统的 sprintf 函数替换，用法请参考 sprintf 函数[m
[31m-             */[m
[31m-            if (key($vars) === 0) {[m
[31m-                // 数字索引解析[m
[31m-                array_unshift($vars, $value);[m
[31m-                $value = call_user_func_array('sprintf', $vars);[m
[31m-            } else {[m
[31m-                // 关联索引解析[m
[31m-                $replace = array_keys($vars);[m
[31m-                foreach ($replace as &$v) {[m
[31m-                    $v = "{:{$v}}";[m
[31m-                }[m
[31m-                $value = str_replace($replace, $vars, $value);[m
[31m-            }[m
[31m-[m
[31m-        }[m
[31m-        return $value;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 自动侦测设置获取语言选择[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function detect()[m
[31m-    {[m
[31m-        // 自动侦测设置获取语言选择[m
[31m-        $langCookieVar = Config::get('lang_cookie_var');[m
[31m-        $langDetectVar = Config::get('lang_detect_var');[m
[31m-        $langSet       = '';[m
[31m-        if (isset($_GET[$langDetectVar])) {[m
[31m-            // url中设置了语言变量[m
[31m-            $langSet = strtolower($_GET[$langDetectVar]);[m
[31m-            \think\Cookie::set($langCookieVar, $langSet, 3600);[m
[31m-        } elseif (\think\Cookie::get($langCookieVar)) {[m
[31m-            // 获取上次用户的选择[m
[31m-            $langSet = strtolower(\think\Cookie::get($langCookieVar));[m
[31m-        } elseif (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {[m
[31m-            // 自动侦测浏览器语言[m
[31m-            preg_match('/^([a-z\d\-]+)/i', $_SERVER['HTTP_ACCEPT_LANGUAGE'], $matches);[m
[31m-            $langSet = strtolower($matches[1]);[m
[31m-            \think\Cookie::set($langCookieVar, $langSet, 3600);[m
[31m-        }[m
[31m-        if (in_array($langSet, \think\Config::get('lang_list'))) {[m
[31m-            // 合法的语言[m
[31m-            self::$range = $langSet;[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Loader.php b/thinkphp/library/think/Loader.php[m
[1mdeleted file mode 100644[m
[1mindex beb4b4f..0000000[m
[1m--- a/thinkphp/library/think/Loader.php[m
[1m+++ /dev/null[m
[36m@@ -1,480 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Loader[m
[31m-{[m
[31m-    // 类名映射[m
[31m-    protected static $map = [];[m
[31m-    // 加载列表[m
[31m-    protected static $load = [];[m
[31m-    // 命名空间[m
[31m-    protected static $namespace = [];[m
[31m-    // 命名空间别名[m
[31m-    protected static $namespaceAlias = [];[m
[31m-    // PSR-4[m
[31m-    private static $prefixLengthsPsr4 = [];[m
[31m-    private static $prefixDirsPsr4    = [];[m
[31m-    // PSR-0[m
[31m-    private static $prefixesPsr0 = [];[m
[31m-[m
[31m-    // 自动加载[m
[31m-    public static function autoload($class)[m
[31m-    {[m
[31m-        // 检测命名空间别名[m
[31m-        if (!empty(self::$namespaceAlias)) {[m
[31m-            $namespace = dirname($class);[m
[31m-            if (isset(self::$namespaceAlias[$namespace])) {[m
[31m-                $original = self::$namespaceAlias[$namespace] . '\\' . basename($class);[m
[31m-                if (class_exists($original)) {[m
[31m-                    return class_alias($original, $class, false);[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        // 检查是否定义类库映射[m
[31m-        if (isset(self::$map[$class])) {[m
[31m-            if (is_file(self::$map[$class])) {[m
[31m-                // 记录加载信息[m
[31m-                APP_DEBUG && self::$load[] = self::$map[$class];[m
[31m-                include self::$map[$class];[m
[31m-            } else {[m
[31m-                return false;[m
[31m-            }[m
[31m-        } elseif ($file = self::findFileInComposer($class)) {[m
[31m-            // Composer自动加载[m
[31m-            // 记录加载信息[m
[31m-            APP_DEBUG && self::$load[] = $file;[m
[31m-            include $file;[m
[31m-        } else {[m
[31m-            // 命名空间自动加载[m
[31m-            if (!strpos($class, '\\')) {[m
[31m-                return false;[m
[31m-            }[m
[31m-            // 解析命名空间[m
[31m-            list($name, $class) = explode('\\', $class, 2);[m
[31m-            if (isset(self::$namespace[$name])) {[m
[31m-                // 注册的命名空间[m
[31m-                $path = self::$namespace[$name];[m
[31m-            } elseif (is_dir(EXTEND_PATH . $name)) {[m
[31m-                // 扩展类库命名空间[m
[31m-                $path = EXTEND_PATH . $name . DS;[m
[31m-            } else {[m
[31m-                return false;[m
[31m-            }[m
[31m-            $filename = $path . str_replace('\\', DS, $class) . EXT;[m
[31m-            if (is_file($filename)) {[m
[31m-                // 开启调试模式Win环境严格区分大小写[m
[31m-                if (APP_DEBUG && IS_WIN && false === strpos(realpath($filename), $class . EXT)) {[m
[31m-                    return false;[m
[31m-                }[m
[31m-                // 记录加载信息[m
[31m-                APP_DEBUG && self::$load[] = $filename;[m
[31m-                include $filename;[m
[31m-            } else {[m
[31m-                Log::record('autoloader error : ' . $filename, 'notice');[m
[31m-                return false;[m
[31m-            }[m
[31m-        }[m
[31m-        return true;[m
[31m-    }[m
[31m-[m
[31m-    // 注册classmap[m
[31m-    public static function addMap($class, $map = '')[m
[31m-    {[m
[31m-        if (is_array($class)) {[m
[31m-            self::$map = array_merge(self::$map, $class);[m
[31m-        } else {[m
[31m-            self::$map[$class] = $map;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 注册命名空间[m
[31m-    public static function addNamespace($namespace, $path = '')[m
[31m-    {[m
[31m-        if (is_array($namespace)) {[m
[31m-            self::$namespace = array_merge(self::$namespace, $namespace);[m
[31m-        } else {[m
[31m-            self::$namespace[$namespace] = $path;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 注册命名空间别名[m
[31m-    public static function addNamespaceAlias($namespace, $original = '')[m
[31m-    {[m
[31m-        if (is_array($namespace)) {[m
[31m-            self::$namespaceAlias = array_merge(self::$namespace, $namespace);[m
[31m-        } else {[m
[31m-            self::$namespaceAlias[$namespace] = $original;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 注册自动加载机制[m
[31m-    public static function register($autoload = '')[m
[31m-    {[m
[31m-        // 注册系统自动加载[m
[31m-        spl_autoload_register($autoload ? $autoload : 'think\\Loader::autoload');[m
[31m-        // 注册composer自动加载[m
[31m-        self::registerComposerLoader();[m
[31m-    }[m
[31m-[m
[31m-    // 注册composer自动加载[m
[31m-    private static function registerComposerLoader()[m
[31m-    {[m
[31m-        if (is_file(VENDOR_PATH . 'composer/autoload_namespaces.php')) {[m
[31m-            $map = require VENDOR_PATH . 'composer/autoload_namespaces.php';[m
[31m-            foreach ($map as $namespace => $path) {[m
[31m-                self::$prefixesPsr0[$namespace[0]][$namespace] = (array) $path;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (is_file(VENDOR_PATH . 'composer/autoload_psr4.php')) {[m
[31m-            $map = require VENDOR_PATH . 'composer/autoload_psr4.php';[m
[31m-            foreach ($map as $namespace => $path) {[m
[31m-                $length = strlen($namespace);[m
[31m-                if ('\\' !== $namespace[$length - 1]) {[m
[31m-                    throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");[m
[31m-                }[m
[31m-                self::$prefixLengthsPsr4[$namespace[0]][$namespace] = $length;[m
[31m-                self::$prefixDirsPsr4[$namespace]                   = (array) $path;[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (is_file(VENDOR_PATH . 'composer/autoload_classmap.php')) {[m
[31m-            $classMap = require VENDOR_PATH . 'composer/autoload_classmap.php';[m
[31m-            if ($classMap) {[m
[31m-                self::addMap($classMap);[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        if (is_file(VENDOR_PATH . 'composer/autoload_files.php')) {[m
[31m-            $includeFiles = require VENDOR_PATH . 'composer/autoload_files.php';[m
[31m-            foreach ($includeFiles as $fileIdentifier => $file) {[m
[31m-                self::composerRequire($fileIdentifier, $file);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    private static function composerRequire($fileIdentifier, $file)[m
[31m-    {[m
[31m-        if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {[m
[31m-            require $file;[m
[31m-            $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    private static function findFileInComposer($class, $ext = '.php')[m
[31m-    {[m
[31m-        // PSR-4 lookup[m
[31m-        $logicalPathPsr4 = strtr($class, '\\', DS) . $ext;[m
[31m-[m
[31m-        $first = $class[0];[m
[31m-        if (isset(self::$prefixLengthsPsr4[$first])) {[m
[31m-            foreach (self::$prefixLengthsPsr4[$first] as $prefix => $length) {[m
[31m-                if (0 === strpos($class, $prefix)) {[m
[31m-                    foreach (self::$prefixDirsPsr4[$prefix] as $dir) {[m
[31m-                        if (file_exists($file = $dir . DS . substr($logicalPathPsr4, $length))) {[m
[31m-                            return $file;[m
[31m-                        }[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        // PSR-0 lookup[m
[31m-        if (false !== $pos = strrpos($class, '\\')) {[m
[31m-            // namespaced class name[m
[31m-            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)[m
[31m-            . strtr(substr($logicalPathPsr4, $pos + 1), '_', DS);[m
[31m-        } else {[m
[31m-            // PEAR-like class name[m
[31m-            $logicalPathPsr0 = strtr($class, '_', DS) . $ext;[m
[31m-        }[m
[31m-[m
[31m-        if (isset(self::$prefixesPsr0[$first])) {[m
[31m-            foreach (self::$prefixesPsr0[$first] as $prefix => $dirs) {[m
[31m-                if (0 === strpos($class, $prefix)) {[m
[31m-                    foreach ($dirs as $dir) {[m
[31m-                        if (file_exists($file = $dir . DS . $logicalPathPsr0)) {[m
[31m-                            return $file;[m
[31m-                        }[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        // Remember that this class does not exist.[m
[31m-        return self::$map[$class] = false;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 导入所需的类库 同java的Import 本函数有缓存功能[m
[31m-     * @param string $class 类库命名空间字符串[m
[31m-     * @param string $baseUrl 起始路径[m
[31m-     * @param string $ext 导入的文件扩展名[m
[31m-     * @return boolean[m
[31m-     */[m
[31m-    public static function import($class, $baseUrl = '', $ext = EXT)[m
[31m-    {[m
[31m-        static $_file = [];[m
[31m-        $class        = str_replace(['.', '#'], [DS, '.'], $class);[m
[31m-        if (isset($_file[$class . $baseUrl])) {[m
[31m-            return true;[m
[31m-        }[m
[31m-[m
[31m-        if (empty($baseUrl)) {[m
[31m-            list($name, $class) = explode(DS, $class, 2);[m
[31m-            if (isset(self::$namespace[$name])) {[m
[31m-                // 注册的命名空间[m
[31m-                $baseUrl = self::$namespace[$name];[m
[31m-            } elseif ('@' == $name) {[m
[31m-                //加载当前模块应用类库[m
[31m-                $baseUrl = MODULE_PATH;[m
[31m-            } elseif (is_dir(EXTEND_PATH . $name)) {[m
[31m-                $baseUrl = EXTEND_PATH;[m
[31m-            } else {[m
[31m-                // 加载其它模块的类库[m
[31m-                $baseUrl = APP_PATH . $name . DS;[m
[31m-            }[m
[31m-        } elseif (substr($baseUrl, -1) != DS) {[m
[31m-            $baseUrl .= DS;[m
[31m-        }[m
[31m-        // 如果类存在 则导入类库文件[m
[31m-        $filename = $baseUrl . $class . $ext;[m
[31m-        if (is_file($filename)) {[m
[31m-            // 开启调试模式Win环境严格区分大小写[m
[31m-            if (APP_DEBUG && IS_WIN && false === strpos(realpath($filename), $class . $ext)) {[m
[31m-                return false;[m
[31m-            }[m
[31m-            include $filename;[m
[31m-            $_file[$class . $baseUrl] = true;[m
[31m-            return true;[m
[31m-        }[m
[31m-        return false;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实例化一个没有模型文件的Model（对应数据表）[m
[31m-     * @param string $name Model名称 支持指定基础模型 例如 MongoModel:User[m
[31m-     * @param array $options 模型参数[m
[31m-     * @return Model[m
[31m-     */[m
[31m-    public static function table($name = '', array $options = [])[m
[31m-    {[m
[31m-        static $_model = [];[m
[31m-        if (strpos($name, ':')) {[m
[31m-            list($class, $name) = explode(':', $name);[m
[31m-        } else {[m
[31m-            $class = 'think\\Model';[m
[31m-        }[m
[31m-        $guid = $name . '_' . $class;[m
[31m-        if (!isset($_model[$guid])) {[m
[31m-            $_model[$guid] = new $class($name, $options);[m
[31m-        }[m
[31m-        return $_model[$guid];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实例化（分层）模型[m
[31m-     * @param string $name Model名称[m
[31m-     * @param string $layer 业务层名称[m
[31m-     * @return Object[m
[31m-     */[m
[31m-    public static function model($name = '', $layer = MODEL_LAYER)[m
[31m-    {[m
[31m-        if (empty($name)) {[m
[31m-            return new Model;[m
[31m-        }[m
[31m-        static $_model = [];[m
[31m-        if (isset($_model[$name . $layer])) {[m
[31m-            return $_model[$name . $layer];[m
[31m-        }[m
[31m-        if (strpos($name, '/')) {[m
[31m-            list($module, $name) = explode('/', $name, 2);[m
[31m-        } else {[m
[31m-            $module = APP_MULTI_MODULE ? MODULE_NAME : '';[m
[31m-        }[m
[31m-        $class = self::parseClass($module, $layer, $name);[m
[31m-        $name  = basename($name);[m
[31m-        if (class_exists($class)) {[m
[31m-            $model = new $class($name);[m
[31m-        } else {[m
[31m-            $class = str_replace('\\' . $module . '\\', '\\' . COMMON_MODULE . '\\', $class);[m
[31m-            if (class_exists($class)) {[m
[31m-                $model = new $class($name);[m
[31m-            } else {[m
[31m-                Log::record('实例化不存在的类：' . $class, 'notice');[m
[31m-                $model = new Model($name);[m
[31m-            }[m
[31m-        }[m
[31m-        $_model[$name . $layer] = $model;[m
[31m-        return $model;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实例化（分层）控制器 格式：[模块名/]控制器名[m
[31m-     * @param string $name 资源地址[m
[31m-     * @param string $layer 控制层名称[m
[31m-     * @param string $empty 空控制器名称[m
[31m-     * @return Object|false[m
[31m-     */[m
[31m-    public static function controller($name, $layer = '', $empty = '')[m
[31m-    {[m
[31m-        static $_instance = [];[m
[31m-        $layer            = $layer ?: CONTROLLER_LAYER;[m
[31m-        if (isset($_instance[$name . $layer])) {[m
[31m-            return $_instance[$name . $layer];[m
[31m-        }[m
[31m-        if (strpos($name, '/')) {[m
[31m-            list($module, $name) = explode('/', $name);[m
[31m-        } else {[m
[31m-            $module = APP_MULTI_MODULE ? MODULE_NAME : '';[m
[31m-        }[m
[31m-        $class = self::parseClass($module, $layer, $name);[m
[31m-        if (class_exists($class)) {[m
[31m-            $action                    = new $class;[m
[31m-            $_instance[$name . $layer] = $action;[m
[31m-            return $action;[m
[31m-        } elseif ($empty && class_exists($emptyClass = self::parseClass($module, $layer, $empty))) {[m
[31m-            return new $emptyClass;[m
[31m-        } else {[m
[31m-            throw new Exception('class [ ' . $class . ' ] not exists', 10001);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实例化验证类 格式：[模块名/]验证器名[m
[31m-     * @param string $name 资源地址[m
[31m-     * @param string $layer 验证层名称[m
[31m-     * @return Object|false[m
[31m-     */[m
[31m-    public static function validate($name = '', $layer = '')[m
[31m-    {[m
[31m-        if (empty($name)) {[m
[31m-            return new Validate;[m
[31m-        }[m
[31m-        static $_instance = [];[m
[31m-        $layer            = $layer ?: VALIDATE_LAYER;[m
[31m-        if (isset($_instance[$name . $layer])) {[m
[31m-            return $_instance[$name . $layer];[m
[31m-        }[m
[31m-        if (strpos($name, '/')) {[m
[31m-            list($module, $name) = explode('/', $name);[m
[31m-        } else {[m
[31m-            $module = APP_MULTI_MODULE ? MODULE_NAME : '';[m
[31m-        }[m
[31m-        $class = self::parseClass($module, $layer, $name);[m
[31m-        if (class_exists($class)) {[m
[31m-            $validate = new $class;[m
[31m-        } else {[m
[31m-            $class = str_replace('\\' . $module . '\\', '\\' . COMMON_MODULE . '\\', $class);[m
[31m-            if (class_exists($class)) {[m
[31m-                $validate = new $class;[m
[31m-            } else {[m
[31m-                throw new Exception('class [ ' . $class . ' ] not exists', 10001);[m
[31m-            }[m
[31m-        }[m
[31m-        $_instance[$name . $layer] = $validate;[m
[31m-        return $validate;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实例化数据库[m
[31m-     * @param mixed $config 数据库配置[m
[31m-     * @return object[m
[31m-     */[m
[31m-    public static function db($config = [])[m
[31m-    {[m
[31m-        return Db::connect($config);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 远程调用模块的操作方法 参数格式 [模块/控制器/]操作[m
[31m-     * @param string $url 调用地址[m
[31m-     * @param string|array $vars 调用参数 支持字符串和数组[m
[31m-     * @param string $layer 要调用的控制层名称[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public static function action($url, $vars = [], $layer = CONTROLLER_LAYER)[m
[31m-    {[m
[31m-        $info   = pathinfo($url);[m
[31m-        $action = $info['basename'];[m
[31m-        $module = '.' != $info['dirname'] ? $info['dirname'] : CONTROLLER_NAME;[m
[31m-        $class  = self::controller($module, $layer);[m
[31m-        if ($class) {[m
[31m-            if (is_scalar($vars)) {[m
[31m-                if (strpos($vars, '=')) {[m
[31m-                    parse_str($vars, $vars);[m
[31m-                } else {[m
[31m-                    $vars = [$vars];[m
[31m-                }[m
[31m-            }[m
[31m-            return App::invokeMethod([$class, $action . Config::get('action_suffix')], $vars);[m
[31m-        }[m
[31m-    }[m
[31m-    /**[m
[31m-     * 取得对象实例 支持调用类的静态方法[m
[31m-     *[m
[31m-     * @param string $class  对象类名[m
[31m-     * @param string $method 类的静态方法名[m
[31m-     *[m
[31m-     * @return mixed[m
[31m-     * @throws Exception[m
[31m-     */[m
[31m-    public static function instance($class, $method = '')[m
[31m-    {[m
[31m-        static $_instance = [];[m
[31m-        $identify         = $class . $method;[m
[31m-        if (!isset($_instance[$identify])) {[m
[31m-            if (class_exists($class)) {[m
[31m-                $o = new $class();[m
[31m-                if (!empty($method) && method_exists($o, $method)) {[m
[31m-                    $_instance[$identify] = call_user_func_array([ & $o, $method], []);[m
[31m-                } else {[m
[31m-                    $_instance[$identify] = $o;[m
[31m-                }[m
[31m-            } else {[m
[31m-                throw new Exception('class not exist :' . $class, 10007);[m
[31m-            }[m
[31m-        }[m
[31m-        return $_instance[$identify];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 字符串命名风格转换[m
[31m-     * type 0 将Java风格转换为C的风格 1 将C风格转换为Java的风格[m
[31m-     * @param string $name 字符串[m
[31m-     * @param integer $type 转换类型[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public static function parseName($name, $type = 0)[m
[31m-    {[m
[31m-        if ($type) {[m
[31m-            return ucfirst(preg_replace_callback('/_([a-zA-Z])/', function ($match) {return strtoupper($match[1]);}, $name));[m
[31m-        } else {[m
[31m-            return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_"));[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 解析应用类的类名[m
[31m-     * @param string $module 模块名[m
[31m-     * @param string $layer 层名 controller model ...[m
[31m-     * @param string $name 类名[m
[31m-     * @return string[m
[31m-     */[m
[31m-    public static function parseClass($module, $layer, $name)[m
[31m-    {[m
[31m-        $name  = str_replace(['/', '.'], '\\', $name);[m
[31m-        $array = explode('\\', $name);[m
[31m-        $class = self::parseName(array_pop($array), 1) . (CLASS_APPEND_SUFFIX ? ucfirst($layer) : '');[m
[31m-        $path  = $array ? implode('\\', $array) . '\\' : '';[m
[31m-        return APP_NAMESPACE . '\\' . (APP_MULTI_MODULE ? $module . '\\' : '') . $layer . '\\' . $path . $class;[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Log.php b/thinkphp/library/think/Log.php[m
[1mdeleted file mode 100644[m
[1mindex 55290d3..0000000[m
[1m--- a/thinkphp/library/think/Log.php[m
[1m+++ /dev/null[m
[36m@@ -1,140 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Log[m
[31m-{[m
[31m-    const LOG    = 'log';[m
[31m-    const ERROR  = 'error';[m
[31m-    const INFO   = 'info';[m
[31m-    const SQL    = 'sql';[m
[31m-    const NOTICE = 'notice';[m
[31m-    const ALERT  = 'alert';[m
[31m-[m
[31m-    // 日志信息[m
[31m-    protected static $log = [];[m
[31m-    // 日志类型[m
[31m-    protected static $type = ['log', 'error', 'info', 'sql', 'notice', 'alert'];[m
[31m-    // 日志写入驱动[m
[31m-    protected static $driver = null;[m
[31m-    // 通知发送驱动[m
[31m-    protected static $alarm = null;[m
[31m-[m
[31m-    // 日志初始化[m
[31m-    public static function init($config = [])[m
[31m-    {[m
[31m-        $type  = isset($config['type']) ? $config['type'] : 'File';[m
[31m-        $class = (!empty($config['namespace']) ? $config['namespace'] : '\\think\\log\\driver\\') . ucwords($type);[m
[31m-        unset($config['type']);[m
[31m-        self::$driver = new $class($config);[m
[31m-        // 记录初始化信息[m
[31m-        APP_DEBUG && Log::record('[ LOG ] INIT ' . $type . ': ' . var_export($config, true), 'info');[m
[31m-    }[m
[31m-[m
[31m-    // 通知初始化[m
[31m-    public static function alarm($config = [])[m
[31m-    {[m
[31m-        $type  = isset($config['type']) ? $config['type'] : 'Email';[m
[31m-        $class = (!empty($config['namespace']) ? $config['namespace'] : '\\think\\log\\alarm\\') . ucwords($type);[m
[31m-        unset($config['type']);[m
[31m-        self::$alarm = new $class($config['alarm']);[m
[31m-        // 记录初始化信息[m
[31m-        APP_DEBUG && Log::record('[ CACHE ] ALARM ' . $type . ': ' . var_export($config, true), 'info');[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取全部日志信息[m
[31m-     * @return array[m
[31m-     */[m
[31m-    public static function getLog()[m
[31m-    {[m
[31m-        return self::$log;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 记录调试信息[m
[31m-     * @param mixed $msg 调试信息[m
[31m-     * @param string $type 信息类型[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function record($msg, $type = 'log')[m
[31m-    {[m
[31m-        if (!is_string($msg)) {[m
[31m-            $msg = var_export($msg, true);[m
[31m-        }[m
[31m-        self::$log[] = ['type' => $type, 'msg' => $msg];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 清空日志信息[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function clear()[m
[31m-    {[m
[31m-        self::$log = [];[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 保存调试信息[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    public static function save()[m
[31m-    {[m
[31m-        if (is_null(self::$driver)) {[m
[31m-            self::init(Config::get('log'));[m
[31m-        }[m
[31m-        return self::$driver->save(self::$log);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 实时写入日志信息 并支持行为[m
[31m-     * @param mixed $msg 调试信息[m
[31m-     * @param string $type 信息类型[m
[31m-     * @return bool[m
[31m-     */[m
[31m-    public static function write($msg, $type = 'log')[m
[31m-    {[m
[31m-        if (!is_string($msg)) {[m
[31m-            $msg = var_export($msg, true);[m
[31m-        }[m
[31m-        // 封装日志信息[m
[31m-        $log[] = ['type' => $type, 'msg' => $msg];[m
[31m-[m
[31m-        // 监听log_write[m
[31m-        APP_HOOK && Hook::listen('log_write', $log);[m
[31m-        if (is_null(self::$driver)) {[m
[31m-            self::init(Config::get('log'));[m
[31m-        }[m
[31m-        // 写入日志[m
[31m-        return self::$driver->save($log);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 发送预警通知[m
[31m-     * @param mixed $msg 调试信息[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public static function send($msg)[m
[31m-    {[m
[31m-        self::$alarm && self::$alarm->send($msg);[m
[31m-    }[m
[31m-[m
[31m-    // 静态调用[m
[31m-    public static function __callStatic($method, $args)[m
[31m-    {[m
[31m-        if (in_array($method, self::$type)) {[m
[31m-            array_push($args, $method);[m
[31m-            return call_user_func_array('\\think\\Log::record', $args);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-}[m
[1mdiff --git a/thinkphp/library/think/Model.php b/thinkphp/library/think/Model.php[m
[1mdeleted file mode 100644[m
[1mindex 16a0d30..0000000[m
[1m--- a/thinkphp/library/think/Model.php[m
[1m+++ /dev/null[m
[36m@@ -1,1980 +0,0 @@[m
[31m-<?php[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | ThinkPHP [ WE CAN DO IT JUST THINK ][m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Copyright (c) 2006~2016 http://thinkphp.cn All rights reserved.[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )[m
[31m-// +----------------------------------------------------------------------[m
[31m-// | Author: liu21st <liu21st@gmail.com>[m
[31m-// +----------------------------------------------------------------------[m
[31m-[m
[31m-namespace think;[m
[31m-[m
[31m-class Model[m
[31m-{[m
[31m-    // 操作状态[m
[31m-    const MODEL_INSERT    = 1; //  新增[m
[31m-    const MODEL_UPDATE    = 2; //  更新[m
[31m-    const MODEL_BOTH      = 3; //  全部[m
[31m-    const EXISTS_VALIDATE = 0; // 存在就验证[m
[31m-    const MUST_VALIDATE   = 1; // 必须验证[m
[31m-    const VALUE_VALIDATE  = 2; // 有值就验证[m
[31m-    // 当前数据库操作对象[m
[31m-    protected $db = null;[m
[31m-    // 数据库对象池[m
[31m-    private $links = [];[m
[31m-    // 主键名称[m
[31m-    protected $pk = null;[m
[31m-    // 数据表前缀[m
[31m-    protected $tablePrefix = null;[m
[31m-    // 模型名称[m
[31m-    protected $name = '';[m
[31m-    // 数据库名称[m
[31m-    protected $dbName = '';[m
[31m-    // 数据表字段大小写[m
[31m-    protected $attrCase = null;[m
[31m-    //数据库配置[m
[31m-    protected $connection = [];[m
[31m-    // 数据表名（不包含表前缀）[m
[31m-    protected $tableName = '';[m
[31m-    // 实际数据表名（包含表前缀）[m
[31m-    protected $trueTableName = '';[m
[31m-    // 最近错误信息[m
[31m-    protected $error = '';[m
[31m-    // 字段信息[m
[31m-    protected $fields = [];[m
[31m-    // 数据信息[m
[31m-    protected $data = [];[m
[31m-    // 数据副本[m
[31m-    protected $duplicate = [];[m
[31m-    // 查询表达式参数[m
[31m-    protected $options = [];[m
[31m-    // 命名范围定义[m
[31m-    protected $scope = [];[m
[31m-    // 字段映射定义[m
[31m-    protected $map = [];[m
[31m-[m
[31m-    /**[m
[31m-     * 架构函数[m
[31m-     * @access public[m
[31m-     * @param string $name 模型名称[m
[31m-     * @param array $config 模型配置[m
[31m-     */[m
[31m-    public function __construct($name = '', array $config = [])[m
[31m-    {[m
[31m-        // 模型初始化[m
[31m-        $this->_initialize();[m
[31m-        // 传入模型参数[m
[31m-        if (!empty($name)) {[m
[31m-            $this->name = $name;[m
[31m-        } elseif (empty($this->name)) {[m
[31m-            $this->name = $this->getModelName();[m
[31m-        }[m
[31m-        if (strpos($this->name, '.')) {[m
[31m-            // 支持 数据库名.模型名的 定义[m
[31m-            list($this->dbName, $this->name) = explode('.', $this->name);[m
[31m-        }[m
[31m-[m
[31m-        if (!empty($config['prefix'])) {[m
[31m-            $this->tablePrefix = $config['prefix'];[m
[31m-        } elseif (isset($config['prefix']) && '' === $config['prefix']) {[m
[31m-            $this->tablePrefix = '';[m
[31m-        } elseif (is_null($this->tablePrefix)) {[m
[31m-            $this->tablePrefix = Config::get('database.prefix');[m
[31m-        }[m
[31m-        if (!empty($config['connection'])) {[m
[31m-            $this->connection = $config['connection'];[m
[31m-        }[m
[31m-        if (!empty($config['table_name'])) {[m
[31m-            $this->tableName = $config['table_name'];[m
[31m-        }[m
[31m-        if (!empty($config['true_table_name'])) {[m
[31m-            $this->trueTableName = $config['true_table_name'];[m
[31m-        }[m
[31m-        if (!empty($config['db_name'])) {[m
[31m-            $this->dbName = $config['db_name'];[m
[31m-        }[m
[31m-[m
[31m-        if (is_null($this->attrCase)) {[m
[31m-            $this->attrCase = Config::get('db_attr_case');[m
[31m-        }[m
[31m-[m
[31m-        // 数据库初始化操作[m
[31m-        // 获取数据库操作对象[m
[31m-        // 当前模型有独立的数据库连接信息[m
[31m-        $this->db(0, $this->connection);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 设置数据对象的值[m
[31m-     * @access public[m
[31m-     * @param string $name 名称[m
[31m-     * @param mixed $value 值[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public function __set($name, $value)[m
[31m-    {[m
[31m-        // 设置数据对象属性[m
[31m-        $this->data[$name] = $value;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 获取数据对象的值[m
[31m-     * @access public[m
[31m-     * @param string $name 名称[m
[31m-     * @return mixed[m
[31m-     */[m
[31m-    public function __get($name)[m
[31m-    {[m
[31m-        return isset($this->data[$name]) ? $this->data[$name] : null;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 检测数据对象的值[m
[31m-     * @access public[m
[31m-     * @param string $name 名称[m
[31m-     * @return boolean[m
[31m-     */[m
[31m-    public function __isset($name)[m
[31m-    {[m
[31m-        return isset($this->data[$name]);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 销毁数据对象的值[m
[31m-     * @access public[m
[31m-     * @param string $name 名称[m
[31m-     * @return void[m
[31m-     */[m
[31m-    public function __unset($name)[m
[31m-    {[m
[31m-        unset($this->data[$name]);[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 利用__call方法实现一些特殊的Model方法[m
[31m-     * @access public[m
[31m-     * @param string $method 方法名称[m
[31m-     * @param array $args 调用参数[m
[31m-     * @return mixed[m
[31m-     * @throws \think\Exception[m
[31m-     */[m
[31m-    public function __call($method, $args)[m
[31m-    {[m
[31m-        if (in_array(strtolower($method), ['count', 'sum', 'min', 'max', 'avg'], true)) {[m
[31m-            // 统计查询的实现[m
[31m-            $field = isset($args[0]) ? $args[0] : '*';[m
[31m-            return $this->getField(strtoupper($method) . '(' . $field . ') AS tp_' . $method);[m
[31m-        } elseif (strtolower(substr($method, 0, 5)) == 'getby') {[m
[31m-            // 根据某个字段获取记录[m
[31m-            $field         = Loader::parseName(substr($method, 5));[m
[31m-            $where[$field] = $args[0];[m
[31m-            return $this->where($where)->find();[m
[31m-        } elseif (strtolower(substr($method, 0, 10)) == 'getfieldby') {[m
[31m-            // 根据某个字段获取记录的某个值[m
[31m-            $name         = Loader::parseName(substr($method, 10));[m
[31m-            $where[$name] = $args[0];[m
[31m-            return $this->where($where)->getField($args[1]);[m
[31m-        } elseif (isset($this->scope[$method])) {[m
[31m-            // 命名范围的单独调用支持[m
[31m-            return $this->scope($method, $args[0]);[m
[31m-        } else {[m
[31m-            throw new Exception(__CLASS__ . ':' . $method . ' method not exist');[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // 回调方法 初始化模型[m
[31m-    protected function _initialize()[m
[31m-    {}[m
[31m-[m
[31m-    /**[m
[31m-     * 对写入到数据库的数据进行处理[m
[31m-     * @access protected[m
[31m-     * @param mixed $data 要操作的数据[m
[31m-     * @param string $type insert 或者 update[m
[31m-     * @return array[m
[31m-     * @throws \think\Exception[m
[31m-     */[m
[31m-    protected function _write_data($data, $type)[m
[31m-    {[m
[31m-        if (empty($data)) {[m
[31m-            if (!empty($this->data)) {[m
[31m-                // 没有传递数据，获取当前数据对象的值[m
[31m-                $data = $this->data;[m
[31m-                // 重置数据[m
[31m-                $this->data = [];[m
[31m-            } else {[m
[31m-                throw new Exception('invalid data');[m
[31m-            }[m
[31m-        }[m
[31m-        if (!empty($this->duplicate) && 'update' == $type) {[m
[31m-            // 存在数据副本[m
[31m-            foreach ($data as $key => $val) {[m
[31m-                // 去除相同数据[m
[31m-                if (isset($this->duplicate[$key]) && $val == $this->duplicate[$key]) {[m
[31m-                    unset($data[$key]);[m
[31m-                }[m
[31m-            }[m
[31m-            if (empty($data)) {[m
[31m-                // 没有数据变化[m
[31m-                return [];[m
[31m-            } else {[m
[31m-                // 更新操作保留主键信息[m
[31m-                $pk = $this->getPk();[m
[31m-                if (is_array($pk)) {[m
[31m-                    foreach ($pk as $key) {[m
[31m-                        if (isset($this->duplicate[$key])) {[m
[31m-                            $data[$key] = $this->duplicate[$key];[m
[31m-                        }[m
[31m-                    }[m
[31m-                } elseif (isset($this->duplicate[$pk])) {[m
[31m-                    $data[$pk] = $this->duplicate[$pk];[m
[31m-                }[m
[31m-            }[m
[31m-            // 重置副本[m
[31m-            $this->duplicate = [];[m
[31m-        }[m
[31m-        // 检查字段映射[m
[31m-        if (!empty($this->map)) {[m
[31m-            foreach ($this->map as $key => $val) {[m
[31m-                if (isset($data[$key])) {[m
[31m-                    $data[$val] = $data[$key];[m
[31m-                    unset($data[$key]);[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        // 数据自动验证[m
[31m-        if (!$this->dataValidate($data)) {[m
[31m-            return false;[m
[31m-        }[m
[31m-[m
[31m-        // 数据自动填充[m
[31m-        $this->dataFill($data);[m
[31m-[m
[31m-        $fields = $this->getFields();[m
[31m-        // 检查非数据字段[m
[31m-        if (!empty($fields)) {[m
[31m-            foreach ($data as $key => $val) {[m
[31m-                if (!in_array($key, $fields, true)) {[m
[31m-                    if (Config::get('db_fields_strict')) {[m
[31m-                        throw new Exception(' fields not exists :[ ' . $key . ' ]');[m
[31m-                    }[m
[31m-                    unset($data[$key]);[m
[31m-                } elseif (is_scalar($val) && !isset($this->options['bind'][$key])) {[m
[31m-                    // 字段类型检查[m
[31m-                    $this->_parseType($data, $key, $this->options['bind']);[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-        // 安全过滤[m
[31m-        if (!empty($this->options['filter'])) {[m
[31m-            $data = array_map($this->options['filter'], $data);[m
[31m-            unset($this->options['filter']);[m
[31m-        }[m
[31m-        // 回调方法[m
[31m-        $this->_before_write($data);[m
[31m-        if (empty($data)) {[m
[31m-            // 没有数据则不执行[m
[31m-            throw new Exception('no data to write');[m
[31m-        }[m
[31m-        return $data;[m
[31m-    }[m
[31m-    // 写入数据前的回调方法 包括新增和更新[m
[31m-    protected function _before_write(&$data)[m
[31m-    {}[m
[31m-[m
[31m-    /**[m
[31m-     * 新增数据[m
[31m-     * @access public[m
[31m-     * @param mixed $data 数据[m
[31m-     * @param boolean $replace 是否replace[m
[31m-     * @return mixed[m
[31m-     * @throws \think\Exception[m
[31m-     */[m
[31m-    public function add($data = '', $replace = false)[m
[31m-    {[m
[31m-        // 数据处理[m
[31m-        $data = $this->_write_data($data, 'insert');[m
[31m-        if (false === $data) {[m
[31m-            return false;[m
[31m-        }[m
[31m-        // 分析表达式[m
[31m-        $options = $this->_parseOptions();[m
[31m-        if (false === $this->_before_insert($data, $options)) {[m
[31m-            return false;[m
[31m-        }[m
[31m-        // 写入数据到数据库[m
[31m-        $result = $this->db->insert($data, $options, $replace);[m
[31m-        if (false !== $result && is_numeric($result)) {[m
[31m-            $pk = $this->getPk($options['table']);[m
[31m-            // 增加复合主键支持[m
[31m-            if (is_array($pk)) {[m
[31m-                return $result;[m
[31m-            }[m
[31m-            $insertId = $this->getLastInsID();[m
[31m-            if ($insertId) {[m
[31m-                // 自增主键返回插入ID[m
[31m-                $data[$pk] = $insertId;[m
[31m-            }[m
[31m-            if (false === $this->_after_insert($data, $options)) {[m
[31m-                return false;[m
[31m-            }[m
[31m-        }[m
[31m-        return !empty($insertId) ? $insertId : $result;[m
[31m-    }[m
[31m-    // 插入数据前的回调方法[m
[31m-    protected function _before_insert(&$data, $options = [])[m
[31m-    {}[m
[31m-    // 插入成功后的回调方法[m
[31m-    protected function _after_insert($data, $options = [])[m
[31m-    {}[m
[31m-[m
[31m-    public function addAll($dataList, $options = [], $replace = false)[m
[31m-    {[m
[31m-        if (empty($dataList)) {[m
[31m-            throw new Exception('no data to write');[m
[31m-        }[m
[31m-        // 数据处理[m
[31m-        foreach ($dataList as &$data) {[m
[31m-            $data = $this->_write_data($data, 'insert');[m
[31m-            if (false === $data) {[m
[31m-                return false;[m
[31m-            }[m
[31m-        }[m
[31m-        // 分析表达式[m
[31m-        $options = $this->_parseOptions($options);[m
[31m-        // 写入数据到数据库[m
[31m-        $result = $this->db->insertAll($dataList, $options, $replace);[m
[31m-        if (false !== $result) {[m
[31m-            $insertId = $this->getLastInsID();[m
[31m-        }[m
[31m-        return !empty($insertId) ? $insertId : $result;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * 保存数据[m
[31m-     * @access public[m
[31m-     * @param mixed $data 数据[m
[31m-     * @return boolean[m
[31m-     * @throws \think\Exception[m
[31m-     */[m
[31m-    public function save($data = '')[m
[31m-    {[m
[31m-        // 数据处理[m
[31m-        $data = $this->_write_data($data, 'update');[m
[31m-        if (false == $data) {[m
[31m-            return false;[m
[31m-        }[m
[31m-        // 分析表达式[m
[31m-        $options = $this->_parseOptions();[m
[31m-        $pk      = $this->getPk($options['table']);[m
[31m-        if (!isset($options['where'])) {[m
[31m-            // 如果存在主键数据 则自动作为更新条件[m
[31m-            if (is_string($pk) && isset($data[$pk])) {[m
[31m-                $where[$pk] = $data[$pk];[m
[31m-                unset($data[$pk]);[m
[31m-            } elseif (is_array($pk)) {[m
[31m-                // 增加复合主键支持[m
[31m-                foreach ($pk as $field) {[m
[31m-                    if (isset($data[$field])) {[m
[31m-                        $where[$field] = $data[$field];[m
[31m-                    } else {[m
[31m-                        // 如果缺少复合主键数据则不执行[m
[31m-                        throw new Exception('miss complex primary data');[m
[31m-                    }[m
[31m-                    unset($data[$field]);[m
[31m-                }[m
[31m-            }[m
[31m-            if (!isset($where)) {[m
[31m-                // 如果没有任何更新条件则不执行[m
[31m-                throw new Exception('no data to update without where');[m
[31m-            } else {[m
[31m-                $options['where'] = $where;[m
[31m-            }[m
[31m-        }[m
[31m-        if (is_string($pk) && isset($options['where'][$pk])) {[m
[31m-            $pkValue = $options['where'][$pk];[m
[31m-        }[m
[31m-        if (false === $this->_before_update($data, $options)) {[m
[31m-            return false;[m
[31m-        }[m
[31m-        $result = $this->db->update($data, $options);[m
[31m-        if (false !== $result && is_numeric($result)) {[m
[31m-            if (isset($pkValue)) {[m
[31m-                $data[$pk] = $pkValue;[m
[31m-            }[m
[31m-            $this->_after_update($data, $options);[m
[31m-        }[m
[31m-        return $result;[m
[31m-    }[m
[31m-    // 更新数据前的回调方法[m
[31m-    protected function _before_update(&$data, $options = [])[m
[31m-    {}[m
[31m-    // 更新成功后的回调方法[m
[31m-    protected function _after_update($data, $options = [])[m
[31m-    {}[m
[31m-[m
[31m-    /**[m
[31m-     * 删除数据[m
[31m-     * @access public[m
[31m-     * @param mixed $options 表达式[m
[31m-     * @return mixed[m
[31m-     * @throws \think\Exception[m
[31m-     */[m
[31m-    public function delete($options = [])[m
[31m-    {[m
[31m-        $pk = $this->getPk();[m
[31m-        if (empty($options) && empty($this->options['where'])) {[m
[31m-            // 如果删除条件为空 则删除当前数据对象所对应的记录[m
[31m-            if (!empty($this->data) && is_string($pk) && isset($this->data[$pk])) {[m
[31m-                return $this->delete($this->data[$pk]);[m
[31m-            } else {[m
[31m-                throw new Exception('no data to delete without where');[m
[31m-            }[m
[31m-        }[m
[31m-        if (!empty($options) && empty($options['where'])) {[m
[31m-            // AR模式分析主键条件[m
[31m-            $this->parsePkWhere($options);[m
[31m-        }[m
[31m-[m
[31m-        // 分析表达式[m
[31m-        $options = $this->_parseOptions($options);[m
[31m-        if (empty($options['where'])) {[m
[31m-            // 如果条件为空 不进行删除操作 除非设置 1=1[m
[31m-            throw new Exception('no data to delete without where');[m
[31m-        }[m
[31m-        if (is_string($pk) && isset($options['where'][$pk])) {[m
[31m-            $pkValue = $options['where'][$pk];[m
[31m-        }[m
[31m-        $result = $this->db->delete($options);[m
[31m-        if (false !== $result && is_numeric($result)) {[m
[31m-            $data = [];[m
[31m-            if (isset($pkValue)) {[m
[31m-                $data[$pk] = $pkValue;[m
[31m-            }[m
[31m-            $this->_after_delete($data, $options);[m
[31m-        }[m
[31m-        // 返回删除记录个数[m
[31m-        return $result